// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// BurnNft is the `BurnNft` instruction.
type BurnNft struct {

	// [0] = [WRITE] metadata
	// ··········· Metadata (pda of ['metadata', program id, mint id])
	//
	// [1] = [WRITE, SIGNER] owner
	// ··········· NFT owner
	//
	// [2] = [WRITE] mint
	// ··········· Mint of the NFT
	//
	// [3] = [WRITE] tokenAccount
	// ··········· Token account to close
	//
	// [4] = [WRITE] masterEditionAccount
	// ··········· MasterEdition2 of the NFT
	//
	// [5] = [] splTokenProgram
	// ··········· SPL Token Program
	//
	// [6] = [WRITE] collectionMetadata
	// ··········· Metadata of the Collection
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewBurnNftInstructionBuilder creates a new `BurnNft` instruction builder.
func NewBurnNftInstructionBuilder() *BurnNft {
	nd := &BurnNft{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetMetadataAccount sets the "metadata" account.
// Metadata (pda of ['metadata', program id, mint id])
func (inst *BurnNft) SetMetadataAccount(metadata ag_solanago.PublicKey) *BurnNft {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(metadata).WRITE()
	return inst
}

// GetMetadataAccount gets the "metadata" account.
// Metadata (pda of ['metadata', program id, mint id])
func (inst *BurnNft) GetMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOwnerAccount sets the "owner" account.
// NFT owner
func (inst *BurnNft) SetOwnerAccount(owner ag_solanago.PublicKey) *BurnNft {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(owner).WRITE().SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
// NFT owner
func (inst *BurnNft) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMintAccount sets the "mint" account.
// Mint of the NFT
func (inst *BurnNft) SetMintAccount(mint ag_solanago.PublicKey) *BurnNft {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(mint).WRITE()
	return inst
}

// GetMintAccount gets the "mint" account.
// Mint of the NFT
func (inst *BurnNft) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenAccountAccount sets the "tokenAccount" account.
// Token account to close
func (inst *BurnNft) SetTokenAccountAccount(tokenAccount ag_solanago.PublicKey) *BurnNft {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenAccount).WRITE()
	return inst
}

// GetTokenAccountAccount gets the "tokenAccount" account.
// Token account to close
func (inst *BurnNft) GetTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetMasterEditionAccountAccount sets the "masterEditionAccount" account.
// MasterEdition2 of the NFT
func (inst *BurnNft) SetMasterEditionAccountAccount(masterEditionAccount ag_solanago.PublicKey) *BurnNft {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(masterEditionAccount).WRITE()
	return inst
}

// GetMasterEditionAccountAccount gets the "masterEditionAccount" account.
// MasterEdition2 of the NFT
func (inst *BurnNft) GetMasterEditionAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSplTokenProgramAccount sets the "splTokenProgram" account.
// SPL Token Program
func (inst *BurnNft) SetSplTokenProgramAccount(splTokenProgram ag_solanago.PublicKey) *BurnNft {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(splTokenProgram)
	return inst
}

// GetSplTokenProgramAccount gets the "splTokenProgram" account.
// SPL Token Program
func (inst *BurnNft) GetSplTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetCollectionMetadataAccount sets the "collectionMetadata" account.
// Metadata of the Collection
func (inst *BurnNft) SetCollectionMetadataAccount(collectionMetadata ag_solanago.PublicKey) *BurnNft {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(collectionMetadata).WRITE()
	return inst
}

// GetCollectionMetadataAccount gets the "collectionMetadata" account.
// Metadata of the Collection
func (inst *BurnNft) GetCollectionMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst BurnNft) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_BurnNft,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst BurnNft) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *BurnNft) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Metadata is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.MasterEditionAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SplTokenProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.CollectionMetadata is not set")
		}
	}
	return nil
}

func (inst *BurnNft) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("BurnNft")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("          metadata", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("             owner", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("              mint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("             token", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("     masterEdition", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("   splTokenProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("collectionMetadata", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj BurnNft) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *BurnNft) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewBurnNftInstruction declares a new BurnNft instruction with the provided parameters and accounts.
func NewBurnNftInstruction(
	// Accounts:
	metadata ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	tokenAccount ag_solanago.PublicKey,
	masterEditionAccount ag_solanago.PublicKey,
	splTokenProgram ag_solanago.PublicKey,
	collectionMetadata ag_solanago.PublicKey) *BurnNft {
	return NewBurnNftInstructionBuilder().
		SetMetadataAccount(metadata).
		SetOwnerAccount(owner).
		SetMintAccount(mint).
		SetTokenAccountAccount(tokenAccount).
		SetMasterEditionAccountAccount(masterEditionAccount).
		SetSplTokenProgramAccount(splTokenProgram).
		SetCollectionMetadataAccount(collectionMetadata)
}
