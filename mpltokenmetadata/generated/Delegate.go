// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"errors"
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Delegate is the `Delegate` instruction.
type Delegate struct {
	DelegateArgs DelegateArgs

	// [0] = [WRITE] delegateRecord
	// ··········· Delegate record account
	//
	// [1] = [] delegate
	// ··········· Owner of the delegated account
	//
	// [2] = [WRITE] metadata
	// ··········· Metadata account
	//
	// [3] = [] masterEdition
	// ··········· Master Edition account
	//
	// [4] = [WRITE] tokenRecord
	// ··········· Token record account
	//
	// [5] = [] mint
	// ··········· Mint of metadata
	//
	// [6] = [WRITE] token
	// ··········· Token account of mint
	//
	// [7] = [SIGNER] authority
	// ··········· Update authority or token owner
	//
	// [8] = [WRITE, SIGNER] payer
	// ··········· Payer
	//
	// [9] = [] systemProgram
	// ··········· System Program
	//
	// [10] = [] sysvarInstructions
	// ··········· Instructions sysvar account
	//
	// [11] = [] splTokenProgram
	// ··········· SPL Token Program
	//
	// [12] = [] authorizationRulesProgram
	// ··········· Token Authorization Rules Program
	//
	// [13] = [] authorizationRules
	// ··········· Token Authorization Rules account
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewDelegateInstructionBuilder creates a new `Delegate` instruction builder.
func NewDelegateInstructionBuilder() *Delegate {
	nd := &Delegate{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 14),
	}
	return nd
}

// SetDelegateArgs sets the "delegateArgs" parameter.
func (inst *Delegate) SetDelegateArgs(delegateArgs DelegateArgs) *Delegate {
	inst.DelegateArgs = delegateArgs
	return inst
}

// SetDelegateRecordAccount sets the "delegateRecord" account.
// Delegate record account
func (inst *Delegate) SetDelegateRecordAccount(delegateRecord ag_solanago.PublicKey) *Delegate {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(delegateRecord).WRITE()
	return inst
}

// GetDelegateRecordAccount gets the "delegateRecord" account.
// Delegate record account
func (inst *Delegate) GetDelegateRecordAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetDelegateAccount sets the "delegate" account.
// Owner of the delegated account
func (inst *Delegate) SetDelegateAccount(delegate ag_solanago.PublicKey) *Delegate {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(delegate)
	return inst
}

// GetDelegateAccount gets the "delegate" account.
// Owner of the delegated account
func (inst *Delegate) GetDelegateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMetadataAccount sets the "metadata" account.
// Metadata account
func (inst *Delegate) SetMetadataAccount(metadata ag_solanago.PublicKey) *Delegate {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(metadata).WRITE()
	return inst
}

// GetMetadataAccount gets the "metadata" account.
// Metadata account
func (inst *Delegate) GetMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMasterEditionAccount sets the "masterEdition" account.
// Master Edition account
func (inst *Delegate) SetMasterEditionAccount(masterEdition ag_solanago.PublicKey) *Delegate {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(masterEdition)
	return inst
}

// GetMasterEditionAccount gets the "masterEdition" account.
// Master Edition account
func (inst *Delegate) GetMasterEditionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenRecordAccount sets the "tokenRecord" account.
// Token record account
func (inst *Delegate) SetTokenRecordAccount(tokenRecord ag_solanago.PublicKey) *Delegate {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenRecord).WRITE()
	return inst
}

// GetTokenRecordAccount gets the "tokenRecord" account.
// Token record account
func (inst *Delegate) GetTokenRecordAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetMintAccount sets the "mint" account.
// Mint of metadata
func (inst *Delegate) SetMintAccount(mint ag_solanago.PublicKey) *Delegate {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
// Mint of metadata
func (inst *Delegate) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenAccount sets the "token" account.
// Token account of mint
func (inst *Delegate) SetTokenAccount(token ag_solanago.PublicKey) *Delegate {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(token).WRITE()
	return inst
}

// GetTokenAccount gets the "token" account.
// Token account of mint
func (inst *Delegate) GetTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetAuthorityAccount sets the "authority" account.
// Update authority or token owner
func (inst *Delegate) SetAuthorityAccount(authority ag_solanago.PublicKey) *Delegate {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
// Update authority or token owner
func (inst *Delegate) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetPayerAccount sets the "payer" account.
// Payer
func (inst *Delegate) SetPayerAccount(payer ag_solanago.PublicKey) *Delegate {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
// Payer
func (inst *Delegate) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetSystemProgramAccount sets the "systemProgram" account.
// System Program
func (inst *Delegate) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *Delegate {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
// System Program
func (inst *Delegate) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetSysvarInstructionsAccount sets the "sysvarInstructions" account.
// Instructions sysvar account
func (inst *Delegate) SetSysvarInstructionsAccount(sysvarInstructions ag_solanago.PublicKey) *Delegate {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(sysvarInstructions)
	return inst
}

// GetSysvarInstructionsAccount gets the "sysvarInstructions" account.
// Instructions sysvar account
func (inst *Delegate) GetSysvarInstructionsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetSplTokenProgramAccount sets the "splTokenProgram" account.
// SPL Token Program
func (inst *Delegate) SetSplTokenProgramAccount(splTokenProgram ag_solanago.PublicKey) *Delegate {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(splTokenProgram)
	return inst
}

// GetSplTokenProgramAccount gets the "splTokenProgram" account.
// SPL Token Program
func (inst *Delegate) GetSplTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetAuthorizationRulesProgramAccount sets the "authorizationRulesProgram" account.
// Token Authorization Rules Program
func (inst *Delegate) SetAuthorizationRulesProgramAccount(authorizationRulesProgram ag_solanago.PublicKey) *Delegate {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(authorizationRulesProgram)
	return inst
}

// GetAuthorizationRulesProgramAccount gets the "authorizationRulesProgram" account.
// Token Authorization Rules Program
func (inst *Delegate) GetAuthorizationRulesProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetAuthorizationRulesAccount sets the "authorizationRules" account.
// Token Authorization Rules account
func (inst *Delegate) SetAuthorizationRulesAccount(authorizationRules ag_solanago.PublicKey) *Delegate {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(authorizationRules)
	return inst
}

// GetAuthorizationRulesAccount gets the "authorizationRules" account.
// Token Authorization Rules account
func (inst *Delegate) GetAuthorizationRulesAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

func (inst Delegate) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Delegate,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Delegate) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Delegate) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.DelegateArgs == nil {
			return errors.New("DelegateArgs parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.DelegateRecord is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Delegate is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Metadata is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.MasterEdition is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenRecord is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Token is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.SysvarInstructions is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.SplTokenProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.AuthorizationRulesProgram is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.AuthorizationRules is not set")
		}
	}
	return nil
}

func (inst *Delegate) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Delegate")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("DelegateArgs", inst.DelegateArgs))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=14]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           delegateRecord", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                 delegate", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                 metadata", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("            masterEdition", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("              tokenRecord", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                     mint", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                    token", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("                authority", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                    payer", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("            systemProgram", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("       sysvarInstructions", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("          splTokenProgram", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("authorizationRulesProgram", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("       authorizationRules", inst.AccountMetaSlice.Get(13)))
					})
				})
		})
}

func (obj Delegate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DelegateArgs` param:
	{
		tmp := delegateArgsContainer{}
		switch realvalue := obj.DelegateArgs.(type) {
		case *DelegateArgsCollectionV1:
			tmp.Enum = 0
			tmp.CollectionV1 = *realvalue
		case *DelegateArgsSaleV1:
			tmp.Enum = 1
			tmp.SaleV1 = *realvalue
		case *DelegateArgsTransferV1:
			tmp.Enum = 2
			tmp.TransferV1 = *realvalue
		case *DelegateArgsDataV1:
			tmp.Enum = 3
			tmp.DataV1 = *realvalue
		case *DelegateArgsUtilityV1:
			tmp.Enum = 4
			tmp.UtilityV1 = *realvalue
		case *DelegateArgsStakingV1:
			tmp.Enum = 5
			tmp.StakingV1 = *realvalue
		case *DelegateArgsStandardV1:
			tmp.Enum = 6
			tmp.StandardV1 = *realvalue
		case *DelegateArgsLockedTransferV1:
			tmp.Enum = 7
			tmp.LockedTransferV1 = *realvalue
		case *DelegateArgsProgrammableConfigV1:
			tmp.Enum = 8
			tmp.ProgrammableConfigV1 = *realvalue
		case *DelegateArgsAuthorityItemV1:
			tmp.Enum = 9
			tmp.AuthorityItemV1 = *realvalue
		case *DelegateArgsDataItemV1:
			tmp.Enum = 10
			tmp.DataItemV1 = *realvalue
		case *DelegateArgsCollectionItemV1:
			tmp.Enum = 11
			tmp.CollectionItemV1 = *realvalue
		case *DelegateArgsProgrammableConfigItemV1:
			tmp.Enum = 12
			tmp.ProgrammableConfigItemV1 = *realvalue
		case *DelegateArgsPrintDelegateV1:
			tmp.Enum = 13
			tmp.PrintDelegateV1 = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	return nil
}
func (obj *Delegate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DelegateArgs`:
	{
		tmp := new(delegateArgsContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.DelegateArgs = &tmp.CollectionV1
		case 1:
			obj.DelegateArgs = &tmp.SaleV1
		case 2:
			obj.DelegateArgs = &tmp.TransferV1
		case 3:
			obj.DelegateArgs = &tmp.DataV1
		case 4:
			obj.DelegateArgs = &tmp.UtilityV1
		case 5:
			obj.DelegateArgs = &tmp.StakingV1
		case 6:
			obj.DelegateArgs = &tmp.StandardV1
		case 7:
			obj.DelegateArgs = &tmp.LockedTransferV1
		case 8:
			obj.DelegateArgs = &tmp.ProgrammableConfigV1
		case 9:
			obj.DelegateArgs = &tmp.AuthorityItemV1
		case 10:
			obj.DelegateArgs = &tmp.DataItemV1
		case 11:
			obj.DelegateArgs = &tmp.CollectionItemV1
		case 12:
			obj.DelegateArgs = &tmp.ProgrammableConfigItemV1
		case 13:
			obj.DelegateArgs = &tmp.PrintDelegateV1
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	return nil
}

// NewDelegateInstruction declares a new Delegate instruction with the provided parameters and accounts.
func NewDelegateInstruction(
	// Parameters:
	delegateArgs DelegateArgs,
	// Accounts:
	delegateRecord ag_solanago.PublicKey,
	delegate ag_solanago.PublicKey,
	metadata ag_solanago.PublicKey,
	masterEdition ag_solanago.PublicKey,
	tokenRecord ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	token ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	sysvarInstructions ag_solanago.PublicKey,
	splTokenProgram ag_solanago.PublicKey,
	authorizationRulesProgram ag_solanago.PublicKey,
	authorizationRules ag_solanago.PublicKey) *Delegate {
	return NewDelegateInstructionBuilder().
		SetDelegateArgs(delegateArgs).
		SetDelegateRecordAccount(delegateRecord).
		SetDelegateAccount(delegate).
		SetMetadataAccount(metadata).
		SetMasterEditionAccount(masterEdition).
		SetTokenRecordAccount(tokenRecord).
		SetMintAccount(mint).
		SetTokenAccount(token).
		SetAuthorityAccount(authority).
		SetPayerAccount(payer).
		SetSystemProgramAccount(systemProgram).
		SetSysvarInstructionsAccount(sysvarInstructions).
		SetSplTokenProgramAccount(splTokenProgram).
		SetAuthorizationRulesProgramAccount(authorizationRulesProgram).
		SetAuthorizationRulesAccount(authorizationRules)
}
