// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Migrate is the `Migrate` instruction.
type Migrate struct {

	// [0] = [WRITE] metadata
	// ··········· Metadata account
	//
	// [1] = [WRITE] edition
	// ··········· Edition account
	//
	// [2] = [WRITE] token
	// ··········· Token account
	//
	// [3] = [] tokenOwner
	// ··········· Token account owner
	//
	// [4] = [] mint
	// ··········· Mint account
	//
	// [5] = [WRITE, SIGNER] payer
	// ··········· Payer
	//
	// [6] = [SIGNER] authority
	// ··········· Update authority
	//
	// [7] = [] collectionMetadata
	// ··········· Collection metadata account
	//
	// [8] = [] delegateRecord
	// ··········· Delegate record account
	//
	// [9] = [WRITE] tokenRecord
	// ··········· Token record account
	//
	// [10] = [] systemProgram
	// ··········· System program
	//
	// [11] = [] sysvarInstructions
	// ··········· Instruction sysvar account
	//
	// [12] = [] splTokenProgram
	// ··········· SPL Token Program
	//
	// [13] = [] authorizationRulesProgram
	// ··········· Token Authorization Rules Program
	//
	// [14] = [] authorizationRules
	// ··········· Token Authorization Rules account
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMigrateInstructionBuilder creates a new `Migrate` instruction builder.
func NewMigrateInstructionBuilder() *Migrate {
	nd := &Migrate{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 15),
	}
	return nd
}

// SetMetadataAccount sets the "metadata" account.
// Metadata account
func (inst *Migrate) SetMetadataAccount(metadata ag_solanago.PublicKey) *Migrate {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(metadata).WRITE()
	return inst
}

// GetMetadataAccount gets the "metadata" account.
// Metadata account
func (inst *Migrate) GetMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetEditionAccount sets the "edition" account.
// Edition account
func (inst *Migrate) SetEditionAccount(edition ag_solanago.PublicKey) *Migrate {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(edition).WRITE()
	return inst
}

// GetEditionAccount gets the "edition" account.
// Edition account
func (inst *Migrate) GetEditionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenAccount sets the "token" account.
// Token account
func (inst *Migrate) SetTokenAccount(token ag_solanago.PublicKey) *Migrate {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(token).WRITE()
	return inst
}

// GetTokenAccount gets the "token" account.
// Token account
func (inst *Migrate) GetTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenOwnerAccount sets the "tokenOwner" account.
// Token account owner
func (inst *Migrate) SetTokenOwnerAccount(tokenOwner ag_solanago.PublicKey) *Migrate {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenOwner)
	return inst
}

// GetTokenOwnerAccount gets the "tokenOwner" account.
// Token account owner
func (inst *Migrate) GetTokenOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetMintAccount sets the "mint" account.
// Mint account
func (inst *Migrate) SetMintAccount(mint ag_solanago.PublicKey) *Migrate {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
// Mint account
func (inst *Migrate) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetPayerAccount sets the "payer" account.
// Payer
func (inst *Migrate) SetPayerAccount(payer ag_solanago.PublicKey) *Migrate {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
// Payer
func (inst *Migrate) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetAuthorityAccount sets the "authority" account.
// Update authority
func (inst *Migrate) SetAuthorityAccount(authority ag_solanago.PublicKey) *Migrate {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
// Update authority
func (inst *Migrate) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetCollectionMetadataAccount sets the "collectionMetadata" account.
// Collection metadata account
func (inst *Migrate) SetCollectionMetadataAccount(collectionMetadata ag_solanago.PublicKey) *Migrate {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(collectionMetadata)
	return inst
}

// GetCollectionMetadataAccount gets the "collectionMetadata" account.
// Collection metadata account
func (inst *Migrate) GetCollectionMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetDelegateRecordAccount sets the "delegateRecord" account.
// Delegate record account
func (inst *Migrate) SetDelegateRecordAccount(delegateRecord ag_solanago.PublicKey) *Migrate {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(delegateRecord)
	return inst
}

// GetDelegateRecordAccount gets the "delegateRecord" account.
// Delegate record account
func (inst *Migrate) GetDelegateRecordAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenRecordAccount sets the "tokenRecord" account.
// Token record account
func (inst *Migrate) SetTokenRecordAccount(tokenRecord ag_solanago.PublicKey) *Migrate {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenRecord).WRITE()
	return inst
}

// GetTokenRecordAccount gets the "tokenRecord" account.
// Token record account
func (inst *Migrate) GetTokenRecordAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetSystemProgramAccount sets the "systemProgram" account.
// System program
func (inst *Migrate) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *Migrate {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
// System program
func (inst *Migrate) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetSysvarInstructionsAccount sets the "sysvarInstructions" account.
// Instruction sysvar account
func (inst *Migrate) SetSysvarInstructionsAccount(sysvarInstructions ag_solanago.PublicKey) *Migrate {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(sysvarInstructions)
	return inst
}

// GetSysvarInstructionsAccount gets the "sysvarInstructions" account.
// Instruction sysvar account
func (inst *Migrate) GetSysvarInstructionsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetSplTokenProgramAccount sets the "splTokenProgram" account.
// SPL Token Program
func (inst *Migrate) SetSplTokenProgramAccount(splTokenProgram ag_solanago.PublicKey) *Migrate {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(splTokenProgram)
	return inst
}

// GetSplTokenProgramAccount gets the "splTokenProgram" account.
// SPL Token Program
func (inst *Migrate) GetSplTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetAuthorizationRulesProgramAccount sets the "authorizationRulesProgram" account.
// Token Authorization Rules Program
func (inst *Migrate) SetAuthorizationRulesProgramAccount(authorizationRulesProgram ag_solanago.PublicKey) *Migrate {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(authorizationRulesProgram)
	return inst
}

// GetAuthorizationRulesProgramAccount gets the "authorizationRulesProgram" account.
// Token Authorization Rules Program
func (inst *Migrate) GetAuthorizationRulesProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetAuthorizationRulesAccount sets the "authorizationRules" account.
// Token Authorization Rules account
func (inst *Migrate) SetAuthorizationRulesAccount(authorizationRules ag_solanago.PublicKey) *Migrate {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(authorizationRules)
	return inst
}

// GetAuthorizationRulesAccount gets the "authorizationRules" account.
// Token Authorization Rules account
func (inst *Migrate) GetAuthorizationRulesAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

func (inst Migrate) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Migrate,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Migrate) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Migrate) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Metadata is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Edition is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Token is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenOwner is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.CollectionMetadata is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.DelegateRecord is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenRecord is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.SysvarInstructions is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.SplTokenProgram is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.AuthorizationRulesProgram is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.AuthorizationRules is not set")
		}
	}
	return nil
}

func (inst *Migrate) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Migrate")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=15]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                 metadata", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                  edition", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                    token", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("               tokenOwner", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                     mint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                    payer", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                authority", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("       collectionMetadata", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("           delegateRecord", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("              tokenRecord", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("            systemProgram", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("       sysvarInstructions", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("          splTokenProgram", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("authorizationRulesProgram", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("       authorizationRules", inst.AccountMetaSlice.Get(14)))
					})
				})
		})
}

func (obj Migrate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *Migrate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewMigrateInstruction declares a new Migrate instruction with the provided parameters and accounts.
func NewMigrateInstruction(
	// Accounts:
	metadata ag_solanago.PublicKey,
	edition ag_solanago.PublicKey,
	token ag_solanago.PublicKey,
	tokenOwner ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	collectionMetadata ag_solanago.PublicKey,
	delegateRecord ag_solanago.PublicKey,
	tokenRecord ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	sysvarInstructions ag_solanago.PublicKey,
	splTokenProgram ag_solanago.PublicKey,
	authorizationRulesProgram ag_solanago.PublicKey,
	authorizationRules ag_solanago.PublicKey) *Migrate {
	return NewMigrateInstructionBuilder().
		SetMetadataAccount(metadata).
		SetEditionAccount(edition).
		SetTokenAccount(token).
		SetTokenOwnerAccount(tokenOwner).
		SetMintAccount(mint).
		SetPayerAccount(payer).
		SetAuthorityAccount(authority).
		SetCollectionMetadataAccount(collectionMetadata).
		SetDelegateRecordAccount(delegateRecord).
		SetTokenRecordAccount(tokenRecord).
		SetSystemProgramAccount(systemProgram).
		SetSysvarInstructionsAccount(sysvarInstructions).
		SetSplTokenProgramAccount(splTokenProgram).
		SetAuthorizationRulesProgramAccount(authorizationRulesProgram).
		SetAuthorizationRulesAccount(authorizationRules)
}
