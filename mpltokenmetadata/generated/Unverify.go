// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Unverify is the `Unverify` instruction.
type Unverify struct {
	VerificationArgs *VerificationArgs

	// [0] = [SIGNER] authority
	// ··········· Creator to verify, collection (or metadata if parent burned) update authority or delegate
	//
	// [1] = [] delegateRecord
	// ··········· Delegate record PDA
	//
	// [2] = [WRITE] metadata
	// ··········· Metadata account
	//
	// [3] = [] collectionMint
	// ··········· Mint of the Collection
	//
	// [4] = [WRITE] collectionMetadata
	// ··········· Metadata Account of the Collection
	//
	// [5] = [] systemProgram
	// ··········· System program
	//
	// [6] = [] sysvarInstructions
	// ··········· Instructions sysvar account
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUnverifyInstructionBuilder creates a new `Unverify` instruction builder.
func NewUnverifyInstructionBuilder() *Unverify {
	nd := &Unverify{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetVerificationArgs sets the "verificationArgs" parameter.
func (inst *Unverify) SetVerificationArgs(verificationArgs VerificationArgs) *Unverify {
	inst.VerificationArgs = &verificationArgs
	return inst
}

// SetAuthorityAccount sets the "authority" account.
// Creator to verify, collection (or metadata if parent burned) update authority or delegate
func (inst *Unverify) SetAuthorityAccount(authority ag_solanago.PublicKey) *Unverify {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
// Creator to verify, collection (or metadata if parent burned) update authority or delegate
func (inst *Unverify) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetDelegateRecordAccount sets the "delegateRecord" account.
// Delegate record PDA
func (inst *Unverify) SetDelegateRecordAccount(delegateRecord ag_solanago.PublicKey) *Unverify {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(delegateRecord)
	return inst
}

// GetDelegateRecordAccount gets the "delegateRecord" account.
// Delegate record PDA
func (inst *Unverify) GetDelegateRecordAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMetadataAccount sets the "metadata" account.
// Metadata account
func (inst *Unverify) SetMetadataAccount(metadata ag_solanago.PublicKey) *Unverify {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(metadata).WRITE()
	return inst
}

// GetMetadataAccount gets the "metadata" account.
// Metadata account
func (inst *Unverify) GetMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetCollectionMintAccount sets the "collectionMint" account.
// Mint of the Collection
func (inst *Unverify) SetCollectionMintAccount(collectionMint ag_solanago.PublicKey) *Unverify {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(collectionMint)
	return inst
}

// GetCollectionMintAccount gets the "collectionMint" account.
// Mint of the Collection
func (inst *Unverify) GetCollectionMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetCollectionMetadataAccount sets the "collectionMetadata" account.
// Metadata Account of the Collection
func (inst *Unverify) SetCollectionMetadataAccount(collectionMetadata ag_solanago.PublicKey) *Unverify {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(collectionMetadata).WRITE()
	return inst
}

// GetCollectionMetadataAccount gets the "collectionMetadata" account.
// Metadata Account of the Collection
func (inst *Unverify) GetCollectionMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSystemProgramAccount sets the "systemProgram" account.
// System program
func (inst *Unverify) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *Unverify {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
// System program
func (inst *Unverify) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSysvarInstructionsAccount sets the "sysvarInstructions" account.
// Instructions sysvar account
func (inst *Unverify) SetSysvarInstructionsAccount(sysvarInstructions ag_solanago.PublicKey) *Unverify {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(sysvarInstructions)
	return inst
}

// GetSysvarInstructionsAccount gets the "sysvarInstructions" account.
// Instructions sysvar account
func (inst *Unverify) GetSysvarInstructionsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst Unverify) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Unverify,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Unverify) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Unverify) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.VerificationArgs == nil {
			return errors.New("VerificationArgs parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.DelegateRecord is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Metadata is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.CollectionMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.CollectionMetadata is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SysvarInstructions is not set")
		}
	}
	return nil
}

func (inst *Unverify) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Unverify")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("VerificationArgs", *inst.VerificationArgs))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         authority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("    delegateRecord", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("          metadata", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("    collectionMint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("collectionMetadata", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("     systemProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("sysvarInstructions", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj Unverify) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `VerificationArgs` param:
	err = encoder.Encode(obj.VerificationArgs)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Unverify) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `VerificationArgs`:
	err = decoder.Decode(&obj.VerificationArgs)
	if err != nil {
		return err
	}
	return nil
}

// NewUnverifyInstruction declares a new Unverify instruction with the provided parameters and accounts.
func NewUnverifyInstruction(
	// Parameters:
	verificationArgs VerificationArgs,
	// Accounts:
	authority ag_solanago.PublicKey,
	delegateRecord ag_solanago.PublicKey,
	metadata ag_solanago.PublicKey,
	collectionMint ag_solanago.PublicKey,
	collectionMetadata ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	sysvarInstructions ag_solanago.PublicKey) *Unverify {
	return NewUnverifyInstructionBuilder().
		SetVerificationArgs(verificationArgs).
		SetAuthorityAccount(authority).
		SetDelegateRecordAccount(delegateRecord).
		SetMetadataAccount(metadata).
		SetCollectionMintAccount(collectionMint).
		SetCollectionMetadataAccount(collectionMetadata).
		SetSystemProgramAccount(systemProgram).
		SetSysvarInstructionsAccount(sysvarInstructions)
}
