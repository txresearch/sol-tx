// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SetTokenStandard is the `SetTokenStandard` instruction.
type SetTokenStandard struct {

	// [0] = [WRITE] metadata
	// ··········· Metadata account
	//
	// [1] = [SIGNER] updateAuthority
	// ··········· Metadata update authority
	//
	// [2] = [] mint
	// ··········· Mint account
	//
	// [3] = [] edition
	// ··········· Edition account
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetTokenStandardInstructionBuilder creates a new `SetTokenStandard` instruction builder.
func NewSetTokenStandardInstructionBuilder() *SetTokenStandard {
	nd := &SetTokenStandard{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetMetadataAccount sets the "metadata" account.
// Metadata account
func (inst *SetTokenStandard) SetMetadataAccount(metadata ag_solanago.PublicKey) *SetTokenStandard {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(metadata).WRITE()
	return inst
}

// GetMetadataAccount gets the "metadata" account.
// Metadata account
func (inst *SetTokenStandard) GetMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetUpdateAuthorityAccount sets the "updateAuthority" account.
// Metadata update authority
func (inst *SetTokenStandard) SetUpdateAuthorityAccount(updateAuthority ag_solanago.PublicKey) *SetTokenStandard {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(updateAuthority).SIGNER()
	return inst
}

// GetUpdateAuthorityAccount gets the "updateAuthority" account.
// Metadata update authority
func (inst *SetTokenStandard) GetUpdateAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMintAccount sets the "mint" account.
// Mint account
func (inst *SetTokenStandard) SetMintAccount(mint ag_solanago.PublicKey) *SetTokenStandard {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
// Mint account
func (inst *SetTokenStandard) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetEditionAccount sets the "edition" account.
// Edition account
func (inst *SetTokenStandard) SetEditionAccount(edition ag_solanago.PublicKey) *SetTokenStandard {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(edition)
	return inst
}

// GetEditionAccount gets the "edition" account.
// Edition account
func (inst *SetTokenStandard) GetEditionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst SetTokenStandard) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetTokenStandard,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetTokenStandard) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetTokenStandard) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Metadata is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.UpdateAuthority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Edition is not set")
		}
	}
	return nil
}

func (inst *SetTokenStandard) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetTokenStandard")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("       metadata", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("updateAuthority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("           mint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("        edition", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj SetTokenStandard) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *SetTokenStandard) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewSetTokenStandardInstruction declares a new SetTokenStandard instruction with the provided parameters and accounts.
func NewSetTokenStandardInstruction(
	// Accounts:
	metadata ag_solanago.PublicKey,
	updateAuthority ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	edition ag_solanago.PublicKey) *SetTokenStandard {
	return NewSetTokenStandardInstructionBuilder().
		SetMetadataAccount(metadata).
		SetUpdateAuthorityAccount(updateAuthority).
		SetMintAccount(mint).
		SetEditionAccount(edition)
}
