// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CloseEscrowAccount is the `CloseEscrowAccount` instruction.
type CloseEscrowAccount struct {

	// [0] = [WRITE] escrow
	// ··········· Escrow account
	//
	// [1] = [WRITE] metadata
	// ··········· Metadata account
	//
	// [2] = [] mint
	// ··········· Mint account
	//
	// [3] = [] tokenAccount
	// ··········· Token account
	//
	// [4] = [] edition
	// ··········· Edition account
	//
	// [5] = [WRITE, SIGNER] payer
	// ··········· Wallet paying for the transaction and new account
	//
	// [6] = [] systemProgram
	// ··········· System program
	//
	// [7] = [] sysvarInstructions
	// ··········· Instructions sysvar account
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCloseEscrowAccountInstructionBuilder creates a new `CloseEscrowAccount` instruction builder.
func NewCloseEscrowAccountInstructionBuilder() *CloseEscrowAccount {
	nd := &CloseEscrowAccount{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetEscrowAccount sets the "escrow" account.
// Escrow account
func (inst *CloseEscrowAccount) SetEscrowAccount(escrow ag_solanago.PublicKey) *CloseEscrowAccount {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(escrow).WRITE()
	return inst
}

// GetEscrowAccount gets the "escrow" account.
// Escrow account
func (inst *CloseEscrowAccount) GetEscrowAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMetadataAccount sets the "metadata" account.
// Metadata account
func (inst *CloseEscrowAccount) SetMetadataAccount(metadata ag_solanago.PublicKey) *CloseEscrowAccount {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(metadata).WRITE()
	return inst
}

// GetMetadataAccount gets the "metadata" account.
// Metadata account
func (inst *CloseEscrowAccount) GetMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMintAccount sets the "mint" account.
// Mint account
func (inst *CloseEscrowAccount) SetMintAccount(mint ag_solanago.PublicKey) *CloseEscrowAccount {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
// Mint account
func (inst *CloseEscrowAccount) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenAccountAccount sets the "tokenAccount" account.
// Token account
func (inst *CloseEscrowAccount) SetTokenAccountAccount(tokenAccount ag_solanago.PublicKey) *CloseEscrowAccount {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenAccount)
	return inst
}

// GetTokenAccountAccount gets the "tokenAccount" account.
// Token account
func (inst *CloseEscrowAccount) GetTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetEditionAccount sets the "edition" account.
// Edition account
func (inst *CloseEscrowAccount) SetEditionAccount(edition ag_solanago.PublicKey) *CloseEscrowAccount {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(edition)
	return inst
}

// GetEditionAccount gets the "edition" account.
// Edition account
func (inst *CloseEscrowAccount) GetEditionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetPayerAccount sets the "payer" account.
// Wallet paying for the transaction and new account
func (inst *CloseEscrowAccount) SetPayerAccount(payer ag_solanago.PublicKey) *CloseEscrowAccount {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
// Wallet paying for the transaction and new account
func (inst *CloseEscrowAccount) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSystemProgramAccount sets the "systemProgram" account.
// System program
func (inst *CloseEscrowAccount) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CloseEscrowAccount {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
// System program
func (inst *CloseEscrowAccount) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSysvarInstructionsAccount sets the "sysvarInstructions" account.
// Instructions sysvar account
func (inst *CloseEscrowAccount) SetSysvarInstructionsAccount(sysvarInstructions ag_solanago.PublicKey) *CloseEscrowAccount {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(sysvarInstructions)
	return inst
}

// GetSysvarInstructionsAccount gets the "sysvarInstructions" account.
// Instructions sysvar account
func (inst *CloseEscrowAccount) GetSysvarInstructionsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst CloseEscrowAccount) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CloseEscrowAccount,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CloseEscrowAccount) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CloseEscrowAccount) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Escrow is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Metadata is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Edition is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SysvarInstructions is not set")
		}
	}
	return nil
}

func (inst *CloseEscrowAccount) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CloseEscrowAccount")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("            escrow", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("          metadata", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("              mint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("             token", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("           edition", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("             payer", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("     systemProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("sysvarInstructions", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj CloseEscrowAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *CloseEscrowAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewCloseEscrowAccountInstruction declares a new CloseEscrowAccount instruction with the provided parameters and accounts.
func NewCloseEscrowAccountInstruction(
	// Accounts:
	escrow ag_solanago.PublicKey,
	metadata ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	tokenAccount ag_solanago.PublicKey,
	edition ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	sysvarInstructions ag_solanago.PublicKey) *CloseEscrowAccount {
	return NewCloseEscrowAccountInstructionBuilder().
		SetEscrowAccount(escrow).
		SetMetadataAccount(metadata).
		SetMintAccount(mint).
		SetTokenAccountAccount(tokenAccount).
		SetEditionAccount(edition).
		SetPayerAccount(payer).
		SetSystemProgramAccount(systemProgram).
		SetSysvarInstructionsAccount(sysvarInstructions)
}
