// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"errors"
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Update is the `Update` instruction.
type Update struct {
	UpdateArgs UpdateArgs

	// [0] = [SIGNER] authority
	// ··········· Update authority or delegate
	//
	// [1] = [] delegateRecord
	// ··········· Delegate record PDA
	//
	// [2] = [] token
	// ··········· Token account
	//
	// [3] = [] mint
	// ··········· Mint account
	//
	// [4] = [WRITE] metadata
	// ··········· Metadata account
	//
	// [5] = [] edition
	// ··········· Edition account
	//
	// [6] = [WRITE, SIGNER] payer
	// ··········· Payer
	//
	// [7] = [] systemProgram
	// ··········· System program
	//
	// [8] = [] sysvarInstructions
	// ··········· Instructions sysvar account
	//
	// [9] = [] authorizationRulesProgram
	// ··········· Token Authorization Rules Program
	//
	// [10] = [] authorizationRules
	// ··········· Token Authorization Rules account
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateInstructionBuilder creates a new `Update` instruction builder.
func NewUpdateInstructionBuilder() *Update {
	nd := &Update{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 11),
	}
	return nd
}

// SetUpdateArgs sets the "updateArgs" parameter.
func (inst *Update) SetUpdateArgs(updateArgs UpdateArgs) *Update {
	inst.UpdateArgs = updateArgs
	return inst
}

// SetAuthorityAccount sets the "authority" account.
// Update authority or delegate
func (inst *Update) SetAuthorityAccount(authority ag_solanago.PublicKey) *Update {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
// Update authority or delegate
func (inst *Update) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetDelegateRecordAccount sets the "delegateRecord" account.
// Delegate record PDA
func (inst *Update) SetDelegateRecordAccount(delegateRecord ag_solanago.PublicKey) *Update {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(delegateRecord)
	return inst
}

// GetDelegateRecordAccount gets the "delegateRecord" account.
// Delegate record PDA
func (inst *Update) GetDelegateRecordAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenAccount sets the "token" account.
// Token account
func (inst *Update) SetTokenAccount(token ag_solanago.PublicKey) *Update {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(token)
	return inst
}

// GetTokenAccount gets the "token" account.
// Token account
func (inst *Update) GetTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMintAccount sets the "mint" account.
// Mint account
func (inst *Update) SetMintAccount(mint ag_solanago.PublicKey) *Update {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
// Mint account
func (inst *Update) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetMetadataAccount sets the "metadata" account.
// Metadata account
func (inst *Update) SetMetadataAccount(metadata ag_solanago.PublicKey) *Update {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(metadata).WRITE()
	return inst
}

// GetMetadataAccount gets the "metadata" account.
// Metadata account
func (inst *Update) GetMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetEditionAccount sets the "edition" account.
// Edition account
func (inst *Update) SetEditionAccount(edition ag_solanago.PublicKey) *Update {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(edition)
	return inst
}

// GetEditionAccount gets the "edition" account.
// Edition account
func (inst *Update) GetEditionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetPayerAccount sets the "payer" account.
// Payer
func (inst *Update) SetPayerAccount(payer ag_solanago.PublicKey) *Update {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
// Payer
func (inst *Update) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSystemProgramAccount sets the "systemProgram" account.
// System program
func (inst *Update) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *Update {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
// System program
func (inst *Update) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSysvarInstructionsAccount sets the "sysvarInstructions" account.
// Instructions sysvar account
func (inst *Update) SetSysvarInstructionsAccount(sysvarInstructions ag_solanago.PublicKey) *Update {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(sysvarInstructions)
	return inst
}

// GetSysvarInstructionsAccount gets the "sysvarInstructions" account.
// Instructions sysvar account
func (inst *Update) GetSysvarInstructionsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetAuthorizationRulesProgramAccount sets the "authorizationRulesProgram" account.
// Token Authorization Rules Program
func (inst *Update) SetAuthorizationRulesProgramAccount(authorizationRulesProgram ag_solanago.PublicKey) *Update {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(authorizationRulesProgram)
	return inst
}

// GetAuthorizationRulesProgramAccount gets the "authorizationRulesProgram" account.
// Token Authorization Rules Program
func (inst *Update) GetAuthorizationRulesProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetAuthorizationRulesAccount sets the "authorizationRules" account.
// Token Authorization Rules account
func (inst *Update) SetAuthorizationRulesAccount(authorizationRules ag_solanago.PublicKey) *Update {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(authorizationRules)
	return inst
}

// GetAuthorizationRulesAccount gets the "authorizationRules" account.
// Token Authorization Rules account
func (inst *Update) GetAuthorizationRulesAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

func (inst Update) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Update,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Update) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Update) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.UpdateArgs == nil {
			return errors.New("UpdateArgs parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.DelegateRecord is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Token is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Metadata is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Edition is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.SysvarInstructions is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.AuthorizationRulesProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.AuthorizationRules is not set")
		}
	}
	return nil
}

func (inst *Update) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Update")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("UpdateArgs", inst.UpdateArgs))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=11]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                authority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("           delegateRecord", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                    token", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                     mint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                 metadata", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                  edition", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                    payer", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("            systemProgram", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("       sysvarInstructions", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("authorizationRulesProgram", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("       authorizationRules", inst.AccountMetaSlice.Get(10)))
					})
				})
		})
}

func (obj Update) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `UpdateArgs` param:
	{
		tmp := updateArgsContainer{}
		switch realvalue := obj.UpdateArgs.(type) {
		case *UpdateArgsV1:
			tmp.Enum = 0
			tmp.V1 = *realvalue
		case *UpdateArgsAsUpdateAuthorityV2:
			tmp.Enum = 1
			tmp.AsUpdateAuthorityV2 = *realvalue
		case *UpdateArgsAsAuthorityItemDelegateV2:
			tmp.Enum = 2
			tmp.AsAuthorityItemDelegateV2 = *realvalue
		case *UpdateArgsAsCollectionDelegateV2:
			tmp.Enum = 3
			tmp.AsCollectionDelegateV2 = *realvalue
		case *UpdateArgsAsDataDelegateV2:
			tmp.Enum = 4
			tmp.AsDataDelegateV2 = *realvalue
		case *UpdateArgsAsProgrammableConfigDelegateV2:
			tmp.Enum = 5
			tmp.AsProgrammableConfigDelegateV2 = *realvalue
		case *UpdateArgsAsDataItemDelegateV2:
			tmp.Enum = 6
			tmp.AsDataItemDelegateV2 = *realvalue
		case *UpdateArgsAsCollectionItemDelegateV2:
			tmp.Enum = 7
			tmp.AsCollectionItemDelegateV2 = *realvalue
		case *UpdateArgsAsProgrammableConfigItemDelegateV2:
			tmp.Enum = 8
			tmp.AsProgrammableConfigItemDelegateV2 = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	return nil
}
func (obj *Update) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `UpdateArgs`:
	{
		tmp := new(updateArgsContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.UpdateArgs = &tmp.V1
		case 1:
			obj.UpdateArgs = &tmp.AsUpdateAuthorityV2
		case 2:
			obj.UpdateArgs = &tmp.AsAuthorityItemDelegateV2
		case 3:
			obj.UpdateArgs = &tmp.AsCollectionDelegateV2
		case 4:
			obj.UpdateArgs = &tmp.AsDataDelegateV2
		case 5:
			obj.UpdateArgs = &tmp.AsProgrammableConfigDelegateV2
		case 6:
			obj.UpdateArgs = &tmp.AsDataItemDelegateV2
		case 7:
			obj.UpdateArgs = &tmp.AsCollectionItemDelegateV2
		case 8:
			obj.UpdateArgs = &tmp.AsProgrammableConfigItemDelegateV2
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	return nil
}

// NewUpdateInstruction declares a new Update instruction with the provided parameters and accounts.
func NewUpdateInstruction(
	// Parameters:
	updateArgs UpdateArgs,
	// Accounts:
	authority ag_solanago.PublicKey,
	delegateRecord ag_solanago.PublicKey,
	token ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	metadata ag_solanago.PublicKey,
	edition ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	sysvarInstructions ag_solanago.PublicKey,
	authorizationRulesProgram ag_solanago.PublicKey,
	authorizationRules ag_solanago.PublicKey) *Update {
	return NewUpdateInstructionBuilder().
		SetUpdateArgs(updateArgs).
		SetAuthorityAccount(authority).
		SetDelegateRecordAccount(delegateRecord).
		SetTokenAccount(token).
		SetMintAccount(mint).
		SetMetadataAccount(metadata).
		SetEditionAccount(edition).
		SetPayerAccount(payer).
		SetSystemProgramAccount(systemProgram).
		SetSysvarInstructionsAccount(sysvarInstructions).
		SetAuthorizationRulesProgramAccount(authorizationRulesProgram).
		SetAuthorizationRulesAccount(authorizationRules)
}
