// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey = ag_solanago.MustPublicKeyFromBase58("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "TokenMetadata"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_CreateMetadataAccount = ag_binary.TypeID([8]byte{75, 73, 45, 178, 212, 194, 127, 113})

	Instruction_UpdateMetadataAccount = ag_binary.TypeID([8]byte{141, 14, 23, 104, 247, 192, 53, 173})

	Instruction_DeprecatedCreateMasterEdition = ag_binary.TypeID([8]byte{155, 127, 165, 159, 236, 92, 79, 21})

	Instruction_DeprecatedMintNewEditionFromMasterEditionViaPrintingToken = ag_binary.TypeID([8]byte{154, 36, 174, 111, 190, 80, 155, 228})

	Instruction_UpdatePrimarySaleHappenedViaToken = ag_binary.TypeID([8]byte{172, 129, 173, 210, 222, 129, 243, 98})

	Instruction_DeprecatedSetReservationList = ag_binary.TypeID([8]byte{68, 28, 66, 19, 59, 203, 190, 142})

	Instruction_DeprecatedCreateReservationList = ag_binary.TypeID([8]byte{171, 227, 161, 158, 1, 176, 105, 72})

	Instruction_SignMetadata = ag_binary.TypeID([8]byte{178, 245, 253, 205, 236, 250, 233, 209})

	Instruction_DeprecatedMintPrintingTokensViaToken = ag_binary.TypeID([8]byte{84, 34, 152, 133, 145, 48, 4, 223})

	Instruction_DeprecatedMintPrintingTokens = ag_binary.TypeID([8]byte{194, 107, 144, 9, 126, 143, 53, 121})

	Instruction_CreateMasterEdition = ag_binary.TypeID([8]byte{179, 210, 96, 96, 57, 25, 79, 69})

	Instruction_MintNewEditionFromMasterEditionViaToken = ag_binary.TypeID([8]byte{252, 218, 191, 168, 126, 69, 125, 118})

	Instruction_ConvertMasterEditionV1ToV2 = ag_binary.TypeID([8]byte{217, 26, 108, 0, 55, 126, 167, 238})

	Instruction_MintNewEditionFromMasterEditionViaVaultProxy = ag_binary.TypeID([8]byte{66, 246, 206, 73, 249, 35, 194, 47})

	Instruction_PuffMetadata = ag_binary.TypeID([8]byte{87, 217, 21, 132, 105, 238, 71, 114})

	Instruction_UpdateMetadataAccountV2 = ag_binary.TypeID([8]byte{202, 132, 152, 229, 216, 217, 137, 212})

	Instruction_CreateMetadataAccountV2 = ag_binary.TypeID([8]byte{24, 73, 41, 237, 44, 142, 194, 254})

	Instruction_CreateMasterEditionV3 = ag_binary.TypeID([8]byte{147, 149, 17, 159, 74, 134, 114, 237})

	Instruction_VerifyCollection = ag_binary.TypeID([8]byte{56, 113, 101, 253, 79, 55, 122, 169})

	Instruction_Utilize = ag_binary.TypeID([8]byte{104, 146, 242, 209, 176, 174, 185, 163})

	Instruction_ApproveUseAuthority = ag_binary.TypeID([8]byte{14, 4, 77, 134, 86, 23, 37, 236})

	Instruction_RevokeUseAuthority = ag_binary.TypeID([8]byte{204, 194, 208, 141, 142, 221, 109, 84})

	Instruction_UnverifyCollection = ag_binary.TypeID([8]byte{250, 251, 42, 106, 41, 137, 186, 168})

	Instruction_ApproveCollectionAuthority = ag_binary.TypeID([8]byte{254, 136, 208, 39, 65, 66, 27, 111})

	Instruction_RevokeCollectionAuthority = ag_binary.TypeID([8]byte{31, 139, 135, 198, 29, 48, 160, 154})

	Instruction_SetAndVerifyCollection = ag_binary.TypeID([8]byte{235, 242, 121, 216, 158, 234, 180, 234})

	Instruction_FreezeDelegatedAccount = ag_binary.TypeID([8]byte{14, 16, 189, 180, 116, 19, 96, 127})

	Instruction_ThawDelegatedAccount = ag_binary.TypeID([8]byte{239, 152, 227, 34, 225, 200, 206, 170})

	Instruction_RemoveCreatorVerification = ag_binary.TypeID([8]byte{41, 194, 140, 217, 90, 160, 139, 6})

	Instruction_BurnNft = ag_binary.TypeID([8]byte{119, 13, 183, 17, 194, 243, 38, 31})

	Instruction_VerifySizedCollectionItem = ag_binary.TypeID([8]byte{86, 111, 223, 68, 17, 99, 180, 147})

	Instruction_UnverifySizedCollectionItem = ag_binary.TypeID([8]byte{161, 187, 194, 156, 158, 154, 144, 221})

	Instruction_SetAndVerifySizedCollectionItem = ag_binary.TypeID([8]byte{184, 105, 169, 35, 3, 88, 238, 67})

	Instruction_CreateMetadataAccountV3 = ag_binary.TypeID([8]byte{43, 12, 175, 14, 252, 45, 188, 155})

	Instruction_SetCollectionSize = ag_binary.TypeID([8]byte{157, 254, 166, 144, 43, 223, 199, 39})

	Instruction_SetTokenStandard = ag_binary.TypeID([8]byte{147, 212, 106, 195, 30, 170, 209, 128})

	Instruction_BubblegumSetCollectionSize = ag_binary.TypeID([8]byte{230, 215, 231, 226, 156, 188, 56, 6})

	Instruction_BurnEditionNft = ag_binary.TypeID([8]byte{221, 105, 196, 64, 164, 27, 93, 197})

	Instruction_CreateEscrowAccount = ag_binary.TypeID([8]byte{146, 147, 225, 47, 51, 64, 112, 1})

	Instruction_CloseEscrowAccount = ag_binary.TypeID([8]byte{209, 42, 208, 179, 140, 78, 18, 43})

	Instruction_TransferOutOfEscrow = ag_binary.TypeID([8]byte{55, 186, 186, 216, 115, 158, 58, 153})

	Instruction_Burn = ag_binary.TypeID([8]byte{116, 110, 29, 56, 107, 219, 42, 93})

	Instruction_Create = ag_binary.TypeID([8]byte{24, 30, 200, 40, 5, 28, 7, 119})

	Instruction_Mint = ag_binary.TypeID([8]byte{51, 57, 225, 47, 182, 146, 137, 166})

	Instruction_Delegate = ag_binary.TypeID([8]byte{90, 147, 75, 178, 85, 88, 4, 137})

	Instruction_Revoke = ag_binary.TypeID([8]byte{170, 23, 31, 34, 133, 173, 93, 242})

	Instruction_Lock = ag_binary.TypeID([8]byte{21, 19, 208, 43, 237, 62, 255, 87})

	Instruction_Unlock = ag_binary.TypeID([8]byte{101, 155, 40, 21, 158, 189, 56, 203})

	Instruction_Migrate = ag_binary.TypeID([8]byte{155, 234, 231, 146, 236, 158, 162, 30})

	Instruction_Transfer = ag_binary.TypeID([8]byte{163, 52, 200, 231, 140, 3, 69, 186})

	Instruction_Update = ag_binary.TypeID([8]byte{219, 200, 88, 176, 158, 63, 253, 127})

	Instruction_Use = ag_binary.TypeID([8]byte{86, 205, 116, 166, 12, 177, 252, 83})

	Instruction_Verify = ag_binary.TypeID([8]byte{133, 161, 141, 48, 120, 198, 88, 150})

	Instruction_Unverify = ag_binary.TypeID([8]byte{55, 1, 25, 88, 115, 67, 20, 24})

	Instruction_Collect = ag_binary.TypeID([8]byte{208, 47, 194, 155, 17, 98, 82, 236})

	Instruction_Print = ag_binary.TypeID([8]byte{195, 207, 47, 76, 90, 172, 115, 105})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_CreateMetadataAccount:
		return "CreateMetadataAccount"
	case Instruction_UpdateMetadataAccount:
		return "UpdateMetadataAccount"
	case Instruction_DeprecatedCreateMasterEdition:
		return "DeprecatedCreateMasterEdition"
	case Instruction_DeprecatedMintNewEditionFromMasterEditionViaPrintingToken:
		return "DeprecatedMintNewEditionFromMasterEditionViaPrintingToken"
	case Instruction_UpdatePrimarySaleHappenedViaToken:
		return "UpdatePrimarySaleHappenedViaToken"
	case Instruction_DeprecatedSetReservationList:
		return "DeprecatedSetReservationList"
	case Instruction_DeprecatedCreateReservationList:
		return "DeprecatedCreateReservationList"
	case Instruction_SignMetadata:
		return "SignMetadata"
	case Instruction_DeprecatedMintPrintingTokensViaToken:
		return "DeprecatedMintPrintingTokensViaToken"
	case Instruction_DeprecatedMintPrintingTokens:
		return "DeprecatedMintPrintingTokens"
	case Instruction_CreateMasterEdition:
		return "CreateMasterEdition"
	case Instruction_MintNewEditionFromMasterEditionViaToken:
		return "MintNewEditionFromMasterEditionViaToken"
	case Instruction_ConvertMasterEditionV1ToV2:
		return "ConvertMasterEditionV1ToV2"
	case Instruction_MintNewEditionFromMasterEditionViaVaultProxy:
		return "MintNewEditionFromMasterEditionViaVaultProxy"
	case Instruction_PuffMetadata:
		return "PuffMetadata"
	case Instruction_UpdateMetadataAccountV2:
		return "UpdateMetadataAccountV2"
	case Instruction_CreateMetadataAccountV2:
		return "CreateMetadataAccountV2"
	case Instruction_CreateMasterEditionV3:
		return "CreateMasterEditionV3"
	case Instruction_VerifyCollection:
		return "VerifyCollection"
	case Instruction_Utilize:
		return "Utilize"
	case Instruction_ApproveUseAuthority:
		return "ApproveUseAuthority"
	case Instruction_RevokeUseAuthority:
		return "RevokeUseAuthority"
	case Instruction_UnverifyCollection:
		return "UnverifyCollection"
	case Instruction_ApproveCollectionAuthority:
		return "ApproveCollectionAuthority"
	case Instruction_RevokeCollectionAuthority:
		return "RevokeCollectionAuthority"
	case Instruction_SetAndVerifyCollection:
		return "SetAndVerifyCollection"
	case Instruction_FreezeDelegatedAccount:
		return "FreezeDelegatedAccount"
	case Instruction_ThawDelegatedAccount:
		return "ThawDelegatedAccount"
	case Instruction_RemoveCreatorVerification:
		return "RemoveCreatorVerification"
	case Instruction_BurnNft:
		return "BurnNft"
	case Instruction_VerifySizedCollectionItem:
		return "VerifySizedCollectionItem"
	case Instruction_UnverifySizedCollectionItem:
		return "UnverifySizedCollectionItem"
	case Instruction_SetAndVerifySizedCollectionItem:
		return "SetAndVerifySizedCollectionItem"
	case Instruction_CreateMetadataAccountV3:
		return "CreateMetadataAccountV3"
	case Instruction_SetCollectionSize:
		return "SetCollectionSize"
	case Instruction_SetTokenStandard:
		return "SetTokenStandard"
	case Instruction_BubblegumSetCollectionSize:
		return "BubblegumSetCollectionSize"
	case Instruction_BurnEditionNft:
		return "BurnEditionNft"
	case Instruction_CreateEscrowAccount:
		return "CreateEscrowAccount"
	case Instruction_CloseEscrowAccount:
		return "CloseEscrowAccount"
	case Instruction_TransferOutOfEscrow:
		return "TransferOutOfEscrow"
	case Instruction_Burn:
		return "Burn"
	case Instruction_Create:
		return "Create"
	case Instruction_Mint:
		return "Mint"
	case Instruction_Delegate:
		return "Delegate"
	case Instruction_Revoke:
		return "Revoke"
	case Instruction_Lock:
		return "Lock"
	case Instruction_Unlock:
		return "Unlock"
	case Instruction_Migrate:
		return "Migrate"
	case Instruction_Transfer:
		return "Transfer"
	case Instruction_Update:
		return "Update"
	case Instruction_Use:
		return "Use"
	case Instruction_Verify:
		return "Verify"
	case Instruction_Unverify:
		return "Unverify"
	case Instruction_Collect:
		return "Collect"
	case Instruction_Print:
		return "Print"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"create_metadata_account", (*CreateMetadataAccount)(nil),
		},
		{
			"update_metadata_account", (*UpdateMetadataAccount)(nil),
		},
		{
			"deprecated_create_master_edition", (*DeprecatedCreateMasterEdition)(nil),
		},
		{
			"deprecated_mint_new_edition_from_master_edition_via_printing_token", (*DeprecatedMintNewEditionFromMasterEditionViaPrintingToken)(nil),
		},
		{
			"update_primary_sale_happened_via_token", (*UpdatePrimarySaleHappenedViaToken)(nil),
		},
		{
			"deprecated_set_reservation_list", (*DeprecatedSetReservationList)(nil),
		},
		{
			"deprecated_create_reservation_list", (*DeprecatedCreateReservationList)(nil),
		},
		{
			"sign_metadata", (*SignMetadata)(nil),
		},
		{
			"deprecated_mint_printing_tokens_via_token", (*DeprecatedMintPrintingTokensViaToken)(nil),
		},
		{
			"deprecated_mint_printing_tokens", (*DeprecatedMintPrintingTokens)(nil),
		},
		{
			"create_master_edition", (*CreateMasterEdition)(nil),
		},
		{
			"mint_new_edition_from_master_edition_via_token", (*MintNewEditionFromMasterEditionViaToken)(nil),
		},
		{
			"convert_master_edition_v1_to_v2", (*ConvertMasterEditionV1ToV2)(nil),
		},
		{
			"mint_new_edition_from_master_edition_via_vault_proxy", (*MintNewEditionFromMasterEditionViaVaultProxy)(nil),
		},
		{
			"puff_metadata", (*PuffMetadata)(nil),
		},
		{
			"update_metadata_account_v2", (*UpdateMetadataAccountV2)(nil),
		},
		{
			"create_metadata_account_v2", (*CreateMetadataAccountV2)(nil),
		},
		{
			"create_master_edition_v3", (*CreateMasterEditionV3)(nil),
		},
		{
			"verify_collection", (*VerifyCollection)(nil),
		},
		{
			"utilize", (*Utilize)(nil),
		},
		{
			"approve_use_authority", (*ApproveUseAuthority)(nil),
		},
		{
			"revoke_use_authority", (*RevokeUseAuthority)(nil),
		},
		{
			"unverify_collection", (*UnverifyCollection)(nil),
		},
		{
			"approve_collection_authority", (*ApproveCollectionAuthority)(nil),
		},
		{
			"revoke_collection_authority", (*RevokeCollectionAuthority)(nil),
		},
		{
			"set_and_verify_collection", (*SetAndVerifyCollection)(nil),
		},
		{
			"freeze_delegated_account", (*FreezeDelegatedAccount)(nil),
		},
		{
			"thaw_delegated_account", (*ThawDelegatedAccount)(nil),
		},
		{
			"remove_creator_verification", (*RemoveCreatorVerification)(nil),
		},
		{
			"burn_nft", (*BurnNft)(nil),
		},
		{
			"verify_sized_collection_item", (*VerifySizedCollectionItem)(nil),
		},
		{
			"unverify_sized_collection_item", (*UnverifySizedCollectionItem)(nil),
		},
		{
			"set_and_verify_sized_collection_item", (*SetAndVerifySizedCollectionItem)(nil),
		},
		{
			"create_metadata_account_v3", (*CreateMetadataAccountV3)(nil),
		},
		{
			"set_collection_size", (*SetCollectionSize)(nil),
		},
		{
			"set_token_standard", (*SetTokenStandard)(nil),
		},
		{
			"bubblegum_set_collection_size", (*BubblegumSetCollectionSize)(nil),
		},
		{
			"burn_edition_nft", (*BurnEditionNft)(nil),
		},
		{
			"create_escrow_account", (*CreateEscrowAccount)(nil),
		},
		{
			"close_escrow_account", (*CloseEscrowAccount)(nil),
		},
		{
			"transfer_out_of_escrow", (*TransferOutOfEscrow)(nil),
		},
		{
			"burn", (*Burn)(nil),
		},
		{
			"create", (*Create)(nil),
		},
		{
			"mint", (*Mint)(nil),
		},
		{
			"delegate", (*Delegate)(nil),
		},
		{
			"revoke", (*Revoke)(nil),
		},
		{
			"lock", (*Lock)(nil),
		},
		{
			"unlock", (*Unlock)(nil),
		},
		{
			"migrate", (*Migrate)(nil),
		},
		{
			"transfer", (*Transfer)(nil),
		},
		{
			"update", (*Update)(nil),
		},
		{
			"use", (*Use)(nil),
		},
		{
			"verify", (*Verify)(nil),
		},
		{
			"unverify", (*Unverify)(nil),
		},
		{
			"collect", (*Collect)(nil),
		},
		{
			"print", (*Print)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
