// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// DeprecatedMintPrintingTokensViaToken is the `DeprecatedMintPrintingTokensViaToken` instruction.
type DeprecatedMintPrintingTokensViaToken struct {

	// [0] = [WRITE] destination
	// ··········· Destination account
	//
	// [1] = [WRITE] token
	// ··········· Token account containing one time authorization token
	//
	// [2] = [WRITE] oneTimePrintingAuthorizationMint
	// ··········· One time authorization mint
	//
	// [3] = [WRITE] printingMint
	// ··········· Printing mint
	//
	// [4] = [SIGNER] burnAuthority
	// ··········· Burn authority
	//
	// [5] = [] metadata
	// ··········· Metadata key (pda of ['metadata', program id, mint id])
	//
	// [6] = [] masterEdition
	// ··········· Master Edition V1 key (pda of ['metadata', program id, mint id, 'edition'])
	//
	// [7] = [] tokenProgram
	// ··········· Token program
	//
	// [8] = [] rent
	// ··········· Rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewDeprecatedMintPrintingTokensViaTokenInstructionBuilder creates a new `DeprecatedMintPrintingTokensViaToken` instruction builder.
func NewDeprecatedMintPrintingTokensViaTokenInstructionBuilder() *DeprecatedMintPrintingTokensViaToken {
	nd := &DeprecatedMintPrintingTokensViaToken{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 9),
	}
	return nd
}

// SetDestinationAccount sets the "destination" account.
// Destination account
func (inst *DeprecatedMintPrintingTokensViaToken) SetDestinationAccount(destination ag_solanago.PublicKey) *DeprecatedMintPrintingTokensViaToken {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(destination).WRITE()
	return inst
}

// GetDestinationAccount gets the "destination" account.
// Destination account
func (inst *DeprecatedMintPrintingTokensViaToken) GetDestinationAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTokenAccount sets the "token" account.
// Token account containing one time authorization token
func (inst *DeprecatedMintPrintingTokensViaToken) SetTokenAccount(token ag_solanago.PublicKey) *DeprecatedMintPrintingTokensViaToken {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(token).WRITE()
	return inst
}

// GetTokenAccount gets the "token" account.
// Token account containing one time authorization token
func (inst *DeprecatedMintPrintingTokensViaToken) GetTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetOneTimePrintingAuthorizationMintAccount sets the "oneTimePrintingAuthorizationMint" account.
// One time authorization mint
func (inst *DeprecatedMintPrintingTokensViaToken) SetOneTimePrintingAuthorizationMintAccount(oneTimePrintingAuthorizationMint ag_solanago.PublicKey) *DeprecatedMintPrintingTokensViaToken {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(oneTimePrintingAuthorizationMint).WRITE()
	return inst
}

// GetOneTimePrintingAuthorizationMintAccount gets the "oneTimePrintingAuthorizationMint" account.
// One time authorization mint
func (inst *DeprecatedMintPrintingTokensViaToken) GetOneTimePrintingAuthorizationMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPrintingMintAccount sets the "printingMint" account.
// Printing mint
func (inst *DeprecatedMintPrintingTokensViaToken) SetPrintingMintAccount(printingMint ag_solanago.PublicKey) *DeprecatedMintPrintingTokensViaToken {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(printingMint).WRITE()
	return inst
}

// GetPrintingMintAccount gets the "printingMint" account.
// Printing mint
func (inst *DeprecatedMintPrintingTokensViaToken) GetPrintingMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetBurnAuthorityAccount sets the "burnAuthority" account.
// Burn authority
func (inst *DeprecatedMintPrintingTokensViaToken) SetBurnAuthorityAccount(burnAuthority ag_solanago.PublicKey) *DeprecatedMintPrintingTokensViaToken {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(burnAuthority).SIGNER()
	return inst
}

// GetBurnAuthorityAccount gets the "burnAuthority" account.
// Burn authority
func (inst *DeprecatedMintPrintingTokensViaToken) GetBurnAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetMetadataAccount sets the "metadata" account.
// Metadata key (pda of ['metadata', program id, mint id])
func (inst *DeprecatedMintPrintingTokensViaToken) SetMetadataAccount(metadata ag_solanago.PublicKey) *DeprecatedMintPrintingTokensViaToken {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(metadata)
	return inst
}

// GetMetadataAccount gets the "metadata" account.
// Metadata key (pda of ['metadata', program id, mint id])
func (inst *DeprecatedMintPrintingTokensViaToken) GetMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetMasterEditionAccount sets the "masterEdition" account.
// Master Edition V1 key (pda of ['metadata', program id, mint id, 'edition'])
func (inst *DeprecatedMintPrintingTokensViaToken) SetMasterEditionAccount(masterEdition ag_solanago.PublicKey) *DeprecatedMintPrintingTokensViaToken {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(masterEdition)
	return inst
}

// GetMasterEditionAccount gets the "masterEdition" account.
// Master Edition V1 key (pda of ['metadata', program id, mint id, 'edition'])
func (inst *DeprecatedMintPrintingTokensViaToken) GetMasterEditionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
// Token program
func (inst *DeprecatedMintPrintingTokensViaToken) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *DeprecatedMintPrintingTokensViaToken {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
// Token program
func (inst *DeprecatedMintPrintingTokensViaToken) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetRentAccount sets the "rent" account.
// Rent
func (inst *DeprecatedMintPrintingTokensViaToken) SetRentAccount(rent ag_solanago.PublicKey) *DeprecatedMintPrintingTokensViaToken {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
// Rent
func (inst *DeprecatedMintPrintingTokensViaToken) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

func (inst DeprecatedMintPrintingTokensViaToken) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_DeprecatedMintPrintingTokensViaToken,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst DeprecatedMintPrintingTokensViaToken) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *DeprecatedMintPrintingTokensViaToken) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Destination is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Token is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.OneTimePrintingAuthorizationMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PrintingMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.BurnAuthority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Metadata is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.MasterEdition is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *DeprecatedMintPrintingTokensViaToken) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("DeprecatedMintPrintingTokensViaToken")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=9]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                     destination", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                           token", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("oneTimePrintingAuthorizationMint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                    printingMint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                   burnAuthority", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                        metadata", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                   masterEdition", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("                    tokenProgram", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                            rent", inst.AccountMetaSlice.Get(8)))
					})
				})
		})
}

func (obj DeprecatedMintPrintingTokensViaToken) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *DeprecatedMintPrintingTokensViaToken) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewDeprecatedMintPrintingTokensViaTokenInstruction declares a new DeprecatedMintPrintingTokensViaToken instruction with the provided parameters and accounts.
func NewDeprecatedMintPrintingTokensViaTokenInstruction(
	// Accounts:
	destination ag_solanago.PublicKey,
	token ag_solanago.PublicKey,
	oneTimePrintingAuthorizationMint ag_solanago.PublicKey,
	printingMint ag_solanago.PublicKey,
	burnAuthority ag_solanago.PublicKey,
	metadata ag_solanago.PublicKey,
	masterEdition ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *DeprecatedMintPrintingTokensViaToken {
	return NewDeprecatedMintPrintingTokensViaTokenInstructionBuilder().
		SetDestinationAccount(destination).
		SetTokenAccount(token).
		SetOneTimePrintingAuthorizationMintAccount(oneTimePrintingAuthorizationMint).
		SetPrintingMintAccount(printingMint).
		SetBurnAuthorityAccount(burnAuthority).
		SetMetadataAccount(metadata).
		SetMasterEditionAccount(masterEdition).
		SetTokenProgramAccount(tokenProgram).
		SetRentAccount(rent)
}
