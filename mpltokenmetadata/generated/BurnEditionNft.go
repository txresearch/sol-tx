// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// BurnEditionNft is the `BurnEditionNft` instruction.
type BurnEditionNft struct {

	// [0] = [WRITE] metadata
	// ··········· Metadata (pda of ['metadata', program id, mint id])
	//
	// [1] = [WRITE, SIGNER] owner
	// ··········· NFT owner
	//
	// [2] = [WRITE] printEditionMint
	// ··········· Mint of the print edition NFT
	//
	// [3] = [] masterEditionMint
	// ··········· Mint of the original/master NFT
	//
	// [4] = [WRITE] printEditionTokenAccount
	// ··········· Token account the print edition NFT is in
	//
	// [5] = [] masterEditionTokenAccount
	// ··········· Token account the Master Edition NFT is in
	//
	// [6] = [WRITE] masterEditionAccount
	// ··········· MasterEdition2 of the original NFT
	//
	// [7] = [WRITE] printEditionAccount
	// ··········· Print Edition account of the NFT
	//
	// [8] = [WRITE] editionMarkerAccount
	// ··········· Edition Marker PDA of the NFT
	//
	// [9] = [] splTokenProgram
	// ··········· SPL Token Program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewBurnEditionNftInstructionBuilder creates a new `BurnEditionNft` instruction builder.
func NewBurnEditionNftInstructionBuilder() *BurnEditionNft {
	nd := &BurnEditionNft{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	return nd
}

// SetMetadataAccount sets the "metadata" account.
// Metadata (pda of ['metadata', program id, mint id])
func (inst *BurnEditionNft) SetMetadataAccount(metadata ag_solanago.PublicKey) *BurnEditionNft {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(metadata).WRITE()
	return inst
}

// GetMetadataAccount gets the "metadata" account.
// Metadata (pda of ['metadata', program id, mint id])
func (inst *BurnEditionNft) GetMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOwnerAccount sets the "owner" account.
// NFT owner
func (inst *BurnEditionNft) SetOwnerAccount(owner ag_solanago.PublicKey) *BurnEditionNft {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(owner).WRITE().SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
// NFT owner
func (inst *BurnEditionNft) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPrintEditionMintAccount sets the "printEditionMint" account.
// Mint of the print edition NFT
func (inst *BurnEditionNft) SetPrintEditionMintAccount(printEditionMint ag_solanago.PublicKey) *BurnEditionNft {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(printEditionMint).WRITE()
	return inst
}

// GetPrintEditionMintAccount gets the "printEditionMint" account.
// Mint of the print edition NFT
func (inst *BurnEditionNft) GetPrintEditionMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMasterEditionMintAccount sets the "masterEditionMint" account.
// Mint of the original/master NFT
func (inst *BurnEditionNft) SetMasterEditionMintAccount(masterEditionMint ag_solanago.PublicKey) *BurnEditionNft {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(masterEditionMint)
	return inst
}

// GetMasterEditionMintAccount gets the "masterEditionMint" account.
// Mint of the original/master NFT
func (inst *BurnEditionNft) GetMasterEditionMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPrintEditionTokenAccountAccount sets the "printEditionTokenAccount" account.
// Token account the print edition NFT is in
func (inst *BurnEditionNft) SetPrintEditionTokenAccountAccount(printEditionTokenAccount ag_solanago.PublicKey) *BurnEditionNft {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(printEditionTokenAccount).WRITE()
	return inst
}

// GetPrintEditionTokenAccountAccount gets the "printEditionTokenAccount" account.
// Token account the print edition NFT is in
func (inst *BurnEditionNft) GetPrintEditionTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetMasterEditionTokenAccountAccount sets the "masterEditionTokenAccount" account.
// Token account the Master Edition NFT is in
func (inst *BurnEditionNft) SetMasterEditionTokenAccountAccount(masterEditionTokenAccount ag_solanago.PublicKey) *BurnEditionNft {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(masterEditionTokenAccount)
	return inst
}

// GetMasterEditionTokenAccountAccount gets the "masterEditionTokenAccount" account.
// Token account the Master Edition NFT is in
func (inst *BurnEditionNft) GetMasterEditionTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetMasterEditionAccountAccount sets the "masterEditionAccount" account.
// MasterEdition2 of the original NFT
func (inst *BurnEditionNft) SetMasterEditionAccountAccount(masterEditionAccount ag_solanago.PublicKey) *BurnEditionNft {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(masterEditionAccount).WRITE()
	return inst
}

// GetMasterEditionAccountAccount gets the "masterEditionAccount" account.
// MasterEdition2 of the original NFT
func (inst *BurnEditionNft) GetMasterEditionAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetPrintEditionAccountAccount sets the "printEditionAccount" account.
// Print Edition account of the NFT
func (inst *BurnEditionNft) SetPrintEditionAccountAccount(printEditionAccount ag_solanago.PublicKey) *BurnEditionNft {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(printEditionAccount).WRITE()
	return inst
}

// GetPrintEditionAccountAccount gets the "printEditionAccount" account.
// Print Edition account of the NFT
func (inst *BurnEditionNft) GetPrintEditionAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetEditionMarkerAccountAccount sets the "editionMarkerAccount" account.
// Edition Marker PDA of the NFT
func (inst *BurnEditionNft) SetEditionMarkerAccountAccount(editionMarkerAccount ag_solanago.PublicKey) *BurnEditionNft {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(editionMarkerAccount).WRITE()
	return inst
}

// GetEditionMarkerAccountAccount gets the "editionMarkerAccount" account.
// Edition Marker PDA of the NFT
func (inst *BurnEditionNft) GetEditionMarkerAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetSplTokenProgramAccount sets the "splTokenProgram" account.
// SPL Token Program
func (inst *BurnEditionNft) SetSplTokenProgramAccount(splTokenProgram ag_solanago.PublicKey) *BurnEditionNft {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(splTokenProgram)
	return inst
}

// GetSplTokenProgramAccount gets the "splTokenProgram" account.
// SPL Token Program
func (inst *BurnEditionNft) GetSplTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst BurnEditionNft) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_BurnEditionNft,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst BurnEditionNft) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *BurnEditionNft) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Metadata is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PrintEditionMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.MasterEditionMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.PrintEditionTokenAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.MasterEditionTokenAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.MasterEditionAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.PrintEditionAccount is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.EditionMarkerAccount is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.SplTokenProgram is not set")
		}
	}
	return nil
}

func (inst *BurnEditionNft) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("BurnEditionNft")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("          metadata", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("             owner", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("  printEditionMint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta(" masterEditionMint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta(" printEditionToken", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("masterEditionToken", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("     masterEdition", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("      printEdition", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("     editionMarker", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("   splTokenProgram", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj BurnEditionNft) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *BurnEditionNft) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewBurnEditionNftInstruction declares a new BurnEditionNft instruction with the provided parameters and accounts.
func NewBurnEditionNftInstruction(
	// Accounts:
	metadata ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	printEditionMint ag_solanago.PublicKey,
	masterEditionMint ag_solanago.PublicKey,
	printEditionTokenAccount ag_solanago.PublicKey,
	masterEditionTokenAccount ag_solanago.PublicKey,
	masterEditionAccount ag_solanago.PublicKey,
	printEditionAccount ag_solanago.PublicKey,
	editionMarkerAccount ag_solanago.PublicKey,
	splTokenProgram ag_solanago.PublicKey) *BurnEditionNft {
	return NewBurnEditionNftInstructionBuilder().
		SetMetadataAccount(metadata).
		SetOwnerAccount(owner).
		SetPrintEditionMintAccount(printEditionMint).
		SetMasterEditionMintAccount(masterEditionMint).
		SetPrintEditionTokenAccountAccount(printEditionTokenAccount).
		SetMasterEditionTokenAccountAccount(masterEditionTokenAccount).
		SetMasterEditionAccountAccount(masterEditionAccount).
		SetPrintEditionAccountAccount(printEditionAccount).
		SetEditionMarkerAccountAccount(editionMarkerAccount).
		SetSplTokenProgramAccount(splTokenProgram)
}
