// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"bytes"
	ag_gofuzz "github.com/gagliardetto/gofuzz"
	ag_require "github.com/stretchr/testify/require"
	"strconv"
	"testing"
)

func TestEncodeDecode_Update(t *testing.T) {
	fu := ag_gofuzz.New().NilChance(0)
	for i := 0; i < 1; i++ {
		t.Run("Update"+strconv.Itoa(i), func(t *testing.T) {
			{
				{
					{
						params := new(Update)
						fu.Fuzz(params)
						params.AccountMetaSlice = nil
						tmp := new(V1)
						fu.Fuzz(tmp)
						params.SetUpdateArgs(tmp)
						buf := new(bytes.Buffer)
						err := encodeT(*params, buf)
						ag_require.NoError(t, err)
						got := new(Update)
						err = decodeT(got, buf.Bytes())
						got.AccountMetaSlice = nil
						ag_require.NoError(t, err)
						ag_require.Equal(t, params, got)
					}
					{
						params := new(Update)
						fu.Fuzz(params)
						params.AccountMetaSlice = nil
						tmp := new(AsUpdateAuthorityV2)
						fu.Fuzz(tmp)
						params.SetUpdateArgs(tmp)
						buf := new(bytes.Buffer)
						err := encodeT(*params, buf)
						ag_require.NoError(t, err)
						got := new(Update)
						err = decodeT(got, buf.Bytes())
						got.AccountMetaSlice = nil
						ag_require.NoError(t, err)
						ag_require.Equal(t, params, got)
					}
					{
						params := new(Update)
						fu.Fuzz(params)
						params.AccountMetaSlice = nil
						tmp := new(AsAuthorityItemDelegateV2)
						fu.Fuzz(tmp)
						params.SetUpdateArgs(tmp)
						buf := new(bytes.Buffer)
						err := encodeT(*params, buf)
						ag_require.NoError(t, err)
						got := new(Update)
						err = decodeT(got, buf.Bytes())
						got.AccountMetaSlice = nil
						ag_require.NoError(t, err)
						ag_require.Equal(t, params, got)
					}
					{
						params := new(Update)
						fu.Fuzz(params)
						params.AccountMetaSlice = nil
						tmp := new(AsCollectionDelegateV2)
						fu.Fuzz(tmp)
						params.SetUpdateArgs(tmp)
						buf := new(bytes.Buffer)
						err := encodeT(*params, buf)
						ag_require.NoError(t, err)
						got := new(Update)
						err = decodeT(got, buf.Bytes())
						got.AccountMetaSlice = nil
						ag_require.NoError(t, err)
						ag_require.Equal(t, params, got)
					}
					{
						params := new(Update)
						fu.Fuzz(params)
						params.AccountMetaSlice = nil
						tmp := new(AsDataDelegateV2)
						fu.Fuzz(tmp)
						params.SetUpdateArgs(tmp)
						buf := new(bytes.Buffer)
						err := encodeT(*params, buf)
						ag_require.NoError(t, err)
						got := new(Update)
						err = decodeT(got, buf.Bytes())
						got.AccountMetaSlice = nil
						ag_require.NoError(t, err)
						ag_require.Equal(t, params, got)
					}
					{
						params := new(Update)
						fu.Fuzz(params)
						params.AccountMetaSlice = nil
						tmp := new(AsProgrammableConfigDelegateV2)
						fu.Fuzz(tmp)
						params.SetUpdateArgs(tmp)
						buf := new(bytes.Buffer)
						err := encodeT(*params, buf)
						ag_require.NoError(t, err)
						got := new(Update)
						err = decodeT(got, buf.Bytes())
						got.AccountMetaSlice = nil
						ag_require.NoError(t, err)
						ag_require.Equal(t, params, got)
					}
					{
						params := new(Update)
						fu.Fuzz(params)
						params.AccountMetaSlice = nil
						tmp := new(AsDataItemDelegateV2)
						fu.Fuzz(tmp)
						params.SetUpdateArgs(tmp)
						buf := new(bytes.Buffer)
						err := encodeT(*params, buf)
						ag_require.NoError(t, err)
						got := new(Update)
						err = decodeT(got, buf.Bytes())
						got.AccountMetaSlice = nil
						ag_require.NoError(t, err)
						ag_require.Equal(t, params, got)
					}
					{
						params := new(Update)
						fu.Fuzz(params)
						params.AccountMetaSlice = nil
						tmp := new(AsCollectionItemDelegateV2)
						fu.Fuzz(tmp)
						params.SetUpdateArgs(tmp)
						buf := new(bytes.Buffer)
						err := encodeT(*params, buf)
						ag_require.NoError(t, err)
						got := new(Update)
						err = decodeT(got, buf.Bytes())
						got.AccountMetaSlice = nil
						ag_require.NoError(t, err)
						ag_require.Equal(t, params, got)
					}
					{
						params := new(Update)
						fu.Fuzz(params)
						params.AccountMetaSlice = nil
						tmp := new(AsProgrammableConfigItemDelegateV2)
						fu.Fuzz(tmp)
						params.SetUpdateArgs(tmp)
						buf := new(bytes.Buffer)
						err := encodeT(*params, buf)
						ag_require.NoError(t, err)
						got := new(Update)
						err = decodeT(got, buf.Bytes())
						got.AccountMetaSlice = nil
						ag_require.NoError(t, err)
						ag_require.Equal(t, params, got)
					}
				}
			}
		})
	}
}
