// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ThawDelegatedAccount is the `ThawDelegatedAccount` instruction.
type ThawDelegatedAccount struct {

	// [0] = [WRITE, SIGNER] delegate
	// ··········· Delegate
	//
	// [1] = [WRITE] tokenAccount
	// ··········· Token account to thaw
	//
	// [2] = [] edition
	// ··········· Edition
	//
	// [3] = [] mint
	// ··········· Token mint
	//
	// [4] = [] tokenProgram
	// ··········· Token Program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewThawDelegatedAccountInstructionBuilder creates a new `ThawDelegatedAccount` instruction builder.
func NewThawDelegatedAccountInstructionBuilder() *ThawDelegatedAccount {
	nd := &ThawDelegatedAccount{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetDelegateAccount sets the "delegate" account.
// Delegate
func (inst *ThawDelegatedAccount) SetDelegateAccount(delegate ag_solanago.PublicKey) *ThawDelegatedAccount {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(delegate).WRITE().SIGNER()
	return inst
}

// GetDelegateAccount gets the "delegate" account.
// Delegate
func (inst *ThawDelegatedAccount) GetDelegateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTokenAccountAccount sets the "tokenAccount" account.
// Token account to thaw
func (inst *ThawDelegatedAccount) SetTokenAccountAccount(tokenAccount ag_solanago.PublicKey) *ThawDelegatedAccount {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(tokenAccount).WRITE()
	return inst
}

// GetTokenAccountAccount gets the "tokenAccount" account.
// Token account to thaw
func (inst *ThawDelegatedAccount) GetTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetEditionAccount sets the "edition" account.
// Edition
func (inst *ThawDelegatedAccount) SetEditionAccount(edition ag_solanago.PublicKey) *ThawDelegatedAccount {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(edition)
	return inst
}

// GetEditionAccount gets the "edition" account.
// Edition
func (inst *ThawDelegatedAccount) GetEditionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMintAccount sets the "mint" account.
// Token mint
func (inst *ThawDelegatedAccount) SetMintAccount(mint ag_solanago.PublicKey) *ThawDelegatedAccount {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
// Token mint
func (inst *ThawDelegatedAccount) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
// Token Program
func (inst *ThawDelegatedAccount) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *ThawDelegatedAccount {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
// Token Program
func (inst *ThawDelegatedAccount) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst ThawDelegatedAccount) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ThawDelegatedAccount,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ThawDelegatedAccount) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ThawDelegatedAccount) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Delegate is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.TokenAccount is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Edition is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *ThawDelegatedAccount) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ThawDelegatedAccount")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("    delegate", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("       token", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     edition", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("        mint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("tokenProgram", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj ThawDelegatedAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *ThawDelegatedAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewThawDelegatedAccountInstruction declares a new ThawDelegatedAccount instruction with the provided parameters and accounts.
func NewThawDelegatedAccountInstruction(
	// Accounts:
	delegate ag_solanago.PublicKey,
	tokenAccount ag_solanago.PublicKey,
	edition ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *ThawDelegatedAccount {
	return NewThawDelegatedAccountInstructionBuilder().
		SetDelegateAccount(delegate).
		SetTokenAccountAccount(tokenAccount).
		SetEditionAccount(edition).
		SetMintAccount(mint).
		SetTokenProgramAccount(tokenProgram)
}
