// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"errors"
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Print is the `Print` instruction.
type Print struct {
	PrintArgs PrintArgs

	// [0] = [WRITE] editionMetadata
	// ··········· New Metadata key (pda of ['metadata', program id, mint id])
	//
	// [1] = [WRITE] edition
	// ··········· New Edition (pda of ['metadata', program id, mint id, 'edition'])
	//
	// [2] = [WRITE] editionMint
	// ··········· Mint of new token - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY
	//
	// [3] = [] editionTokenAccountOwner
	// ··········· Owner of the token account of new token
	//
	// [4] = [WRITE] editionTokenAccount
	// ··········· Token account of new token
	//
	// [5] = [SIGNER] editionMintAuthority
	// ··········· Mint authority of new mint
	//
	// [6] = [WRITE] editionTokenRecord
	// ··········· Token record account
	//
	// [7] = [WRITE] masterEdition
	// ··········· Master Record Edition V2 (pda of ['metadata', program id, master metadata mint id, 'edition'])
	//
	// [8] = [WRITE] editionMarkerPda
	// ··········· Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master metadata mint id, 'edition', edition_number]) where edition_number is NOT the edition number you pass in args but actually edition_number = floor(edition/EDITION_MARKER_BIT_SIZE).
	//
	// [9] = [WRITE, SIGNER] payer
	// ··········· payer
	//
	// [10] = [] masterTokenAccountOwner
	// ··········· owner of token account containing master token
	//
	// [11] = [] masterTokenAccount
	// ··········· token account containing token from master metadata mint
	//
	// [12] = [] masterMetadata
	// ··········· Master record metadata account
	//
	// [13] = [] updateAuthority
	// ··········· The update authority of the master edition.
	//
	// [14] = [] splTokenProgram
	// ··········· Token program
	//
	// [15] = [] splAtaProgram
	// ··········· SPL Associated Token Account program
	//
	// [16] = [] sysvarInstructions
	// ··········· Instructions sysvar account
	//
	// [17] = [] systemProgram
	// ··········· System program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewPrintInstructionBuilder creates a new `Print` instruction builder.
func NewPrintInstructionBuilder() *Print {
	nd := &Print{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 18),
	}
	return nd
}

// SetPrintArgs sets the "printArgs" parameter.
func (inst *Print) SetPrintArgs(printArgs PrintArgs) *Print {
	inst.PrintArgs = printArgs
	return inst
}

// SetEditionMetadataAccount sets the "editionMetadata" account.
// New Metadata key (pda of ['metadata', program id, mint id])
func (inst *Print) SetEditionMetadataAccount(editionMetadata ag_solanago.PublicKey) *Print {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(editionMetadata).WRITE()
	return inst
}

// GetEditionMetadataAccount gets the "editionMetadata" account.
// New Metadata key (pda of ['metadata', program id, mint id])
func (inst *Print) GetEditionMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetEditionAccount sets the "edition" account.
// New Edition (pda of ['metadata', program id, mint id, 'edition'])
func (inst *Print) SetEditionAccount(edition ag_solanago.PublicKey) *Print {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(edition).WRITE()
	return inst
}

// GetEditionAccount gets the "edition" account.
// New Edition (pda of ['metadata', program id, mint id, 'edition'])
func (inst *Print) GetEditionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetEditionMintAccount sets the "editionMint" account.
// Mint of new token - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY
func (inst *Print) SetEditionMintAccount(editionMint ag_solanago.PublicKey) *Print {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(editionMint).WRITE()
	return inst
}

// GetEditionMintAccount gets the "editionMint" account.
// Mint of new token - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY
func (inst *Print) GetEditionMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetEditionTokenAccountOwnerAccount sets the "editionTokenAccountOwner" account.
// Owner of the token account of new token
func (inst *Print) SetEditionTokenAccountOwnerAccount(editionTokenAccountOwner ag_solanago.PublicKey) *Print {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(editionTokenAccountOwner)
	return inst
}

// GetEditionTokenAccountOwnerAccount gets the "editionTokenAccountOwner" account.
// Owner of the token account of new token
func (inst *Print) GetEditionTokenAccountOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetEditionTokenAccountAccount sets the "editionTokenAccount" account.
// Token account of new token
func (inst *Print) SetEditionTokenAccountAccount(editionTokenAccount ag_solanago.PublicKey) *Print {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(editionTokenAccount).WRITE()
	return inst
}

// GetEditionTokenAccountAccount gets the "editionTokenAccount" account.
// Token account of new token
func (inst *Print) GetEditionTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetEditionMintAuthorityAccount sets the "editionMintAuthority" account.
// Mint authority of new mint
func (inst *Print) SetEditionMintAuthorityAccount(editionMintAuthority ag_solanago.PublicKey) *Print {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(editionMintAuthority).SIGNER()
	return inst
}

// GetEditionMintAuthorityAccount gets the "editionMintAuthority" account.
// Mint authority of new mint
func (inst *Print) GetEditionMintAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetEditionTokenRecordAccount sets the "editionTokenRecord" account.
// Token record account
func (inst *Print) SetEditionTokenRecordAccount(editionTokenRecord ag_solanago.PublicKey) *Print {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(editionTokenRecord).WRITE()
	return inst
}

// GetEditionTokenRecordAccount gets the "editionTokenRecord" account.
// Token record account
func (inst *Print) GetEditionTokenRecordAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetMasterEditionAccount sets the "masterEdition" account.
// Master Record Edition V2 (pda of ['metadata', program id, master metadata mint id, 'edition'])
func (inst *Print) SetMasterEditionAccount(masterEdition ag_solanago.PublicKey) *Print {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(masterEdition).WRITE()
	return inst
}

// GetMasterEditionAccount gets the "masterEdition" account.
// Master Record Edition V2 (pda of ['metadata', program id, master metadata mint id, 'edition'])
func (inst *Print) GetMasterEditionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetEditionMarkerPdaAccount sets the "editionMarkerPda" account.
// Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master metadata mint id, 'edition', edition_number]) where edition_number is NOT the edition number you pass in args but actually edition_number = floor(edition/EDITION_MARKER_BIT_SIZE).
func (inst *Print) SetEditionMarkerPdaAccount(editionMarkerPda ag_solanago.PublicKey) *Print {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(editionMarkerPda).WRITE()
	return inst
}

// GetEditionMarkerPdaAccount gets the "editionMarkerPda" account.
// Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master metadata mint id, 'edition', edition_number]) where edition_number is NOT the edition number you pass in args but actually edition_number = floor(edition/EDITION_MARKER_BIT_SIZE).
func (inst *Print) GetEditionMarkerPdaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetPayerAccount sets the "payer" account.
// payer
func (inst *Print) SetPayerAccount(payer ag_solanago.PublicKey) *Print {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
// payer
func (inst *Print) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetMasterTokenAccountOwnerAccount sets the "masterTokenAccountOwner" account.
// owner of token account containing master token
func (inst *Print) SetMasterTokenAccountOwnerAccount(masterTokenAccountOwner ag_solanago.PublicKey) *Print {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(masterTokenAccountOwner)
	return inst
}

// GetMasterTokenAccountOwnerAccount gets the "masterTokenAccountOwner" account.
// owner of token account containing master token
func (inst *Print) GetMasterTokenAccountOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetMasterTokenAccountAccount sets the "masterTokenAccount" account.
// token account containing token from master metadata mint
func (inst *Print) SetMasterTokenAccountAccount(masterTokenAccount ag_solanago.PublicKey) *Print {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(masterTokenAccount)
	return inst
}

// GetMasterTokenAccountAccount gets the "masterTokenAccount" account.
// token account containing token from master metadata mint
func (inst *Print) GetMasterTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetMasterMetadataAccount sets the "masterMetadata" account.
// Master record metadata account
func (inst *Print) SetMasterMetadataAccount(masterMetadata ag_solanago.PublicKey) *Print {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(masterMetadata)
	return inst
}

// GetMasterMetadataAccount gets the "masterMetadata" account.
// Master record metadata account
func (inst *Print) GetMasterMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetUpdateAuthorityAccount sets the "updateAuthority" account.
// The update authority of the master edition.
func (inst *Print) SetUpdateAuthorityAccount(updateAuthority ag_solanago.PublicKey) *Print {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(updateAuthority)
	return inst
}

// GetUpdateAuthorityAccount gets the "updateAuthority" account.
// The update authority of the master edition.
func (inst *Print) GetUpdateAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetSplTokenProgramAccount sets the "splTokenProgram" account.
// Token program
func (inst *Print) SetSplTokenProgramAccount(splTokenProgram ag_solanago.PublicKey) *Print {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(splTokenProgram)
	return inst
}

// GetSplTokenProgramAccount gets the "splTokenProgram" account.
// Token program
func (inst *Print) GetSplTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetSplAtaProgramAccount sets the "splAtaProgram" account.
// SPL Associated Token Account program
func (inst *Print) SetSplAtaProgramAccount(splAtaProgram ag_solanago.PublicKey) *Print {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(splAtaProgram)
	return inst
}

// GetSplAtaProgramAccount gets the "splAtaProgram" account.
// SPL Associated Token Account program
func (inst *Print) GetSplAtaProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetSysvarInstructionsAccount sets the "sysvarInstructions" account.
// Instructions sysvar account
func (inst *Print) SetSysvarInstructionsAccount(sysvarInstructions ag_solanago.PublicKey) *Print {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(sysvarInstructions)
	return inst
}

// GetSysvarInstructionsAccount gets the "sysvarInstructions" account.
// Instructions sysvar account
func (inst *Print) GetSysvarInstructionsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

// SetSystemProgramAccount sets the "systemProgram" account.
// System program
func (inst *Print) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *Print {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
// System program
func (inst *Print) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(17)
}

func (inst Print) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Print,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Print) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Print) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.PrintArgs == nil {
			return errors.New("PrintArgs parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.EditionMetadata is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Edition is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.EditionMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.EditionTokenAccountOwner is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.EditionTokenAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.EditionMintAuthority is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.EditionTokenRecord is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.MasterEdition is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.EditionMarkerPda is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.MasterTokenAccountOwner is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.MasterTokenAccount is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.MasterMetadata is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.UpdateAuthority is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.SplTokenProgram is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.SplAtaProgram is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.SysvarInstructions is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *Print) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Print")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("PrintArgs", inst.PrintArgs))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=18]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         editionMetadata", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                 edition", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("             editionMint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("editionTokenAccountOwner", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("            editionToken", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("    editionMintAuthority", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("      editionTokenRecord", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("           masterEdition", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("        editionMarkerPda", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("                   payer", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta(" masterTokenAccountOwner", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("             masterToken", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("          masterMetadata", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("         updateAuthority", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("         splTokenProgram", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("           splAtaProgram", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("      sysvarInstructions", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("           systemProgram", inst.AccountMetaSlice.Get(17)))
					})
				})
		})
}

func (obj Print) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PrintArgs` param:
	{
		tmp := printArgsContainer{}
		switch realvalue := obj.PrintArgs.(type) {
		case *PrintArgsV1:
			tmp.Enum = 0
			tmp.V1 = *realvalue
		case *PrintArgsV2:
			tmp.Enum = 1
			tmp.V2 = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	return nil
}
func (obj *Print) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PrintArgs`:
	{
		tmp := new(printArgsContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.PrintArgs = &tmp.V1
		case 1:
			obj.PrintArgs = &tmp.V2
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	return nil
}

// NewPrintInstruction declares a new Print instruction with the provided parameters and accounts.
func NewPrintInstruction(
	// Parameters:
	printArgs PrintArgs,
	// Accounts:
	editionMetadata ag_solanago.PublicKey,
	edition ag_solanago.PublicKey,
	editionMint ag_solanago.PublicKey,
	editionTokenAccountOwner ag_solanago.PublicKey,
	editionTokenAccount ag_solanago.PublicKey,
	editionMintAuthority ag_solanago.PublicKey,
	editionTokenRecord ag_solanago.PublicKey,
	masterEdition ag_solanago.PublicKey,
	editionMarkerPda ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	masterTokenAccountOwner ag_solanago.PublicKey,
	masterTokenAccount ag_solanago.PublicKey,
	masterMetadata ag_solanago.PublicKey,
	updateAuthority ag_solanago.PublicKey,
	splTokenProgram ag_solanago.PublicKey,
	splAtaProgram ag_solanago.PublicKey,
	sysvarInstructions ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *Print {
	return NewPrintInstructionBuilder().
		SetPrintArgs(printArgs).
		SetEditionMetadataAccount(editionMetadata).
		SetEditionAccount(edition).
		SetEditionMintAccount(editionMint).
		SetEditionTokenAccountOwnerAccount(editionTokenAccountOwner).
		SetEditionTokenAccountAccount(editionTokenAccount).
		SetEditionMintAuthorityAccount(editionMintAuthority).
		SetEditionTokenRecordAccount(editionTokenRecord).
		SetMasterEditionAccount(masterEdition).
		SetEditionMarkerPdaAccount(editionMarkerPda).
		SetPayerAccount(payer).
		SetMasterTokenAccountOwnerAccount(masterTokenAccountOwner).
		SetMasterTokenAccountAccount(masterTokenAccount).
		SetMasterMetadataAccount(masterMetadata).
		SetUpdateAuthorityAccount(updateAuthority).
		SetSplTokenProgramAccount(splTokenProgram).
		SetSplAtaProgramAccount(splAtaProgram).
		SetSysvarInstructionsAccount(sysvarInstructions).
		SetSystemProgramAccount(systemProgram)
}
