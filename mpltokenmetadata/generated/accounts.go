// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type CollectionAuthorityRecord struct {
	Key             Key
	Bump            uint8
	UpdateAuthority *ag_solanago.PublicKey `bin:"optional"`
}

var CollectionAuthorityRecordDiscriminator = [8]byte{156, 48, 108, 31, 212, 219, 100, 168}

func (obj CollectionAuthorityRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(CollectionAuthorityRecordDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Key` param:
	err = encoder.Encode(obj.Key)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `UpdateAuthority` param (optional):
	{
		if obj.UpdateAuthority == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.UpdateAuthority)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *CollectionAuthorityRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(CollectionAuthorityRecordDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[156 48 108 31 212 219 100 168]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Key`:
	err = decoder.Decode(&obj.Key)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `UpdateAuthority` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.UpdateAuthority)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type MetadataDelegateRecord struct {
	Key             Key
	Bump            uint8
	Mint            ag_solanago.PublicKey
	Delegate        ag_solanago.PublicKey
	UpdateAuthority ag_solanago.PublicKey
}

var MetadataDelegateRecordDiscriminator = [8]byte{185, 148, 37, 107, 119, 106, 243, 236}

func (obj MetadataDelegateRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(MetadataDelegateRecordDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Key` param:
	err = encoder.Encode(obj.Key)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `Delegate` param:
	err = encoder.Encode(obj.Delegate)
	if err != nil {
		return err
	}
	// Serialize `UpdateAuthority` param:
	err = encoder.Encode(obj.UpdateAuthority)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MetadataDelegateRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(MetadataDelegateRecordDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[185 148 37 107 119 106 243 236]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Key`:
	err = decoder.Decode(&obj.Key)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `Delegate`:
	err = decoder.Decode(&obj.Delegate)
	if err != nil {
		return err
	}
	// Deserialize `UpdateAuthority`:
	err = decoder.Decode(&obj.UpdateAuthority)
	if err != nil {
		return err
	}
	return nil
}

type HolderDelegateRecord struct {
	Key             Key
	Bump            uint8
	Mint            ag_solanago.PublicKey
	Delegate        ag_solanago.PublicKey
	UpdateAuthority ag_solanago.PublicKey
}

var HolderDelegateRecordDiscriminator = [8]byte{100, 232, 67, 160, 239, 252, 6, 55}

func (obj HolderDelegateRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(HolderDelegateRecordDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Key` param:
	err = encoder.Encode(obj.Key)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `Delegate` param:
	err = encoder.Encode(obj.Delegate)
	if err != nil {
		return err
	}
	// Serialize `UpdateAuthority` param:
	err = encoder.Encode(obj.UpdateAuthority)
	if err != nil {
		return err
	}
	return nil
}

func (obj *HolderDelegateRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(HolderDelegateRecordDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[100 232 67 160 239 252 6 55]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Key`:
	err = decoder.Decode(&obj.Key)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `Delegate`:
	err = decoder.Decode(&obj.Delegate)
	if err != nil {
		return err
	}
	// Deserialize `UpdateAuthority`:
	err = decoder.Decode(&obj.UpdateAuthority)
	if err != nil {
		return err
	}
	return nil
}

type Edition struct {
	Key     Key
	Parent  ag_solanago.PublicKey
	Edition uint64
}

var EditionDiscriminator = [8]byte{234, 117, 249, 74, 7, 99, 235, 167}

func (obj Edition) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EditionDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Key` param:
	err = encoder.Encode(obj.Key)
	if err != nil {
		return err
	}
	// Serialize `Parent` param:
	err = encoder.Encode(obj.Parent)
	if err != nil {
		return err
	}
	// Serialize `Edition` param:
	err = encoder.Encode(obj.Edition)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Edition) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EditionDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[234 117 249 74 7 99 235 167]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Key`:
	err = decoder.Decode(&obj.Key)
	if err != nil {
		return err
	}
	// Deserialize `Parent`:
	err = decoder.Decode(&obj.Parent)
	if err != nil {
		return err
	}
	// Deserialize `Edition`:
	err = decoder.Decode(&obj.Edition)
	if err != nil {
		return err
	}
	return nil
}

type EditionMarker struct {
	Key    Key
	Ledger [31]uint8
}

var EditionMarkerDiscriminator = [8]byte{233, 10, 18, 230, 129, 172, 37, 234}

func (obj EditionMarker) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EditionMarkerDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Key` param:
	err = encoder.Encode(obj.Key)
	if err != nil {
		return err
	}
	// Serialize `Ledger` param:
	err = encoder.Encode(obj.Ledger)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EditionMarker) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EditionMarkerDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[233 10 18 230 129 172 37 234]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Key`:
	err = decoder.Decode(&obj.Key)
	if err != nil {
		return err
	}
	// Deserialize `Ledger`:
	err = decoder.Decode(&obj.Ledger)
	if err != nil {
		return err
	}
	return nil
}

type EditionMarkerV2 struct {
	Key    Key
	Ledger []byte
}

var EditionMarkerV2Discriminator = [8]byte{131, 123, 60, 251, 45, 2, 84, 110}

func (obj EditionMarkerV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EditionMarkerV2Discriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Key` param:
	err = encoder.Encode(obj.Key)
	if err != nil {
		return err
	}
	// Serialize `Ledger` param:
	err = encoder.Encode(obj.Ledger)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EditionMarkerV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EditionMarkerV2Discriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[131 123 60 251 45 2 84 110]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Key`:
	err = decoder.Decode(&obj.Key)
	if err != nil {
		return err
	}
	// Deserialize `Ledger`:
	err = decoder.Decode(&obj.Ledger)
	if err != nil {
		return err
	}
	return nil
}

type TokenOwnedEscrow struct {
	Key       Key
	BaseToken ag_solanago.PublicKey
	Authority EscrowAuthority
	Bump      uint8
}

var TokenOwnedEscrowDiscriminator = [8]byte{21, 137, 116, 91, 123, 98, 126, 228}

func (obj TokenOwnedEscrow) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(TokenOwnedEscrowDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Key` param:
	err = encoder.Encode(obj.Key)
	if err != nil {
		return err
	}
	// Serialize `BaseToken` param:
	err = encoder.Encode(obj.BaseToken)
	if err != nil {
		return err
	}
	// Serialize `Authority` param:
	{
		tmp := escrowAuthorityContainer{}
		switch realvalue := obj.Authority.(type) {
		case *EscrowAuthorityTokenOwner:
			tmp.Enum = 0
			tmp.TokenOwner = *realvalue
		case *EscrowAuthorityCreator:
			tmp.Enum = 1
			tmp.Creator = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenOwnedEscrow) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(TokenOwnedEscrowDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[21 137 116 91 123 98 126 228]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Key`:
	err = decoder.Decode(&obj.Key)
	if err != nil {
		return err
	}
	// Deserialize `BaseToken`:
	err = decoder.Decode(&obj.BaseToken)
	if err != nil {
		return err
	}
	// Deserialize `Authority`:
	{
		tmp := new(escrowAuthorityContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.Authority = (*EscrowAuthorityTokenOwner)(&tmp.Enum)
		case 1:
			obj.Authority = &tmp.Creator
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	return nil
}

type MasterEditionV2 struct {
	Key       Key
	Supply    uint64
	MaxSupply *uint64 `bin:"optional"`
}

var MasterEditionV2Discriminator = [8]byte{101, 59, 163, 207, 238, 16, 170, 159}

func (obj MasterEditionV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(MasterEditionV2Discriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Key` param:
	err = encoder.Encode(obj.Key)
	if err != nil {
		return err
	}
	// Serialize `Supply` param:
	err = encoder.Encode(obj.Supply)
	if err != nil {
		return err
	}
	// Serialize `MaxSupply` param (optional):
	{
		if obj.MaxSupply == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MaxSupply)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *MasterEditionV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(MasterEditionV2Discriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[101 59 163 207 238 16 170 159]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Key`:
	err = decoder.Decode(&obj.Key)
	if err != nil {
		return err
	}
	// Deserialize `Supply`:
	err = decoder.Decode(&obj.Supply)
	if err != nil {
		return err
	}
	// Deserialize `MaxSupply` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MaxSupply)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type MasterEditionV1 struct {
	Key                              Key
	Supply                           uint64
	MaxSupply                        *uint64 `bin:"optional"`
	PrintingMint                     ag_solanago.PublicKey
	OneTimePrintingAuthorizationMint ag_solanago.PublicKey
}

var MasterEditionV1Discriminator = [8]byte{79, 165, 41, 167, 180, 191, 141, 185}

func (obj MasterEditionV1) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(MasterEditionV1Discriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Key` param:
	err = encoder.Encode(obj.Key)
	if err != nil {
		return err
	}
	// Serialize `Supply` param:
	err = encoder.Encode(obj.Supply)
	if err != nil {
		return err
	}
	// Serialize `MaxSupply` param (optional):
	{
		if obj.MaxSupply == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MaxSupply)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `PrintingMint` param:
	err = encoder.Encode(obj.PrintingMint)
	if err != nil {
		return err
	}
	// Serialize `OneTimePrintingAuthorizationMint` param:
	err = encoder.Encode(obj.OneTimePrintingAuthorizationMint)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MasterEditionV1) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(MasterEditionV1Discriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[79 165 41 167 180 191 141 185]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Key`:
	err = decoder.Decode(&obj.Key)
	if err != nil {
		return err
	}
	// Deserialize `Supply`:
	err = decoder.Decode(&obj.Supply)
	if err != nil {
		return err
	}
	// Deserialize `MaxSupply` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MaxSupply)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `PrintingMint`:
	err = decoder.Decode(&obj.PrintingMint)
	if err != nil {
		return err
	}
	// Deserialize `OneTimePrintingAuthorizationMint`:
	err = decoder.Decode(&obj.OneTimePrintingAuthorizationMint)
	if err != nil {
		return err
	}
	return nil
}

type Metadata struct {
	Key                 Key
	UpdateAuthority     ag_solanago.PublicKey
	Mint                ag_solanago.PublicKey
	Data                Data
	PrimarySaleHappened bool
	IsMutable           bool
	EditionNonce        *uint8              `bin:"optional"`
	TokenStandard       *TokenStandard      `bin:"optional"`
	Collection          *Collection         `bin:"optional"`
	Uses                *Uses               `bin:"optional"`
	CollectionDetails   *CollectionDetails  `bin:"optional"`
	ProgrammableConfig  *ProgrammableConfig `bin:"optional"`
}

var MetadataDiscriminator = [8]byte{72, 11, 121, 26, 111, 181, 85, 93}

func (obj Metadata) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(MetadataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Key` param:
	err = encoder.Encode(obj.Key)
	if err != nil {
		return err
	}
	// Serialize `UpdateAuthority` param:
	err = encoder.Encode(obj.UpdateAuthority)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	// Serialize `PrimarySaleHappened` param:
	err = encoder.Encode(obj.PrimarySaleHappened)
	if err != nil {
		return err
	}
	// Serialize `IsMutable` param:
	err = encoder.Encode(obj.IsMutable)
	if err != nil {
		return err
	}
	// Serialize `EditionNonce` param (optional):
	{
		if obj.EditionNonce == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.EditionNonce)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `TokenStandard` param (optional):
	{
		if obj.TokenStandard == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.TokenStandard)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Collection` param (optional):
	{
		if obj.Collection == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Collection)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Uses` param (optional):
	{
		if obj.Uses == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Uses)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `CollectionDetails` param (optional):
	{
		if obj.CollectionDetails == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.CollectionDetails)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `ProgrammableConfig` param (optional):
	{
		if obj.ProgrammableConfig == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.ProgrammableConfig)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *Metadata) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(MetadataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[72 11 121 26 111 181 85 93]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Key`:
	err = decoder.Decode(&obj.Key)
	if err != nil {
		return err
	}
	// Deserialize `UpdateAuthority`:
	err = decoder.Decode(&obj.UpdateAuthority)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	// Deserialize `PrimarySaleHappened`:
	err = decoder.Decode(&obj.PrimarySaleHappened)
	if err != nil {
		return err
	}
	// Deserialize `IsMutable`:
	err = decoder.Decode(&obj.IsMutable)
	if err != nil {
		return err
	}
	// Deserialize `EditionNonce` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.EditionNonce)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `TokenStandard` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.TokenStandard)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Collection` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Collection)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Uses` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Uses)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `CollectionDetails` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.CollectionDetails)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `ProgrammableConfig` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.ProgrammableConfig)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type TokenRecord struct {
	Key             Key
	Bump            uint8
	State           TokenState
	RuleSetRevision *uint64                `bin:"optional"`
	Delegate        *ag_solanago.PublicKey `bin:"optional"`
	DelegateRole    *TokenDelegateRole     `bin:"optional"`
	LockedTransfer  *ag_solanago.PublicKey `bin:"optional"`
}

var TokenRecordDiscriminator = [8]byte{27, 187, 32, 100, 137, 253, 104, 242}

func (obj TokenRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(TokenRecordDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Key` param:
	err = encoder.Encode(obj.Key)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `State` param:
	err = encoder.Encode(obj.State)
	if err != nil {
		return err
	}
	// Serialize `RuleSetRevision` param (optional):
	{
		if obj.RuleSetRevision == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.RuleSetRevision)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Delegate` param (optional):
	{
		if obj.Delegate == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Delegate)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `DelegateRole` param (optional):
	{
		if obj.DelegateRole == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.DelegateRole)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `LockedTransfer` param (optional):
	{
		if obj.LockedTransfer == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.LockedTransfer)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *TokenRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(TokenRecordDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[27 187 32 100 137 253 104 242]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Key`:
	err = decoder.Decode(&obj.Key)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `State`:
	err = decoder.Decode(&obj.State)
	if err != nil {
		return err
	}
	// Deserialize `RuleSetRevision` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.RuleSetRevision)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Delegate` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Delegate)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `DelegateRole` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.DelegateRole)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `LockedTransfer` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.LockedTransfer)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type ReservationListV2 struct {
	Key                     Key
	MasterEdition           ag_solanago.PublicKey
	SupplySnapshot          *uint64 `bin:"optional"`
	Reservations            []Reservation
	TotalReservationSpots   uint64
	CurrentReservationSpots uint64
}

var ReservationListV2Discriminator = [8]byte{193, 233, 97, 55, 245, 135, 103, 218}

func (obj ReservationListV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(ReservationListV2Discriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Key` param:
	err = encoder.Encode(obj.Key)
	if err != nil {
		return err
	}
	// Serialize `MasterEdition` param:
	err = encoder.Encode(obj.MasterEdition)
	if err != nil {
		return err
	}
	// Serialize `SupplySnapshot` param (optional):
	{
		if obj.SupplySnapshot == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.SupplySnapshot)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Reservations` param:
	err = encoder.Encode(obj.Reservations)
	if err != nil {
		return err
	}
	// Serialize `TotalReservationSpots` param:
	err = encoder.Encode(obj.TotalReservationSpots)
	if err != nil {
		return err
	}
	// Serialize `CurrentReservationSpots` param:
	err = encoder.Encode(obj.CurrentReservationSpots)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ReservationListV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(ReservationListV2Discriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[193 233 97 55 245 135 103 218]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Key`:
	err = decoder.Decode(&obj.Key)
	if err != nil {
		return err
	}
	// Deserialize `MasterEdition`:
	err = decoder.Decode(&obj.MasterEdition)
	if err != nil {
		return err
	}
	// Deserialize `SupplySnapshot` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.SupplySnapshot)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Reservations`:
	err = decoder.Decode(&obj.Reservations)
	if err != nil {
		return err
	}
	// Deserialize `TotalReservationSpots`:
	err = decoder.Decode(&obj.TotalReservationSpots)
	if err != nil {
		return err
	}
	// Deserialize `CurrentReservationSpots`:
	err = decoder.Decode(&obj.CurrentReservationSpots)
	if err != nil {
		return err
	}
	return nil
}

type ReservationListV1 struct {
	Key            Key
	MasterEdition  ag_solanago.PublicKey
	SupplySnapshot *uint64 `bin:"optional"`
	Reservations   []ReservationV1
}

var ReservationListV1Discriminator = [8]byte{239, 79, 12, 206, 116, 153, 1, 140}

func (obj ReservationListV1) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(ReservationListV1Discriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Key` param:
	err = encoder.Encode(obj.Key)
	if err != nil {
		return err
	}
	// Serialize `MasterEdition` param:
	err = encoder.Encode(obj.MasterEdition)
	if err != nil {
		return err
	}
	// Serialize `SupplySnapshot` param (optional):
	{
		if obj.SupplySnapshot == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.SupplySnapshot)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Reservations` param:
	err = encoder.Encode(obj.Reservations)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ReservationListV1) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(ReservationListV1Discriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[239 79 12 206 116 153 1 140]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Key`:
	err = decoder.Decode(&obj.Key)
	if err != nil {
		return err
	}
	// Deserialize `MasterEdition`:
	err = decoder.Decode(&obj.MasterEdition)
	if err != nil {
		return err
	}
	// Deserialize `SupplySnapshot` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.SupplySnapshot)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Reservations`:
	err = decoder.Decode(&obj.Reservations)
	if err != nil {
		return err
	}
	return nil
}

type UseAuthorityRecord struct {
	Key         Key
	AllowedUses uint64
	Bump        uint8
}

var UseAuthorityRecordDiscriminator = [8]byte{227, 200, 230, 197, 244, 198, 172, 50}

func (obj UseAuthorityRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(UseAuthorityRecordDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Key` param:
	err = encoder.Encode(obj.Key)
	if err != nil {
		return err
	}
	// Serialize `AllowedUses` param:
	err = encoder.Encode(obj.AllowedUses)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UseAuthorityRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(UseAuthorityRecordDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[227 200 230 197 244 198 172 50]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Key`:
	err = decoder.Decode(&obj.Key)
	if err != nil {
		return err
	}
	// Deserialize `AllowedUses`:
	err = decoder.Decode(&obj.AllowedUses)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	return nil
}
