// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"errors"
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Mint is the `Mint` instruction.
type Mint struct {
	MintArgs MintArgs

	// [0] = [WRITE] token
	// ··········· Token or Associated Token account
	//
	// [1] = [] tokenOwner
	// ··········· Owner of the token account
	//
	// [2] = [] metadata
	// ··········· Metadata account (pda of ['metadata', program id, mint id])
	//
	// [3] = [WRITE] masterEdition
	// ··········· Master Edition account
	//
	// [4] = [WRITE] tokenRecord
	// ··········· Token record account
	//
	// [5] = [WRITE] mint
	// ··········· Mint of token asset
	//
	// [6] = [SIGNER] authority
	// ··········· (Mint or Update) authority
	//
	// [7] = [] delegateRecord
	// ··········· Metadata delegate record
	//
	// [8] = [WRITE, SIGNER] payer
	// ··········· Payer
	//
	// [9] = [] systemProgram
	// ··········· System program
	//
	// [10] = [] sysvarInstructions
	// ··········· Instructions sysvar account
	//
	// [11] = [] splTokenProgram
	// ··········· SPL Token program
	//
	// [12] = [] splAtaProgram
	// ··········· SPL Associated Token Account program
	//
	// [13] = [] authorizationRulesProgram
	// ··········· Token Authorization Rules program
	//
	// [14] = [] authorizationRules
	// ··········· Token Authorization Rules account
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMintInstructionBuilder creates a new `Mint` instruction builder.
func NewMintInstructionBuilder() *Mint {
	nd := &Mint{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 15),
	}
	return nd
}

// SetMintArgs sets the "mintArgs" parameter.
func (inst *Mint) SetMintArgs(mintArgs MintArgs) *Mint {
	inst.MintArgs = mintArgs
	return inst
}

// SetTokenAccount sets the "token" account.
// Token or Associated Token account
func (inst *Mint) SetTokenAccount(token ag_solanago.PublicKey) *Mint {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(token).WRITE()
	return inst
}

// GetTokenAccount gets the "token" account.
// Token or Associated Token account
func (inst *Mint) GetTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTokenOwnerAccount sets the "tokenOwner" account.
// Owner of the token account
func (inst *Mint) SetTokenOwnerAccount(tokenOwner ag_solanago.PublicKey) *Mint {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(tokenOwner)
	return inst
}

// GetTokenOwnerAccount gets the "tokenOwner" account.
// Owner of the token account
func (inst *Mint) GetTokenOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMetadataAccount sets the "metadata" account.
// Metadata account (pda of ['metadata', program id, mint id])
func (inst *Mint) SetMetadataAccount(metadata ag_solanago.PublicKey) *Mint {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(metadata)
	return inst
}

// GetMetadataAccount gets the "metadata" account.
// Metadata account (pda of ['metadata', program id, mint id])
func (inst *Mint) GetMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMasterEditionAccount sets the "masterEdition" account.
// Master Edition account
func (inst *Mint) SetMasterEditionAccount(masterEdition ag_solanago.PublicKey) *Mint {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(masterEdition).WRITE()
	return inst
}

// GetMasterEditionAccount gets the "masterEdition" account.
// Master Edition account
func (inst *Mint) GetMasterEditionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenRecordAccount sets the "tokenRecord" account.
// Token record account
func (inst *Mint) SetTokenRecordAccount(tokenRecord ag_solanago.PublicKey) *Mint {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenRecord).WRITE()
	return inst
}

// GetTokenRecordAccount gets the "tokenRecord" account.
// Token record account
func (inst *Mint) GetTokenRecordAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetMintAccount sets the "mint" account.
// Mint of token asset
func (inst *Mint) SetMintAccount(mint ag_solanago.PublicKey) *Mint {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(mint).WRITE()
	return inst
}

// GetMintAccount gets the "mint" account.
// Mint of token asset
func (inst *Mint) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetAuthorityAccount sets the "authority" account.
// (Mint or Update) authority
func (inst *Mint) SetAuthorityAccount(authority ag_solanago.PublicKey) *Mint {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
// (Mint or Update) authority
func (inst *Mint) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetDelegateRecordAccount sets the "delegateRecord" account.
// Metadata delegate record
func (inst *Mint) SetDelegateRecordAccount(delegateRecord ag_solanago.PublicKey) *Mint {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(delegateRecord)
	return inst
}

// GetDelegateRecordAccount gets the "delegateRecord" account.
// Metadata delegate record
func (inst *Mint) GetDelegateRecordAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetPayerAccount sets the "payer" account.
// Payer
func (inst *Mint) SetPayerAccount(payer ag_solanago.PublicKey) *Mint {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
// Payer
func (inst *Mint) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetSystemProgramAccount sets the "systemProgram" account.
// System program
func (inst *Mint) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *Mint {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
// System program
func (inst *Mint) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetSysvarInstructionsAccount sets the "sysvarInstructions" account.
// Instructions sysvar account
func (inst *Mint) SetSysvarInstructionsAccount(sysvarInstructions ag_solanago.PublicKey) *Mint {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(sysvarInstructions)
	return inst
}

// GetSysvarInstructionsAccount gets the "sysvarInstructions" account.
// Instructions sysvar account
func (inst *Mint) GetSysvarInstructionsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetSplTokenProgramAccount sets the "splTokenProgram" account.
// SPL Token program
func (inst *Mint) SetSplTokenProgramAccount(splTokenProgram ag_solanago.PublicKey) *Mint {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(splTokenProgram)
	return inst
}

// GetSplTokenProgramAccount gets the "splTokenProgram" account.
// SPL Token program
func (inst *Mint) GetSplTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetSplAtaProgramAccount sets the "splAtaProgram" account.
// SPL Associated Token Account program
func (inst *Mint) SetSplAtaProgramAccount(splAtaProgram ag_solanago.PublicKey) *Mint {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(splAtaProgram)
	return inst
}

// GetSplAtaProgramAccount gets the "splAtaProgram" account.
// SPL Associated Token Account program
func (inst *Mint) GetSplAtaProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetAuthorizationRulesProgramAccount sets the "authorizationRulesProgram" account.
// Token Authorization Rules program
func (inst *Mint) SetAuthorizationRulesProgramAccount(authorizationRulesProgram ag_solanago.PublicKey) *Mint {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(authorizationRulesProgram)
	return inst
}

// GetAuthorizationRulesProgramAccount gets the "authorizationRulesProgram" account.
// Token Authorization Rules program
func (inst *Mint) GetAuthorizationRulesProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetAuthorizationRulesAccount sets the "authorizationRules" account.
// Token Authorization Rules account
func (inst *Mint) SetAuthorizationRulesAccount(authorizationRules ag_solanago.PublicKey) *Mint {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(authorizationRules)
	return inst
}

// GetAuthorizationRulesAccount gets the "authorizationRules" account.
// Token Authorization Rules account
func (inst *Mint) GetAuthorizationRulesAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

func (inst Mint) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Mint,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Mint) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Mint) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.MintArgs == nil {
			return errors.New("MintArgs parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Token is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.TokenOwner is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Metadata is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.MasterEdition is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenRecord is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.DelegateRecord is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.SysvarInstructions is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.SplTokenProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.SplAtaProgram is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.AuthorizationRulesProgram is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.AuthorizationRules is not set")
		}
	}
	return nil
}

func (inst *Mint) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Mint")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("MintArgs", inst.MintArgs))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=15]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                    token", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("               tokenOwner", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                 metadata", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("            masterEdition", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("              tokenRecord", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                     mint", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                authority", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("           delegateRecord", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                    payer", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("            systemProgram", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("       sysvarInstructions", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("          splTokenProgram", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("            splAtaProgram", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("authorizationRulesProgram", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("       authorizationRules", inst.AccountMetaSlice.Get(14)))
					})
				})
		})
}

func (obj Mint) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MintArgs` param:
	{
		tmp := mintArgsContainer{}
		switch realvalue := obj.MintArgs.(type) {
		case *MintArgsV1:
			tmp.Enum = 0
			tmp.V1 = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	return nil
}
func (obj *Mint) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MintArgs`:
	{
		tmp := new(mintArgsContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.MintArgs = &tmp.V1
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	return nil
}

// NewMintInstruction declares a new Mint instruction with the provided parameters and accounts.
func NewMintInstruction(
	// Parameters:
	mintArgs MintArgs,
	// Accounts:
	token ag_solanago.PublicKey,
	tokenOwner ag_solanago.PublicKey,
	metadata ag_solanago.PublicKey,
	masterEdition ag_solanago.PublicKey,
	tokenRecord ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	delegateRecord ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	sysvarInstructions ag_solanago.PublicKey,
	splTokenProgram ag_solanago.PublicKey,
	splAtaProgram ag_solanago.PublicKey,
	authorizationRulesProgram ag_solanago.PublicKey,
	authorizationRules ag_solanago.PublicKey) *Mint {
	return NewMintInstructionBuilder().
		SetMintArgs(mintArgs).
		SetTokenAccount(token).
		SetTokenOwnerAccount(tokenOwner).
		SetMetadataAccount(metadata).
		SetMasterEditionAccount(masterEdition).
		SetTokenRecordAccount(tokenRecord).
		SetMintAccount(mint).
		SetAuthorityAccount(authority).
		SetDelegateRecordAccount(delegateRecord).
		SetPayerAccount(payer).
		SetSystemProgramAccount(systemProgram).
		SetSysvarInstructionsAccount(sysvarInstructions).
		SetSplTokenProgramAccount(splTokenProgram).
		SetSplAtaProgramAccount(splAtaProgram).
		SetAuthorizationRulesProgramAccount(authorizationRulesProgram).
		SetAuthorizationRulesAccount(authorizationRules)
}
