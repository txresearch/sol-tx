// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package amm_v3

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "AmmV3"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	// # Arguments
	//
	// * `ctx`- The accounts needed by instruction.
	// * `index` - The index of amm config, there may be multiple config.
	// * `tick_spacing` - The tickspacing binding with config, cannot be changed.
	// * `trade_fee_rate` - Trade fee rate, can be changed.
	// * `protocol_fee_rate` - The rate of protocol fee within tarde fee.
	// * `fund_fee_rate` - The rate of fund fee within tarde fee.
	//
	Instruction_CreateAmmConfig = ag_binary.TypeID([8]byte{137, 52, 237, 212, 215, 117, 108, 104})

	// Updates the owner of the amm config
	// Must be called by the current owner or admin
	//
	// # Arguments
	//
	// * `ctx`- The context of accounts
	// * `trade_fee_rate`- The new trade fee rate of amm config, be set when `param` is 0
	// * `protocol_fee_rate`- The new protocol fee rate of amm config, be set when `param` is 1
	// * `fund_fee_rate`- The new fund fee rate of amm config, be set when `param` is 2
	// * `new_owner`- The config's new owner, be set when `param` is 3
	// * `new_fund_owner`- The config's new fund owner, be set when `param` is 4
	// * `param`- The vaule can be 0 | 1 | 2 | 3 | 4, otherwise will report a error
	//
	Instruction_UpdateAmmConfig = ag_binary.TypeID([8]byte{49, 60, 174, 136, 154, 28, 116, 200})

	// Creates a pool for the given token pair and the initial price
	//
	// # Arguments
	//
	// * `ctx`- The context of accounts
	// * `sqrt_price_x64` - the initial sqrt price (amount_token_1 / amount_token_0) of the pool as a Q64.64
	//
	Instruction_CreatePool = ag_binary.TypeID([8]byte{233, 146, 209, 142, 207, 104, 64, 188})

	// Update pool status for given vaule
	//
	// # Arguments
	//
	// * `ctx`- The context of accounts
	// * `status` - The vaule of status
	//
	Instruction_UpdatePoolStatus = ag_binary.TypeID([8]byte{130, 87, 108, 6, 46, 224, 117, 123})

	// Creates an operation account for the program
	//
	// # Arguments
	//
	// * `ctx`- The context of accounts
	//
	Instruction_CreateOperationAccount = ag_binary.TypeID([8]byte{63, 87, 148, 33, 109, 35, 8, 104})

	// Update the operation account
	//
	// # Arguments
	//
	// * `ctx`- The context of accounts
	// * `param`- The vaule can be 0 | 1 | 2 | 3, otherwise will report a error
	// * `keys`- update operation owner when the `param` is 0
	// remove operation owner when the `param` is 1
	// update whitelist mint when the `param` is 2
	// remove whitelist mint when the `param` is 3
	//
	Instruction_UpdateOperationAccount = ag_binary.TypeID([8]byte{127, 70, 119, 40, 188, 227, 61, 7})

	// Transfer reward owner
	//
	// # Arguments
	//
	// * `ctx`- The context of accounts
	// * `new_owner`- new owner pubkey
	//
	Instruction_TransferRewardOwner = ag_binary.TypeID([8]byte{7, 22, 12, 83, 242, 43, 48, 121})

	// Initialize a reward info for a given pool and reward index
	//
	// # Arguments
	//
	// * `ctx`- The context of accounts
	// * `reward_index` - the index to reward info
	// * `open_time` - reward open timestamp
	// * `end_time` - reward end timestamp
	// * `emissions_per_second_x64` - Token reward per second are earned per unit of liquidity.
	//
	Instruction_InitializeReward = ag_binary.TypeID([8]byte{95, 135, 192, 196, 242, 129, 230, 68})

	// Collect remaining reward token for reward founder
	//
	// # Arguments
	//
	// * `ctx`- The context of accounts
	// * `reward_index` - the index to reward info
	//
	Instruction_CollectRemainingRewards = ag_binary.TypeID([8]byte{18, 237, 166, 197, 34, 16, 213, 144})

	// Update rewards info of the given pool, can be called for everyone
	//
	// # Arguments
	//
	// * `ctx`- The context of accounts
	//
	Instruction_UpdateRewardInfos = ag_binary.TypeID([8]byte{163, 172, 224, 52, 11, 154, 106, 223})

	// Restset reward param, start a new reward cycle or extend the current cycle.
	//
	// # Arguments
	//
	// * `ctx` - The context of accounts
	// * `reward_index` - The index of reward token in the pool.
	// * `emissions_per_second_x64` - The per second emission reward, when extend the current cycle,
	// new value can't be less than old value
	// * `open_time` - reward open timestamp, must be set when state a new cycle
	// * `end_time` - reward end timestamp
	//
	Instruction_SetRewardParams = ag_binary.TypeID([8]byte{112, 52, 167, 75, 32, 201, 211, 137})

	// Collect the protocol fee accrued to the pool
	//
	// # Arguments
	//
	// * `ctx` - The context of accounts
	// * `amount_0_requested` - The maximum amount of token_0 to send, can be 0 to collect fees in only token_1
	// * `amount_1_requested` - The maximum amount of token_1 to send, can be 0 to collect fees in only token_0
	//
	Instruction_CollectProtocolFee = ag_binary.TypeID([8]byte{136, 136, 252, 221, 194, 66, 126, 89})

	// Collect the fund fee accrued to the pool
	//
	// # Arguments
	//
	// * `ctx` - The context of accounts
	// * `amount_0_requested` - The maximum amount of token_0 to send, can be 0 to collect fees in only token_1
	// * `amount_1_requested` - The maximum amount of token_1 to send, can be 0 to collect fees in only token_0
	//
	Instruction_CollectFundFee = ag_binary.TypeID([8]byte{167, 138, 78, 149, 223, 194, 6, 126})

	// Creates a new position wrapped in a NFT
	//
	// # Arguments
	//
	// * `ctx` - The context of accounts
	// * `tick_lower_index` - The low boundary of market
	// * `tick_upper_index` - The upper boundary of market
	// * `tick_array_lower_start_index` - The start index of tick array which include tick low
	// * `tick_array_upper_start_index` - The start index of tick array which include tick upper
	// * `liquidity` - The liquidity to be added
	// * `amount_0_max` - The max amount of token_0 to spend, which serves as a slippage check
	// * `amount_1_max` - The max amount of token_1 to spend, which serves as a slippage check
	//
	Instruction_OpenPosition = ag_binary.TypeID([8]byte{135, 128, 47, 77, 15, 152, 240, 49})

	// Creates a new position wrapped in a NFT, support Token2022
	//
	// # Arguments
	//
	// * `ctx` - The context of accounts
	// * `tick_lower_index` - The low boundary of market
	// * `tick_upper_index` - The upper boundary of market
	// * `tick_array_lower_start_index` - The start index of tick array which include tick low
	// * `tick_array_upper_start_index` - The start index of tick array which include tick upper
	// * `liquidity` - The liquidity to be added, if zero, calculate liquidity base amount_0_max or amount_1_max according base_flag
	// * `amount_0_max` - The max amount of token_0 to spend, which serves as a slippage check
	// * `amount_1_max` - The max amount of token_1 to spend, which serves as a slippage check
	// * `base_flag` - must be special if liquidity is zero, false: calculate liquidity base amount_0_max otherwise base amount_1_max
	//
	Instruction_OpenPositionV2 = ag_binary.TypeID([8]byte{77, 184, 74, 214, 112, 86, 241, 199})

	// Close a position, the nft mint and nft account
	//
	// # Arguments
	//
	// * `ctx` - The context of accounts
	//
	Instruction_ClosePosition = ag_binary.TypeID([8]byte{123, 134, 81, 0, 49, 68, 98, 98})

	// Increases liquidity with a exist position, with amount paid by `payer`
	//
	// # Arguments
	//
	// * `ctx` - The context of accounts
	// * `liquidity` - The desired liquidity to be added, can't be zero
	// * `amount_0_max` - The max amount of token_0 to spend, which serves as a slippage check
	// * `amount_1_max` - The max amount of token_1 to spend, which serves as a slippage check
	//
	Instruction_IncreaseLiquidity = ag_binary.TypeID([8]byte{46, 156, 243, 118, 13, 205, 251, 178})

	// Increases liquidity with a exist position, with amount paid by `payer`, support Token2022
	//
	// # Arguments
	//
	// * `ctx` - The context of accounts
	// * `liquidity` - The desired liquidity to be added, if zero, calculate liquidity base amount_0 or amount_1 according base_flag
	// * `amount_0_max` - The max amount of token_0 to spend, which serves as a slippage check
	// * `amount_1_max` - The max amount of token_1 to spend, which serves as a slippage check
	// * `base_flag` - active if liquidity is zero, 0: calculate liquidity base amount_0_max otherwise base amount_1_max
	//
	Instruction_IncreaseLiquidityV2 = ag_binary.TypeID([8]byte{133, 29, 89, 223, 69, 238, 176, 10})

	// Decreases liquidity with a exist position
	//
	// # Arguments
	//
	// * `ctx` -  The context of accounts
	// * `liquidity` - The amount by which liquidity will be decreased
	// * `amount_0_min` - The minimum amount of token_0 that should be accounted for the burned liquidity
	// * `amount_1_min` - The minimum amount of token_1 that should be accounted for the burned liquidity
	//
	Instruction_DecreaseLiquidity = ag_binary.TypeID([8]byte{160, 38, 208, 111, 104, 91, 44, 1})

	// Decreases liquidity with a exist position, support Token2022
	//
	// # Arguments
	//
	// * `ctx` -  The context of accounts
	// * `liquidity` - The amount by which liquidity will be decreased
	// * `amount_0_min` - The minimum amount of token_0 that should be accounted for the burned liquidity
	// * `amount_1_min` - The minimum amount of token_1 that should be accounted for the burned liquidity
	//
	Instruction_DecreaseLiquidityV2 = ag_binary.TypeID([8]byte{58, 127, 188, 62, 79, 82, 196, 96})

	// Swaps one token for as much as possible of another token across a single pool
	//
	// # Arguments
	//
	// * `ctx` - The context of accounts
	// * `amount` - Arranged in pairs with other_amount_threshold. (amount_in, amount_out_minimum) or (amount_out, amount_in_maximum)
	// * `other_amount_threshold` - For slippage check
	// * `sqrt_price_limit` - The Q64.64 sqrt price √P limit. If zero for one, the price cannot
	// * `is_base_input` - swap base input or swap base output
	//
	Instruction_Swap = ag_binary.TypeID([8]byte{248, 198, 158, 145, 225, 117, 135, 200})

	// Swaps one token for as much as possible of another token across a single pool, support token program 2022
	//
	// # Arguments
	//
	// * `ctx` - The context of accounts
	// * `amount` - Arranged in pairs with other_amount_threshold. (amount_in, amount_out_minimum) or (amount_out, amount_in_maximum)
	// * `other_amount_threshold` - For slippage check
	// * `sqrt_price_limit` - The Q64.64 sqrt price √P limit. If zero for one, the price cannot
	// * `is_base_input` - swap base input or swap base output
	//
	Instruction_SwapV2 = ag_binary.TypeID([8]byte{43, 4, 237, 11, 26, 201, 30, 98})

	// Swap token for as much as possible of another token across the path provided, base input
	//
	// # Arguments
	//
	// * `ctx` - The context of accounts
	// * `amount_in` - Token amount to be swapped in
	// * `amount_out_minimum` - Panic if output amount is below minimum amount. For slippage.
	//
	Instruction_SwapRouterBaseIn = ag_binary.TypeID([8]byte{69, 125, 115, 218, 245, 186, 242, 196})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_CreateAmmConfig:
		return "CreateAmmConfig"
	case Instruction_UpdateAmmConfig:
		return "UpdateAmmConfig"
	case Instruction_CreatePool:
		return "CreatePool"
	case Instruction_UpdatePoolStatus:
		return "UpdatePoolStatus"
	case Instruction_CreateOperationAccount:
		return "CreateOperationAccount"
	case Instruction_UpdateOperationAccount:
		return "UpdateOperationAccount"
	case Instruction_TransferRewardOwner:
		return "TransferRewardOwner"
	case Instruction_InitializeReward:
		return "InitializeReward"
	case Instruction_CollectRemainingRewards:
		return "CollectRemainingRewards"
	case Instruction_UpdateRewardInfos:
		return "UpdateRewardInfos"
	case Instruction_SetRewardParams:
		return "SetRewardParams"
	case Instruction_CollectProtocolFee:
		return "CollectProtocolFee"
	case Instruction_CollectFundFee:
		return "CollectFundFee"
	case Instruction_OpenPosition:
		return "OpenPosition"
	case Instruction_OpenPositionV2:
		return "OpenPositionV2"
	case Instruction_ClosePosition:
		return "ClosePosition"
	case Instruction_IncreaseLiquidity:
		return "IncreaseLiquidity"
	case Instruction_IncreaseLiquidityV2:
		return "IncreaseLiquidityV2"
	case Instruction_DecreaseLiquidity:
		return "DecreaseLiquidity"
	case Instruction_DecreaseLiquidityV2:
		return "DecreaseLiquidityV2"
	case Instruction_Swap:
		return "Swap"
	case Instruction_SwapV2:
		return "SwapV2"
	case Instruction_SwapRouterBaseIn:
		return "SwapRouterBaseIn"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"create_amm_config", (*CreateAmmConfig)(nil),
		},
		{
			"update_amm_config", (*UpdateAmmConfig)(nil),
		},
		{
			"create_pool", (*CreatePool)(nil),
		},
		{
			"update_pool_status", (*UpdatePoolStatus)(nil),
		},
		{
			"create_operation_account", (*CreateOperationAccount)(nil),
		},
		{
			"update_operation_account", (*UpdateOperationAccount)(nil),
		},
		{
			"transfer_reward_owner", (*TransferRewardOwner)(nil),
		},
		{
			"initialize_reward", (*InitializeReward)(nil),
		},
		{
			"collect_remaining_rewards", (*CollectRemainingRewards)(nil),
		},
		{
			"update_reward_infos", (*UpdateRewardInfos)(nil),
		},
		{
			"set_reward_params", (*SetRewardParams)(nil),
		},
		{
			"collect_protocol_fee", (*CollectProtocolFee)(nil),
		},
		{
			"collect_fund_fee", (*CollectFundFee)(nil),
		},
		{
			"open_position", (*OpenPosition)(nil),
		},
		{
			"open_position_v2", (*OpenPositionV2)(nil),
		},
		{
			"close_position", (*ClosePosition)(nil),
		},
		{
			"increase_liquidity", (*IncreaseLiquidity)(nil),
		},
		{
			"increase_liquidity_v2", (*IncreaseLiquidityV2)(nil),
		},
		{
			"decrease_liquidity", (*DecreaseLiquidity)(nil),
		},
		{
			"decrease_liquidity_v2", (*DecreaseLiquidityV2)(nil),
		},
		{
			"swap", (*Swap)(nil),
		},
		{
			"swap_v2", (*SwapV2)(nil),
		},
		{
			"swap_router_base_in", (*SwapRouterBaseIn)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
