// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package amm_v3

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Swaps one token for as much as possible of another token across a single pool, support token program 2022
//
// # Arguments
//
// * `ctx` - The context of accounts
// * `amount` - Arranged in pairs with other_amount_threshold. (amount_in, amount_out_minimum) or (amount_out, amount_in_maximum)
// * `other_amount_threshold` - For slippage check
// * `sqrt_price_limit` - The Q64.64 sqrt price √P limit. If zero for one, the price cannot
// * `is_base_input` - swap base input or swap base output
//
type SwapV2 struct {
	Amount               *uint64
	OtherAmountThreshold *uint64
	SqrtPriceLimitX64    *ag_binary.Uint128
	IsBaseInput          *bool

	// [0] = [SIGNER] payer
	// ··········· The user performing the swap
	//
	// [1] = [] ammConfig
	// ··········· The factory state to read protocol fees
	//
	// [2] = [WRITE] poolState
	// ··········· The program account of the pool in which the swap will be performed
	//
	// [3] = [WRITE] inputTokenAccount
	// ··········· The user token account for input token
	//
	// [4] = [WRITE] outputTokenAccount
	// ··········· The user token account for output token
	//
	// [5] = [WRITE] inputVault
	// ··········· The vault token account for input token
	//
	// [6] = [WRITE] outputVault
	// ··········· The vault token account for output token
	//
	// [7] = [WRITE] observationState
	// ··········· The program account for the most recent oracle observation
	//
	// [8] = [] tokenProgram
	// ··········· SPL program for token transfers
	//
	// [9] = [] tokenProgram2022
	// ··········· SPL program 2022 for token transfers
	//
	// [10] = [] memoProgram
	//
	// [11] = [] inputVaultMint
	// ··········· The mint of token vault 0
	//
	// [12] = [] outputVaultMint
	// ··········· The mint of token vault 1
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSwapV2InstructionBuilder creates a new `SwapV2` instruction builder.
func NewSwapV2InstructionBuilder() *SwapV2 {
	nd := &SwapV2{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 13),
	}
	return nd
}

// SetAmount sets the "amount" parameter.
func (inst *SwapV2) SetAmount(amount uint64) *SwapV2 {
	inst.Amount = &amount
	return inst
}

// SetOtherAmountThreshold sets the "otherAmountThreshold" parameter.
func (inst *SwapV2) SetOtherAmountThreshold(otherAmountThreshold uint64) *SwapV2 {
	inst.OtherAmountThreshold = &otherAmountThreshold
	return inst
}

// SetSqrtPriceLimitX64 sets the "sqrtPriceLimitX64" parameter.
func (inst *SwapV2) SetSqrtPriceLimitX64(sqrtPriceLimitX64 ag_binary.Uint128) *SwapV2 {
	inst.SqrtPriceLimitX64 = &sqrtPriceLimitX64
	return inst
}

// SetIsBaseInput sets the "isBaseInput" parameter.
func (inst *SwapV2) SetIsBaseInput(isBaseInput bool) *SwapV2 {
	inst.IsBaseInput = &isBaseInput
	return inst
}

// SetPayerAccount sets the "payer" account.
// The user performing the swap
func (inst *SwapV2) SetPayerAccount(payer ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(payer).SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
// The user performing the swap
func (inst *SwapV2) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAmmConfigAccount sets the "ammConfig" account.
// The factory state to read protocol fees
func (inst *SwapV2) SetAmmConfigAccount(ammConfig ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(ammConfig)
	return inst
}

// GetAmmConfigAccount gets the "ammConfig" account.
// The factory state to read protocol fees
func (inst *SwapV2) GetAmmConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPoolStateAccount sets the "poolState" account.
// The program account of the pool in which the swap will be performed
func (inst *SwapV2) SetPoolStateAccount(poolState ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(poolState).WRITE()
	return inst
}

// GetPoolStateAccount gets the "poolState" account.
// The program account of the pool in which the swap will be performed
func (inst *SwapV2) GetPoolStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetInputTokenAccountAccount sets the "inputTokenAccount" account.
// The user token account for input token
func (inst *SwapV2) SetInputTokenAccountAccount(inputTokenAccount ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(inputTokenAccount).WRITE()
	return inst
}

// GetInputTokenAccountAccount gets the "inputTokenAccount" account.
// The user token account for input token
func (inst *SwapV2) GetInputTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetOutputTokenAccountAccount sets the "outputTokenAccount" account.
// The user token account for output token
func (inst *SwapV2) SetOutputTokenAccountAccount(outputTokenAccount ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(outputTokenAccount).WRITE()
	return inst
}

// GetOutputTokenAccountAccount gets the "outputTokenAccount" account.
// The user token account for output token
func (inst *SwapV2) GetOutputTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetInputVaultAccount sets the "inputVault" account.
// The vault token account for input token
func (inst *SwapV2) SetInputVaultAccount(inputVault ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(inputVault).WRITE()
	return inst
}

// GetInputVaultAccount gets the "inputVault" account.
// The vault token account for input token
func (inst *SwapV2) GetInputVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetOutputVaultAccount sets the "outputVault" account.
// The vault token account for output token
func (inst *SwapV2) SetOutputVaultAccount(outputVault ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(outputVault).WRITE()
	return inst
}

// GetOutputVaultAccount gets the "outputVault" account.
// The vault token account for output token
func (inst *SwapV2) GetOutputVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetObservationStateAccount sets the "observationState" account.
// The program account for the most recent oracle observation
func (inst *SwapV2) SetObservationStateAccount(observationState ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(observationState).WRITE()
	return inst
}

// GetObservationStateAccount gets the "observationState" account.
// The program account for the most recent oracle observation
func (inst *SwapV2) GetObservationStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
// SPL program for token transfers
func (inst *SwapV2) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
// SPL program for token transfers
func (inst *SwapV2) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenProgram2022Account sets the "tokenProgram2022" account.
// SPL program 2022 for token transfers
func (inst *SwapV2) SetTokenProgram2022Account(tokenProgram2022 ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenProgram2022)
	return inst
}

// GetTokenProgram2022Account gets the "tokenProgram2022" account.
// SPL program 2022 for token transfers
func (inst *SwapV2) GetTokenProgram2022Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetMemoProgramAccount sets the "memoProgram" account.
func (inst *SwapV2) SetMemoProgramAccount(memoProgram ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(memoProgram)
	return inst
}

// GetMemoProgramAccount gets the "memoProgram" account.
func (inst *SwapV2) GetMemoProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetInputVaultMintAccount sets the "inputVaultMint" account.
// The mint of token vault 0
func (inst *SwapV2) SetInputVaultMintAccount(inputVaultMint ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(inputVaultMint)
	return inst
}

// GetInputVaultMintAccount gets the "inputVaultMint" account.
// The mint of token vault 0
func (inst *SwapV2) GetInputVaultMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetOutputVaultMintAccount sets the "outputVaultMint" account.
// The mint of token vault 1
func (inst *SwapV2) SetOutputVaultMintAccount(outputVaultMint ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(outputVaultMint)
	return inst
}

// GetOutputVaultMintAccount gets the "outputVaultMint" account.
// The mint of token vault 1
func (inst *SwapV2) GetOutputVaultMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

func (inst SwapV2) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SwapV2,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SwapV2) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SwapV2) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Amount == nil {
			return errors.New("Amount parameter is not set")
		}
		if inst.OtherAmountThreshold == nil {
			return errors.New("OtherAmountThreshold parameter is not set")
		}
		if inst.SqrtPriceLimitX64 == nil {
			return errors.New("SqrtPriceLimitX64 parameter is not set")
		}
		if inst.IsBaseInput == nil {
			return errors.New("IsBaseInput parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.AmmConfig is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PoolState is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.InputTokenAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.OutputTokenAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.InputVault is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.OutputVault is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.ObservationState is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenProgram2022 is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.MemoProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.InputVaultMint is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.OutputVaultMint is not set")
		}
	}
	return nil
}

func (inst *SwapV2) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SwapV2")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=4]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("              Amount", *inst.Amount))
						paramsBranch.Child(ag_format.Param("OtherAmountThreshold", *inst.OtherAmountThreshold))
						paramsBranch.Child(ag_format.Param("   SqrtPriceLimitX64", *inst.SqrtPriceLimitX64))
						paramsBranch.Child(ag_format.Param("         IsBaseInput", *inst.IsBaseInput))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=13]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           payer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("       ammConfig", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       poolState", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("      inputToken", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("     outputToken", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("      inputVault", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("     outputVault", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("observationState", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("    tokenProgram", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("tokenProgram2022", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("     memoProgram", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("  inputVaultMint", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta(" outputVaultMint", inst.AccountMetaSlice.Get(12)))
					})
				})
		})
}

func (obj SwapV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `OtherAmountThreshold` param:
	err = encoder.Encode(obj.OtherAmountThreshold)
	if err != nil {
		return err
	}
	// Serialize `SqrtPriceLimitX64` param:
	err = encoder.Encode(obj.SqrtPriceLimitX64)
	if err != nil {
		return err
	}
	// Serialize `IsBaseInput` param:
	err = encoder.Encode(obj.IsBaseInput)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SwapV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `OtherAmountThreshold`:
	err = decoder.Decode(&obj.OtherAmountThreshold)
	if err != nil {
		return err
	}
	// Deserialize `SqrtPriceLimitX64`:
	err = decoder.Decode(&obj.SqrtPriceLimitX64)
	if err != nil {
		return err
	}
	// Deserialize `IsBaseInput`:
	err = decoder.Decode(&obj.IsBaseInput)
	if err != nil {
		return err
	}
	return nil
}

// NewSwapV2Instruction declares a new SwapV2 instruction with the provided parameters and accounts.
func NewSwapV2Instruction(
	// Parameters:
	amount uint64,
	otherAmountThreshold uint64,
	sqrtPriceLimitX64 ag_binary.Uint128,
	isBaseInput bool,
	// Accounts:
	payer ag_solanago.PublicKey,
	ammConfig ag_solanago.PublicKey,
	poolState ag_solanago.PublicKey,
	inputTokenAccount ag_solanago.PublicKey,
	outputTokenAccount ag_solanago.PublicKey,
	inputVault ag_solanago.PublicKey,
	outputVault ag_solanago.PublicKey,
	observationState ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	tokenProgram2022 ag_solanago.PublicKey,
	memoProgram ag_solanago.PublicKey,
	inputVaultMint ag_solanago.PublicKey,
	outputVaultMint ag_solanago.PublicKey) *SwapV2 {
	return NewSwapV2InstructionBuilder().
		SetAmount(amount).
		SetOtherAmountThreshold(otherAmountThreshold).
		SetSqrtPriceLimitX64(sqrtPriceLimitX64).
		SetIsBaseInput(isBaseInput).
		SetPayerAccount(payer).
		SetAmmConfigAccount(ammConfig).
		SetPoolStateAccount(poolState).
		SetInputTokenAccountAccount(inputTokenAccount).
		SetOutputTokenAccountAccount(outputTokenAccount).
		SetInputVaultAccount(inputVault).
		SetOutputVaultAccount(outputVault).
		SetObservationStateAccount(observationState).
		SetTokenProgramAccount(tokenProgram).
		SetTokenProgram2022Account(tokenProgram2022).
		SetMemoProgramAccount(memoProgram).
		SetInputVaultMintAccount(inputVaultMint).
		SetOutputVaultMintAccount(outputVaultMint)
}
