// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package amm_v3

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Initialize a reward info for a given pool and reward index
//
// # Arguments
//
// * `ctx`- The context of accounts
// * `reward_index` - the index to reward info
// * `open_time` - reward open timestamp
// * `end_time` - reward end timestamp
// * `emissions_per_second_x64` - Token reward per second are earned per unit of liquidity.
//
type InitializeReward struct {
	Param *InitializeRewardParam

	// [0] = [WRITE, SIGNER] rewardFunder
	// ··········· The founder deposit reward token to vault
	//
	// [1] = [WRITE] funderTokenAccount
	//
	// [2] = [] ammConfig
	// ··········· For check the reward_funder authority
	//
	// [3] = [WRITE] poolState
	// ··········· Set reward for this pool
	//
	// [4] = [] operationState
	// ··········· load info from the account to judge reward permission
	//
	// [5] = [] rewardTokenMint
	// ··········· Reward mint
	//
	// [6] = [WRITE] rewardTokenVault
	// ··········· A pda, reward vault
	//
	// [7] = [] rewardTokenProgram
	//
	// [8] = [] systemProgram
	//
	// [9] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeRewardInstructionBuilder creates a new `InitializeReward` instruction builder.
func NewInitializeRewardInstructionBuilder() *InitializeReward {
	nd := &InitializeReward{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	return nd
}

// SetParam sets the "param" parameter.
func (inst *InitializeReward) SetParam(param InitializeRewardParam) *InitializeReward {
	inst.Param = &param
	return inst
}

// SetRewardFunderAccount sets the "rewardFunder" account.
// The founder deposit reward token to vault
func (inst *InitializeReward) SetRewardFunderAccount(rewardFunder ag_solanago.PublicKey) *InitializeReward {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(rewardFunder).WRITE().SIGNER()
	return inst
}

// GetRewardFunderAccount gets the "rewardFunder" account.
// The founder deposit reward token to vault
func (inst *InitializeReward) GetRewardFunderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetFunderTokenAccountAccount sets the "funderTokenAccount" account.
func (inst *InitializeReward) SetFunderTokenAccountAccount(funderTokenAccount ag_solanago.PublicKey) *InitializeReward {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(funderTokenAccount).WRITE()
	return inst
}

// GetFunderTokenAccountAccount gets the "funderTokenAccount" account.
func (inst *InitializeReward) GetFunderTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAmmConfigAccount sets the "ammConfig" account.
// For check the reward_funder authority
func (inst *InitializeReward) SetAmmConfigAccount(ammConfig ag_solanago.PublicKey) *InitializeReward {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(ammConfig)
	return inst
}

// GetAmmConfigAccount gets the "ammConfig" account.
// For check the reward_funder authority
func (inst *InitializeReward) GetAmmConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPoolStateAccount sets the "poolState" account.
// Set reward for this pool
func (inst *InitializeReward) SetPoolStateAccount(poolState ag_solanago.PublicKey) *InitializeReward {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(poolState).WRITE()
	return inst
}

// GetPoolStateAccount gets the "poolState" account.
// Set reward for this pool
func (inst *InitializeReward) GetPoolStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetOperationStateAccount sets the "operationState" account.
// load info from the account to judge reward permission
func (inst *InitializeReward) SetOperationStateAccount(operationState ag_solanago.PublicKey) *InitializeReward {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(operationState)
	return inst
}

// GetOperationStateAccount gets the "operationState" account.
// load info from the account to judge reward permission
func (inst *InitializeReward) GetOperationStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetRewardTokenMintAccount sets the "rewardTokenMint" account.
// Reward mint
func (inst *InitializeReward) SetRewardTokenMintAccount(rewardTokenMint ag_solanago.PublicKey) *InitializeReward {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(rewardTokenMint)
	return inst
}

// GetRewardTokenMintAccount gets the "rewardTokenMint" account.
// Reward mint
func (inst *InitializeReward) GetRewardTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetRewardTokenVaultAccount sets the "rewardTokenVault" account.
// A pda, reward vault
func (inst *InitializeReward) SetRewardTokenVaultAccount(rewardTokenVault ag_solanago.PublicKey) *InitializeReward {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(rewardTokenVault).WRITE()
	return inst
}

// GetRewardTokenVaultAccount gets the "rewardTokenVault" account.
// A pda, reward vault
func (inst *InitializeReward) GetRewardTokenVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetRewardTokenProgramAccount sets the "rewardTokenProgram" account.
func (inst *InitializeReward) SetRewardTokenProgramAccount(rewardTokenProgram ag_solanago.PublicKey) *InitializeReward {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(rewardTokenProgram)
	return inst
}

// GetRewardTokenProgramAccount gets the "rewardTokenProgram" account.
func (inst *InitializeReward) GetRewardTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *InitializeReward) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializeReward {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *InitializeReward) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetRentAccount sets the "rent" account.
func (inst *InitializeReward) SetRentAccount(rent ag_solanago.PublicKey) *InitializeReward {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *InitializeReward) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst InitializeReward) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializeReward,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializeReward) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializeReward) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Param == nil {
			return errors.New("Param parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.RewardFunder is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.FunderTokenAccount is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.AmmConfig is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PoolState is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.OperationState is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.RewardTokenMint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.RewardTokenVault is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.RewardTokenProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *InitializeReward) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializeReward")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Param", *inst.Param))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      rewardFunder", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("       funderToken", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         ammConfig", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         poolState", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("    operationState", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("   rewardTokenMint", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("  rewardTokenVault", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("rewardTokenProgram", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("     systemProgram", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("              rent", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj InitializeReward) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Param` param:
	err = encoder.Encode(obj.Param)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializeReward) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Param`:
	err = decoder.Decode(&obj.Param)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeRewardInstruction declares a new InitializeReward instruction with the provided parameters and accounts.
func NewInitializeRewardInstruction(
	// Parameters:
	param InitializeRewardParam,
	// Accounts:
	rewardFunder ag_solanago.PublicKey,
	funderTokenAccount ag_solanago.PublicKey,
	ammConfig ag_solanago.PublicKey,
	poolState ag_solanago.PublicKey,
	operationState ag_solanago.PublicKey,
	rewardTokenMint ag_solanago.PublicKey,
	rewardTokenVault ag_solanago.PublicKey,
	rewardTokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *InitializeReward {
	return NewInitializeRewardInstructionBuilder().
		SetParam(param).
		SetRewardFunderAccount(rewardFunder).
		SetFunderTokenAccountAccount(funderTokenAccount).
		SetAmmConfigAccount(ammConfig).
		SetPoolStateAccount(poolState).
		SetOperationStateAccount(operationState).
		SetRewardTokenMintAccount(rewardTokenMint).
		SetRewardTokenVaultAccount(rewardTokenVault).
		SetRewardTokenProgramAccount(rewardTokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent)
}
