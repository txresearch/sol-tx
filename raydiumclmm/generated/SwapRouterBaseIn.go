// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package amm_v3

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Swap token for as much as possible of another token across the path provided, base input
//
// # Arguments
//
// * `ctx` - The context of accounts
// * `amount_in` - Token amount to be swapped in
// * `amount_out_minimum` - Panic if output amount is below minimum amount. For slippage.
//
type SwapRouterBaseIn struct {
	AmountIn         *uint64
	AmountOutMinimum *uint64

	// [0] = [SIGNER] payer
	// ··········· The user performing the swap
	//
	// [1] = [WRITE] inputTokenAccount
	// ··········· The token account that pays input tokens for the swap
	//
	// [2] = [WRITE] inputTokenMint
	// ··········· The mint of input token
	//
	// [3] = [] tokenProgram
	// ··········· SPL program for token transfers
	//
	// [4] = [] tokenProgram2022
	// ··········· SPL program 2022 for token transfers
	//
	// [5] = [] memoProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSwapRouterBaseInInstructionBuilder creates a new `SwapRouterBaseIn` instruction builder.
func NewSwapRouterBaseInInstructionBuilder() *SwapRouterBaseIn {
	nd := &SwapRouterBaseIn{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetAmountIn sets the "amountIn" parameter.
func (inst *SwapRouterBaseIn) SetAmountIn(amountIn uint64) *SwapRouterBaseIn {
	inst.AmountIn = &amountIn
	return inst
}

// SetAmountOutMinimum sets the "amountOutMinimum" parameter.
func (inst *SwapRouterBaseIn) SetAmountOutMinimum(amountOutMinimum uint64) *SwapRouterBaseIn {
	inst.AmountOutMinimum = &amountOutMinimum
	return inst
}

// SetPayerAccount sets the "payer" account.
// The user performing the swap
func (inst *SwapRouterBaseIn) SetPayerAccount(payer ag_solanago.PublicKey) *SwapRouterBaseIn {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(payer).SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
// The user performing the swap
func (inst *SwapRouterBaseIn) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetInputTokenAccountAccount sets the "inputTokenAccount" account.
// The token account that pays input tokens for the swap
func (inst *SwapRouterBaseIn) SetInputTokenAccountAccount(inputTokenAccount ag_solanago.PublicKey) *SwapRouterBaseIn {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(inputTokenAccount).WRITE()
	return inst
}

// GetInputTokenAccountAccount gets the "inputTokenAccount" account.
// The token account that pays input tokens for the swap
func (inst *SwapRouterBaseIn) GetInputTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetInputTokenMintAccount sets the "inputTokenMint" account.
// The mint of input token
func (inst *SwapRouterBaseIn) SetInputTokenMintAccount(inputTokenMint ag_solanago.PublicKey) *SwapRouterBaseIn {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(inputTokenMint).WRITE()
	return inst
}

// GetInputTokenMintAccount gets the "inputTokenMint" account.
// The mint of input token
func (inst *SwapRouterBaseIn) GetInputTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
// SPL program for token transfers
func (inst *SwapRouterBaseIn) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *SwapRouterBaseIn {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
// SPL program for token transfers
func (inst *SwapRouterBaseIn) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenProgram2022Account sets the "tokenProgram2022" account.
// SPL program 2022 for token transfers
func (inst *SwapRouterBaseIn) SetTokenProgram2022Account(tokenProgram2022 ag_solanago.PublicKey) *SwapRouterBaseIn {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenProgram2022)
	return inst
}

// GetTokenProgram2022Account gets the "tokenProgram2022" account.
// SPL program 2022 for token transfers
func (inst *SwapRouterBaseIn) GetTokenProgram2022Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetMemoProgramAccount sets the "memoProgram" account.
func (inst *SwapRouterBaseIn) SetMemoProgramAccount(memoProgram ag_solanago.PublicKey) *SwapRouterBaseIn {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(memoProgram)
	return inst
}

// GetMemoProgramAccount gets the "memoProgram" account.
func (inst *SwapRouterBaseIn) GetMemoProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst SwapRouterBaseIn) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SwapRouterBaseIn,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SwapRouterBaseIn) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SwapRouterBaseIn) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.AmountIn == nil {
			return errors.New("AmountIn parameter is not set")
		}
		if inst.AmountOutMinimum == nil {
			return errors.New("AmountOutMinimum parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.InputTokenAccount is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.InputTokenMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenProgram2022 is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.MemoProgram is not set")
		}
	}
	return nil
}

func (inst *SwapRouterBaseIn) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SwapRouterBaseIn")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("        AmountIn", *inst.AmountIn))
						paramsBranch.Child(ag_format.Param("AmountOutMinimum", *inst.AmountOutMinimum))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           payer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("      inputToken", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("  inputTokenMint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("    tokenProgram", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("tokenProgram2022", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("     memoProgram", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj SwapRouterBaseIn) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AmountIn` param:
	err = encoder.Encode(obj.AmountIn)
	if err != nil {
		return err
	}
	// Serialize `AmountOutMinimum` param:
	err = encoder.Encode(obj.AmountOutMinimum)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SwapRouterBaseIn) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AmountIn`:
	err = decoder.Decode(&obj.AmountIn)
	if err != nil {
		return err
	}
	// Deserialize `AmountOutMinimum`:
	err = decoder.Decode(&obj.AmountOutMinimum)
	if err != nil {
		return err
	}
	return nil
}

// NewSwapRouterBaseInInstruction declares a new SwapRouterBaseIn instruction with the provided parameters and accounts.
func NewSwapRouterBaseInInstruction(
	// Parameters:
	amountIn uint64,
	amountOutMinimum uint64,
	// Accounts:
	payer ag_solanago.PublicKey,
	inputTokenAccount ag_solanago.PublicKey,
	inputTokenMint ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	tokenProgram2022 ag_solanago.PublicKey,
	memoProgram ag_solanago.PublicKey) *SwapRouterBaseIn {
	return NewSwapRouterBaseInInstructionBuilder().
		SetAmountIn(amountIn).
		SetAmountOutMinimum(amountOutMinimum).
		SetPayerAccount(payer).
		SetInputTokenAccountAccount(inputTokenAccount).
		SetInputTokenMintAccount(inputTokenMint).
		SetTokenProgramAccount(tokenProgram).
		SetTokenProgram2022Account(tokenProgram2022).
		SetMemoProgramAccount(memoProgram)
}
