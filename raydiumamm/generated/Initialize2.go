// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_amm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Initialize2 is the `initialize2` instruction.
type Initialize2 struct {
	Nonce          *uint8
	OpenTime       *uint64
	InitPcAmount   *uint64
	InitCoinAmount *uint64

	// [0] = [] tokenProgram
	//
	// [1] = [] splAssociatedTokenAccount
	//
	// [2] = [] systemProgram
	//
	// [3] = [] rent
	//
	// [4] = [WRITE] amm
	//
	// [5] = [] ammAuthority
	//
	// [6] = [WRITE] ammOpenOrders
	//
	// [7] = [WRITE] lpMint
	//
	// [8] = [] coinMint
	//
	// [9] = [] pcMint
	//
	// [10] = [WRITE] poolCoinTokenAccount
	//
	// [11] = [WRITE] poolPcTokenAccount
	//
	// [12] = [WRITE] poolWithdrawQueue
	//
	// [13] = [WRITE] ammTargetOrders
	//
	// [14] = [WRITE] poolTempLp
	//
	// [15] = [] serumProgram
	//
	// [16] = [] serumMarket
	//
	// [17] = [WRITE, SIGNER] userWallet
	//
	// [18] = [WRITE] userTokenCoin
	//
	// [19] = [WRITE] userTokenPc
	//
	// [20] = [WRITE] userLpTokenAccount
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitialize2InstructionBuilder creates a new `Initialize2` instruction builder.
func NewInitialize2InstructionBuilder() *Initialize2 {
	nd := &Initialize2{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 21),
	}
	return nd
}

// SetNonce sets the "nonce" parameter.
func (inst *Initialize2) SetNonce(nonce uint8) *Initialize2 {
	inst.Nonce = &nonce
	return inst
}

// SetOpenTime sets the "openTime" parameter.
func (inst *Initialize2) SetOpenTime(openTime uint64) *Initialize2 {
	inst.OpenTime = &openTime
	return inst
}

// SetInitPcAmount sets the "initPcAmount" parameter.
func (inst *Initialize2) SetInitPcAmount(initPcAmount uint64) *Initialize2 {
	inst.InitPcAmount = &initPcAmount
	return inst
}

// SetInitCoinAmount sets the "initCoinAmount" parameter.
func (inst *Initialize2) SetInitCoinAmount(initCoinAmount uint64) *Initialize2 {
	inst.InitCoinAmount = &initCoinAmount
	return inst
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *Initialize2) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *Initialize2 {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *Initialize2) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetSplAssociatedTokenAccountAccount sets the "splAssociatedTokenAccount" account.
func (inst *Initialize2) SetSplAssociatedTokenAccountAccount(splAssociatedTokenAccount ag_solanago.PublicKey) *Initialize2 {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(splAssociatedTokenAccount)
	return inst
}

// GetSplAssociatedTokenAccountAccount gets the "splAssociatedTokenAccount" account.
func (inst *Initialize2) GetSplAssociatedTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *Initialize2) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *Initialize2 {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *Initialize2) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetRentAccount sets the "rent" account.
func (inst *Initialize2) SetRentAccount(rent ag_solanago.PublicKey) *Initialize2 {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *Initialize2) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetAmmAccount sets the "amm" account.
func (inst *Initialize2) SetAmmAccount(amm ag_solanago.PublicKey) *Initialize2 {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(amm).WRITE()
	return inst
}

// GetAmmAccount gets the "amm" account.
func (inst *Initialize2) GetAmmAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetAmmAuthorityAccount sets the "ammAuthority" account.
func (inst *Initialize2) SetAmmAuthorityAccount(ammAuthority ag_solanago.PublicKey) *Initialize2 {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(ammAuthority)
	return inst
}

// GetAmmAuthorityAccount gets the "ammAuthority" account.
func (inst *Initialize2) GetAmmAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetAmmOpenOrdersAccount sets the "ammOpenOrders" account.
func (inst *Initialize2) SetAmmOpenOrdersAccount(ammOpenOrders ag_solanago.PublicKey) *Initialize2 {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(ammOpenOrders).WRITE()
	return inst
}

// GetAmmOpenOrdersAccount gets the "ammOpenOrders" account.
func (inst *Initialize2) GetAmmOpenOrdersAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetLpMintAccount sets the "lpMint" account.
func (inst *Initialize2) SetLpMintAccount(lpMint ag_solanago.PublicKey) *Initialize2 {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(lpMint).WRITE()
	return inst
}

// GetLpMintAccount gets the "lpMint" account.
func (inst *Initialize2) GetLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetCoinMintAccount sets the "coinMint" account.
func (inst *Initialize2) SetCoinMintAccount(coinMint ag_solanago.PublicKey) *Initialize2 {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(coinMint)
	return inst
}

// GetCoinMintAccount gets the "coinMint" account.
func (inst *Initialize2) GetCoinMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetPcMintAccount sets the "pcMint" account.
func (inst *Initialize2) SetPcMintAccount(pcMint ag_solanago.PublicKey) *Initialize2 {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(pcMint)
	return inst
}

// GetPcMintAccount gets the "pcMint" account.
func (inst *Initialize2) GetPcMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetPoolCoinTokenAccountAccount sets the "poolCoinTokenAccount" account.
func (inst *Initialize2) SetPoolCoinTokenAccountAccount(poolCoinTokenAccount ag_solanago.PublicKey) *Initialize2 {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(poolCoinTokenAccount).WRITE()
	return inst
}

// GetPoolCoinTokenAccountAccount gets the "poolCoinTokenAccount" account.
func (inst *Initialize2) GetPoolCoinTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetPoolPcTokenAccountAccount sets the "poolPcTokenAccount" account.
func (inst *Initialize2) SetPoolPcTokenAccountAccount(poolPcTokenAccount ag_solanago.PublicKey) *Initialize2 {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(poolPcTokenAccount).WRITE()
	return inst
}

// GetPoolPcTokenAccountAccount gets the "poolPcTokenAccount" account.
func (inst *Initialize2) GetPoolPcTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetPoolWithdrawQueueAccount sets the "poolWithdrawQueue" account.
func (inst *Initialize2) SetPoolWithdrawQueueAccount(poolWithdrawQueue ag_solanago.PublicKey) *Initialize2 {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(poolWithdrawQueue).WRITE()
	return inst
}

// GetPoolWithdrawQueueAccount gets the "poolWithdrawQueue" account.
func (inst *Initialize2) GetPoolWithdrawQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetAmmTargetOrdersAccount sets the "ammTargetOrders" account.
func (inst *Initialize2) SetAmmTargetOrdersAccount(ammTargetOrders ag_solanago.PublicKey) *Initialize2 {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(ammTargetOrders).WRITE()
	return inst
}

// GetAmmTargetOrdersAccount gets the "ammTargetOrders" account.
func (inst *Initialize2) GetAmmTargetOrdersAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetPoolTempLpAccount sets the "poolTempLp" account.
func (inst *Initialize2) SetPoolTempLpAccount(poolTempLp ag_solanago.PublicKey) *Initialize2 {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(poolTempLp).WRITE()
	return inst
}

// GetPoolTempLpAccount gets the "poolTempLp" account.
func (inst *Initialize2) GetPoolTempLpAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetSerumProgramAccount sets the "serumProgram" account.
func (inst *Initialize2) SetSerumProgramAccount(serumProgram ag_solanago.PublicKey) *Initialize2 {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(serumProgram)
	return inst
}

// GetSerumProgramAccount gets the "serumProgram" account.
func (inst *Initialize2) GetSerumProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetSerumMarketAccount sets the "serumMarket" account.
func (inst *Initialize2) SetSerumMarketAccount(serumMarket ag_solanago.PublicKey) *Initialize2 {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(serumMarket)
	return inst
}

// GetSerumMarketAccount gets the "serumMarket" account.
func (inst *Initialize2) GetSerumMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

// SetUserWalletAccount sets the "userWallet" account.
func (inst *Initialize2) SetUserWalletAccount(userWallet ag_solanago.PublicKey) *Initialize2 {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(userWallet).WRITE().SIGNER()
	return inst
}

// GetUserWalletAccount gets the "userWallet" account.
func (inst *Initialize2) GetUserWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(17)
}

// SetUserTokenCoinAccount sets the "userTokenCoin" account.
func (inst *Initialize2) SetUserTokenCoinAccount(userTokenCoin ag_solanago.PublicKey) *Initialize2 {
	inst.AccountMetaSlice[18] = ag_solanago.Meta(userTokenCoin).WRITE()
	return inst
}

// GetUserTokenCoinAccount gets the "userTokenCoin" account.
func (inst *Initialize2) GetUserTokenCoinAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(18)
}

// SetUserTokenPcAccount sets the "userTokenPc" account.
func (inst *Initialize2) SetUserTokenPcAccount(userTokenPc ag_solanago.PublicKey) *Initialize2 {
	inst.AccountMetaSlice[19] = ag_solanago.Meta(userTokenPc).WRITE()
	return inst
}

// GetUserTokenPcAccount gets the "userTokenPc" account.
func (inst *Initialize2) GetUserTokenPcAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(19)
}

// SetUserLpTokenAccountAccount sets the "userLpTokenAccount" account.
func (inst *Initialize2) SetUserLpTokenAccountAccount(userLpTokenAccount ag_solanago.PublicKey) *Initialize2 {
	inst.AccountMetaSlice[20] = ag_solanago.Meta(userLpTokenAccount).WRITE()
	return inst
}

// GetUserLpTokenAccountAccount gets the "userLpTokenAccount" account.
func (inst *Initialize2) GetUserLpTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(20)
}

func (inst Initialize2) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_Initialize2),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Initialize2) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Initialize2) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Nonce == nil {
			return errors.New("Nonce parameter is not set")
		}
		if inst.OpenTime == nil {
			return errors.New("OpenTime parameter is not set")
		}
		if inst.InitPcAmount == nil {
			return errors.New("InitPcAmount parameter is not set")
		}
		if inst.InitCoinAmount == nil {
			return errors.New("InitCoinAmount parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.SplAssociatedTokenAccount is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Amm is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.AmmAuthority is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.AmmOpenOrders is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.LpMint is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.CoinMint is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.PcMint is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.PoolCoinTokenAccount is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.PoolPcTokenAccount is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.PoolWithdrawQueue is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.AmmTargetOrders is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.PoolTempLp is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.SerumProgram is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.SerumMarket is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.UserWallet is not set")
		}
		if inst.AccountMetaSlice[18] == nil {
			return errors.New("accounts.UserTokenCoin is not set")
		}
		if inst.AccountMetaSlice[19] == nil {
			return errors.New("accounts.UserTokenPc is not set")
		}
		if inst.AccountMetaSlice[20] == nil {
			return errors.New("accounts.UserLpTokenAccount is not set")
		}
	}
	return nil
}

func (inst *Initialize2) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Initialize2")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=4]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("         Nonce", *inst.Nonce))
						paramsBranch.Child(ag_format.Param("      OpenTime", *inst.OpenTime))
						paramsBranch.Child(ag_format.Param("  InitPcAmount", *inst.InitPcAmount))
						paramsBranch.Child(ag_format.Param("InitCoinAmount", *inst.InitCoinAmount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=21]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      tokenProgram", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("splAssociatedToken", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     systemProgram", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("              rent", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("               amm", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("      ammAuthority", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("     ammOpenOrders", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("            lpMint", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("          coinMint", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("            pcMint", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("     poolCoinToken", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("       poolPcToken", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta(" poolWithdrawQueue", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("   ammTargetOrders", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("        poolTempLp", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("      serumProgram", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("       serumMarket", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("        userWallet", inst.AccountMetaSlice.Get(17)))
						accountsBranch.Child(ag_format.Meta("     userTokenCoin", inst.AccountMetaSlice.Get(18)))
						accountsBranch.Child(ag_format.Meta("       userTokenPc", inst.AccountMetaSlice.Get(19)))
						accountsBranch.Child(ag_format.Meta("       userLpToken", inst.AccountMetaSlice.Get(20)))
					})
				})
		})
}

func (obj Initialize2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	// Serialize `OpenTime` param:
	err = encoder.Encode(obj.OpenTime)
	if err != nil {
		return err
	}
	// Serialize `InitPcAmount` param:
	err = encoder.Encode(obj.InitPcAmount)
	if err != nil {
		return err
	}
	// Serialize `InitCoinAmount` param:
	err = encoder.Encode(obj.InitCoinAmount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Initialize2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	// Deserialize `OpenTime`:
	err = decoder.Decode(&obj.OpenTime)
	if err != nil {
		return err
	}
	// Deserialize `InitPcAmount`:
	err = decoder.Decode(&obj.InitPcAmount)
	if err != nil {
		return err
	}
	// Deserialize `InitCoinAmount`:
	err = decoder.Decode(&obj.InitCoinAmount)
	if err != nil {
		return err
	}
	return nil
}

// NewInitialize2Instruction declares a new Initialize2 instruction with the provided parameters and accounts.
func NewInitialize2Instruction(
	// Parameters:
	nonce uint8,
	openTime uint64,
	initPcAmount uint64,
	initCoinAmount uint64,
	// Accounts:
	tokenProgram ag_solanago.PublicKey,
	splAssociatedTokenAccount ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	amm ag_solanago.PublicKey,
	ammAuthority ag_solanago.PublicKey,
	ammOpenOrders ag_solanago.PublicKey,
	lpMint ag_solanago.PublicKey,
	coinMint ag_solanago.PublicKey,
	pcMint ag_solanago.PublicKey,
	poolCoinTokenAccount ag_solanago.PublicKey,
	poolPcTokenAccount ag_solanago.PublicKey,
	poolWithdrawQueue ag_solanago.PublicKey,
	ammTargetOrders ag_solanago.PublicKey,
	poolTempLp ag_solanago.PublicKey,
	serumProgram ag_solanago.PublicKey,
	serumMarket ag_solanago.PublicKey,
	userWallet ag_solanago.PublicKey,
	userTokenCoin ag_solanago.PublicKey,
	userTokenPc ag_solanago.PublicKey,
	userLpTokenAccount ag_solanago.PublicKey) *Initialize2 {
	return NewInitialize2InstructionBuilder().
		SetNonce(nonce).
		SetOpenTime(openTime).
		SetInitPcAmount(initPcAmount).
		SetInitCoinAmount(initCoinAmount).
		SetTokenProgramAccount(tokenProgram).
		SetSplAssociatedTokenAccountAccount(splAssociatedTokenAccount).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent).
		SetAmmAccount(amm).
		SetAmmAuthorityAccount(ammAuthority).
		SetAmmOpenOrdersAccount(ammOpenOrders).
		SetLpMintAccount(lpMint).
		SetCoinMintAccount(coinMint).
		SetPcMintAccount(pcMint).
		SetPoolCoinTokenAccountAccount(poolCoinTokenAccount).
		SetPoolPcTokenAccountAccount(poolPcTokenAccount).
		SetPoolWithdrawQueueAccount(poolWithdrawQueue).
		SetAmmTargetOrdersAccount(ammTargetOrders).
		SetPoolTempLpAccount(poolTempLp).
		SetSerumProgramAccount(serumProgram).
		SetSerumMarketAccount(serumMarket).
		SetUserWalletAccount(userWallet).
		SetUserTokenCoinAccount(userTokenCoin).
		SetUserTokenPcAccount(userTokenPc).
		SetUserLpTokenAccountAccount(userLpTokenAccount)
}
