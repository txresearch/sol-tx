// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_amm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SwapBaseIn is the `swapBaseIn` instruction.
type SwapBaseIn struct {
	AmountIn         *uint64
	MinimumAmountOut *uint64

	// [0] = [] tokenProgram
	//
	// [1] = [WRITE] amm
	//
	// [2] = [] ammAuthority
	//
	// [3] = [WRITE] ammOpenOrders
	//
	// [4] = [WRITE] ammTargetOrders
	//
	// [5] = [WRITE] poolCoinTokenAccount
	//
	// [6] = [WRITE] poolPcTokenAccount
	//
	// [7] = [] serumProgram
	//
	// [8] = [WRITE] serumMarket
	//
	// [9] = [WRITE] serumBids
	//
	// [10] = [WRITE] serumAsks
	//
	// [11] = [WRITE] serumEventQueue
	//
	// [12] = [WRITE] serumCoinVaultAccount
	//
	// [13] = [WRITE] serumPcVaultAccount
	//
	// [14] = [] serumVaultSigner
	//
	// [15] = [WRITE] uerSourceTokenAccount
	//
	// [16] = [WRITE] uerDestinationTokenAccount
	//
	// [17] = [SIGNER] userSourceOwner
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSwapBaseInInstructionBuilder creates a new `SwapBaseIn` instruction builder.
func NewSwapBaseInInstructionBuilder() *SwapBaseIn {
	nd := &SwapBaseIn{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 18),
	}
	return nd
}

// SetAmountIn sets the "amountIn" parameter.
func (inst *SwapBaseIn) SetAmountIn(amountIn uint64) *SwapBaseIn {
	inst.AmountIn = &amountIn
	return inst
}

// SetMinimumAmountOut sets the "minimumAmountOut" parameter.
func (inst *SwapBaseIn) SetMinimumAmountOut(minimumAmountOut uint64) *SwapBaseIn {
	inst.MinimumAmountOut = &minimumAmountOut
	return inst
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *SwapBaseIn) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *SwapBaseIn {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *SwapBaseIn) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAmmAccount sets the "amm" account.
func (inst *SwapBaseIn) SetAmmAccount(amm ag_solanago.PublicKey) *SwapBaseIn {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(amm).WRITE()
	return inst
}

// GetAmmAccount gets the "amm" account.
func (inst *SwapBaseIn) GetAmmAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAmmAuthorityAccount sets the "ammAuthority" account.
func (inst *SwapBaseIn) SetAmmAuthorityAccount(ammAuthority ag_solanago.PublicKey) *SwapBaseIn {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(ammAuthority)
	return inst
}

// GetAmmAuthorityAccount gets the "ammAuthority" account.
func (inst *SwapBaseIn) GetAmmAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetAmmOpenOrdersAccount sets the "ammOpenOrders" account.
func (inst *SwapBaseIn) SetAmmOpenOrdersAccount(ammOpenOrders ag_solanago.PublicKey) *SwapBaseIn {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(ammOpenOrders).WRITE()
	return inst
}

// GetAmmOpenOrdersAccount gets the "ammOpenOrders" account.
func (inst *SwapBaseIn) GetAmmOpenOrdersAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetAmmTargetOrdersAccount sets the "ammTargetOrders" account.
func (inst *SwapBaseIn) SetAmmTargetOrdersAccount(ammTargetOrders ag_solanago.PublicKey) *SwapBaseIn {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(ammTargetOrders).WRITE()
	return inst
}

// GetAmmTargetOrdersAccount gets the "ammTargetOrders" account.
func (inst *SwapBaseIn) GetAmmTargetOrdersAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetPoolCoinTokenAccountAccount sets the "poolCoinTokenAccount" account.
func (inst *SwapBaseIn) SetPoolCoinTokenAccountAccount(poolCoinTokenAccount ag_solanago.PublicKey) *SwapBaseIn {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(poolCoinTokenAccount).WRITE()
	return inst
}

// GetPoolCoinTokenAccountAccount gets the "poolCoinTokenAccount" account.
func (inst *SwapBaseIn) GetPoolCoinTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetPoolPcTokenAccountAccount sets the "poolPcTokenAccount" account.
func (inst *SwapBaseIn) SetPoolPcTokenAccountAccount(poolPcTokenAccount ag_solanago.PublicKey) *SwapBaseIn {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(poolPcTokenAccount).WRITE()
	return inst
}

// GetPoolPcTokenAccountAccount gets the "poolPcTokenAccount" account.
func (inst *SwapBaseIn) GetPoolPcTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSerumProgramAccount sets the "serumProgram" account.
func (inst *SwapBaseIn) SetSerumProgramAccount(serumProgram ag_solanago.PublicKey) *SwapBaseIn {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(serumProgram)
	return inst
}

// GetSerumProgramAccount gets the "serumProgram" account.
func (inst *SwapBaseIn) GetSerumProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSerumMarketAccount sets the "serumMarket" account.
func (inst *SwapBaseIn) SetSerumMarketAccount(serumMarket ag_solanago.PublicKey) *SwapBaseIn {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(serumMarket).WRITE()
	return inst
}

// GetSerumMarketAccount gets the "serumMarket" account.
func (inst *SwapBaseIn) GetSerumMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetSerumBidsAccount sets the "serumBids" account.
func (inst *SwapBaseIn) SetSerumBidsAccount(serumBids ag_solanago.PublicKey) *SwapBaseIn {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(serumBids).WRITE()
	return inst
}

// GetSerumBidsAccount gets the "serumBids" account.
func (inst *SwapBaseIn) GetSerumBidsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetSerumAsksAccount sets the "serumAsks" account.
func (inst *SwapBaseIn) SetSerumAsksAccount(serumAsks ag_solanago.PublicKey) *SwapBaseIn {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(serumAsks).WRITE()
	return inst
}

// GetSerumAsksAccount gets the "serumAsks" account.
func (inst *SwapBaseIn) GetSerumAsksAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetSerumEventQueueAccount sets the "serumEventQueue" account.
func (inst *SwapBaseIn) SetSerumEventQueueAccount(serumEventQueue ag_solanago.PublicKey) *SwapBaseIn {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(serumEventQueue).WRITE()
	return inst
}

// GetSerumEventQueueAccount gets the "serumEventQueue" account.
func (inst *SwapBaseIn) GetSerumEventQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetSerumCoinVaultAccountAccount sets the "serumCoinVaultAccount" account.
func (inst *SwapBaseIn) SetSerumCoinVaultAccountAccount(serumCoinVaultAccount ag_solanago.PublicKey) *SwapBaseIn {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(serumCoinVaultAccount).WRITE()
	return inst
}

// GetSerumCoinVaultAccountAccount gets the "serumCoinVaultAccount" account.
func (inst *SwapBaseIn) GetSerumCoinVaultAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetSerumPcVaultAccountAccount sets the "serumPcVaultAccount" account.
func (inst *SwapBaseIn) SetSerumPcVaultAccountAccount(serumPcVaultAccount ag_solanago.PublicKey) *SwapBaseIn {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(serumPcVaultAccount).WRITE()
	return inst
}

// GetSerumPcVaultAccountAccount gets the "serumPcVaultAccount" account.
func (inst *SwapBaseIn) GetSerumPcVaultAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetSerumVaultSignerAccount sets the "serumVaultSigner" account.
func (inst *SwapBaseIn) SetSerumVaultSignerAccount(serumVaultSigner ag_solanago.PublicKey) *SwapBaseIn {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(serumVaultSigner)
	return inst
}

// GetSerumVaultSignerAccount gets the "serumVaultSigner" account.
func (inst *SwapBaseIn) GetSerumVaultSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetUerSourceTokenAccountAccount sets the "uerSourceTokenAccount" account.
func (inst *SwapBaseIn) SetUerSourceTokenAccountAccount(uerSourceTokenAccount ag_solanago.PublicKey) *SwapBaseIn {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(uerSourceTokenAccount).WRITE()
	return inst
}

// GetUerSourceTokenAccountAccount gets the "uerSourceTokenAccount" account.
func (inst *SwapBaseIn) GetUerSourceTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetUerDestinationTokenAccountAccount sets the "uerDestinationTokenAccount" account.
func (inst *SwapBaseIn) SetUerDestinationTokenAccountAccount(uerDestinationTokenAccount ag_solanago.PublicKey) *SwapBaseIn {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(uerDestinationTokenAccount).WRITE()
	return inst
}

// GetUerDestinationTokenAccountAccount gets the "uerDestinationTokenAccount" account.
func (inst *SwapBaseIn) GetUerDestinationTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

// SetUserSourceOwnerAccount sets the "userSourceOwner" account.
func (inst *SwapBaseIn) SetUserSourceOwnerAccount(userSourceOwner ag_solanago.PublicKey) *SwapBaseIn {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(userSourceOwner).SIGNER()
	return inst
}

// GetUserSourceOwnerAccount gets the "userSourceOwner" account.
func (inst *SwapBaseIn) GetUserSourceOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(17)
}

func (inst SwapBaseIn) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_SwapBaseIn),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SwapBaseIn) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SwapBaseIn) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.AmountIn == nil {
			return errors.New("AmountIn parameter is not set")
		}
		if inst.MinimumAmountOut == nil {
			return errors.New("MinimumAmountOut parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Amm is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.AmmAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.AmmOpenOrders is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.AmmTargetOrders is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.PoolCoinTokenAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.PoolPcTokenAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SerumProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.SerumMarket is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.SerumBids is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.SerumAsks is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.SerumEventQueue is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.SerumCoinVaultAccount is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.SerumPcVaultAccount is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.SerumVaultSigner is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.UerSourceTokenAccount is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.UerDestinationTokenAccount is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.UserSourceOwner is not set")
		}
	}
	return nil
}

func (inst *SwapBaseIn) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SwapBaseIn")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("        AmountIn", *inst.AmountIn))
						paramsBranch.Child(ag_format.Param("MinimumAmountOut", *inst.MinimumAmountOut))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=18]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("       tokenProgram", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                amm", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       ammAuthority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("      ammOpenOrders", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("    ammTargetOrders", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("      poolCoinToken", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("        poolPcToken", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("       serumProgram", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("        serumMarket", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("          serumBids", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("          serumAsks", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("    serumEventQueue", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("     serumCoinVault", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("       serumPcVault", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("   serumVaultSigner", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("     uerSourceToken", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("uerDestinationToken", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("    userSourceOwner", inst.AccountMetaSlice.Get(17)))
					})
				})
		})
}

func (obj SwapBaseIn) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AmountIn` param:
	err = encoder.Encode(obj.AmountIn)
	if err != nil {
		return err
	}
	// Serialize `MinimumAmountOut` param:
	err = encoder.Encode(obj.MinimumAmountOut)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SwapBaseIn) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AmountIn`:
	err = decoder.Decode(&obj.AmountIn)
	if err != nil {
		return err
	}
	// Deserialize `MinimumAmountOut`:
	err = decoder.Decode(&obj.MinimumAmountOut)
	if err != nil {
		return err
	}
	return nil
}

// NewSwapBaseInInstruction declares a new SwapBaseIn instruction with the provided parameters and accounts.
func NewSwapBaseInInstruction(
	// Parameters:
	amountIn uint64,
	minimumAmountOut uint64,
	// Accounts:
	tokenProgram ag_solanago.PublicKey,
	amm ag_solanago.PublicKey,
	ammAuthority ag_solanago.PublicKey,
	ammOpenOrders ag_solanago.PublicKey,
	ammTargetOrders ag_solanago.PublicKey,
	poolCoinTokenAccount ag_solanago.PublicKey,
	poolPcTokenAccount ag_solanago.PublicKey,
	serumProgram ag_solanago.PublicKey,
	serumMarket ag_solanago.PublicKey,
	serumBids ag_solanago.PublicKey,
	serumAsks ag_solanago.PublicKey,
	serumEventQueue ag_solanago.PublicKey,
	serumCoinVaultAccount ag_solanago.PublicKey,
	serumPcVaultAccount ag_solanago.PublicKey,
	serumVaultSigner ag_solanago.PublicKey,
	uerSourceTokenAccount ag_solanago.PublicKey,
	uerDestinationTokenAccount ag_solanago.PublicKey,
	userSourceOwner ag_solanago.PublicKey) *SwapBaseIn {
	return NewSwapBaseInInstructionBuilder().
		SetAmountIn(amountIn).
		SetMinimumAmountOut(minimumAmountOut).
		SetTokenProgramAccount(tokenProgram).
		SetAmmAccount(amm).
		SetAmmAuthorityAccount(ammAuthority).
		SetAmmOpenOrdersAccount(ammOpenOrders).
		SetAmmTargetOrdersAccount(ammTargetOrders).
		SetPoolCoinTokenAccountAccount(poolCoinTokenAccount).
		SetPoolPcTokenAccountAccount(poolPcTokenAccount).
		SetSerumProgramAccount(serumProgram).
		SetSerumMarketAccount(serumMarket).
		SetSerumBidsAccount(serumBids).
		SetSerumAsksAccount(serumAsks).
		SetSerumEventQueueAccount(serumEventQueue).
		SetSerumCoinVaultAccountAccount(serumCoinVaultAccount).
		SetSerumPcVaultAccountAccount(serumPcVaultAccount).
		SetSerumVaultSignerAccount(serumVaultSigner).
		SetUerSourceTokenAccountAccount(uerSourceTokenAccount).
		SetUerDestinationTokenAccountAccount(uerDestinationTokenAccount).
		SetUserSourceOwnerAccount(userSourceOwner)
}
