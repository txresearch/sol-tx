// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_amm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// WithdrawPnl is the `withdrawPnl` instruction.
type WithdrawPnl struct {

	// [0] = [] tokenProgram
	//
	// [1] = [WRITE] amm
	//
	// [2] = [] ammConfig
	//
	// [3] = [] ammAuthority
	//
	// [4] = [WRITE] ammOpenOrders
	//
	// [5] = [WRITE] poolCoinTokenAccount
	//
	// [6] = [WRITE] poolPcTokenAccount
	//
	// [7] = [WRITE] coinPnlTokenAccount
	//
	// [8] = [WRITE] pcPnlTokenAccount
	//
	// [9] = [SIGNER] pnlOwnerAccount
	//
	// [10] = [WRITE] ammTargetOrders
	//
	// [11] = [] serumProgram
	//
	// [12] = [WRITE] serumMarket
	//
	// [13] = [] serumEventQueue
	//
	// [14] = [WRITE] serumCoinVaultAccount
	//
	// [15] = [WRITE] serumPcVaultAccount
	//
	// [16] = [] serumVaultSigner
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewWithdrawPnlInstructionBuilder creates a new `WithdrawPnl` instruction builder.
func NewWithdrawPnlInstructionBuilder() *WithdrawPnl {
	nd := &WithdrawPnl{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 17),
	}
	return nd
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *WithdrawPnl) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *WithdrawPnl {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *WithdrawPnl) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAmmAccount sets the "amm" account.
func (inst *WithdrawPnl) SetAmmAccount(amm ag_solanago.PublicKey) *WithdrawPnl {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(amm).WRITE()
	return inst
}

// GetAmmAccount gets the "amm" account.
func (inst *WithdrawPnl) GetAmmAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAmmConfigAccount sets the "ammConfig" account.
func (inst *WithdrawPnl) SetAmmConfigAccount(ammConfig ag_solanago.PublicKey) *WithdrawPnl {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(ammConfig)
	return inst
}

// GetAmmConfigAccount gets the "ammConfig" account.
func (inst *WithdrawPnl) GetAmmConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetAmmAuthorityAccount sets the "ammAuthority" account.
func (inst *WithdrawPnl) SetAmmAuthorityAccount(ammAuthority ag_solanago.PublicKey) *WithdrawPnl {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(ammAuthority)
	return inst
}

// GetAmmAuthorityAccount gets the "ammAuthority" account.
func (inst *WithdrawPnl) GetAmmAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetAmmOpenOrdersAccount sets the "ammOpenOrders" account.
func (inst *WithdrawPnl) SetAmmOpenOrdersAccount(ammOpenOrders ag_solanago.PublicKey) *WithdrawPnl {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(ammOpenOrders).WRITE()
	return inst
}

// GetAmmOpenOrdersAccount gets the "ammOpenOrders" account.
func (inst *WithdrawPnl) GetAmmOpenOrdersAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetPoolCoinTokenAccountAccount sets the "poolCoinTokenAccount" account.
func (inst *WithdrawPnl) SetPoolCoinTokenAccountAccount(poolCoinTokenAccount ag_solanago.PublicKey) *WithdrawPnl {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(poolCoinTokenAccount).WRITE()
	return inst
}

// GetPoolCoinTokenAccountAccount gets the "poolCoinTokenAccount" account.
func (inst *WithdrawPnl) GetPoolCoinTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetPoolPcTokenAccountAccount sets the "poolPcTokenAccount" account.
func (inst *WithdrawPnl) SetPoolPcTokenAccountAccount(poolPcTokenAccount ag_solanago.PublicKey) *WithdrawPnl {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(poolPcTokenAccount).WRITE()
	return inst
}

// GetPoolPcTokenAccountAccount gets the "poolPcTokenAccount" account.
func (inst *WithdrawPnl) GetPoolPcTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetCoinPnlTokenAccountAccount sets the "coinPnlTokenAccount" account.
func (inst *WithdrawPnl) SetCoinPnlTokenAccountAccount(coinPnlTokenAccount ag_solanago.PublicKey) *WithdrawPnl {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(coinPnlTokenAccount).WRITE()
	return inst
}

// GetCoinPnlTokenAccountAccount gets the "coinPnlTokenAccount" account.
func (inst *WithdrawPnl) GetCoinPnlTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetPcPnlTokenAccountAccount sets the "pcPnlTokenAccount" account.
func (inst *WithdrawPnl) SetPcPnlTokenAccountAccount(pcPnlTokenAccount ag_solanago.PublicKey) *WithdrawPnl {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(pcPnlTokenAccount).WRITE()
	return inst
}

// GetPcPnlTokenAccountAccount gets the "pcPnlTokenAccount" account.
func (inst *WithdrawPnl) GetPcPnlTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetPnlOwnerAccountAccount sets the "pnlOwnerAccount" account.
func (inst *WithdrawPnl) SetPnlOwnerAccountAccount(pnlOwnerAccount ag_solanago.PublicKey) *WithdrawPnl {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(pnlOwnerAccount).SIGNER()
	return inst
}

// GetPnlOwnerAccountAccount gets the "pnlOwnerAccount" account.
func (inst *WithdrawPnl) GetPnlOwnerAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetAmmTargetOrdersAccount sets the "ammTargetOrders" account.
func (inst *WithdrawPnl) SetAmmTargetOrdersAccount(ammTargetOrders ag_solanago.PublicKey) *WithdrawPnl {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(ammTargetOrders).WRITE()
	return inst
}

// GetAmmTargetOrdersAccount gets the "ammTargetOrders" account.
func (inst *WithdrawPnl) GetAmmTargetOrdersAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetSerumProgramAccount sets the "serumProgram" account.
func (inst *WithdrawPnl) SetSerumProgramAccount(serumProgram ag_solanago.PublicKey) *WithdrawPnl {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(serumProgram)
	return inst
}

// GetSerumProgramAccount gets the "serumProgram" account.
func (inst *WithdrawPnl) GetSerumProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetSerumMarketAccount sets the "serumMarket" account.
func (inst *WithdrawPnl) SetSerumMarketAccount(serumMarket ag_solanago.PublicKey) *WithdrawPnl {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(serumMarket).WRITE()
	return inst
}

// GetSerumMarketAccount gets the "serumMarket" account.
func (inst *WithdrawPnl) GetSerumMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetSerumEventQueueAccount sets the "serumEventQueue" account.
func (inst *WithdrawPnl) SetSerumEventQueueAccount(serumEventQueue ag_solanago.PublicKey) *WithdrawPnl {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(serumEventQueue)
	return inst
}

// GetSerumEventQueueAccount gets the "serumEventQueue" account.
func (inst *WithdrawPnl) GetSerumEventQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetSerumCoinVaultAccountAccount sets the "serumCoinVaultAccount" account.
func (inst *WithdrawPnl) SetSerumCoinVaultAccountAccount(serumCoinVaultAccount ag_solanago.PublicKey) *WithdrawPnl {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(serumCoinVaultAccount).WRITE()
	return inst
}

// GetSerumCoinVaultAccountAccount gets the "serumCoinVaultAccount" account.
func (inst *WithdrawPnl) GetSerumCoinVaultAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetSerumPcVaultAccountAccount sets the "serumPcVaultAccount" account.
func (inst *WithdrawPnl) SetSerumPcVaultAccountAccount(serumPcVaultAccount ag_solanago.PublicKey) *WithdrawPnl {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(serumPcVaultAccount).WRITE()
	return inst
}

// GetSerumPcVaultAccountAccount gets the "serumPcVaultAccount" account.
func (inst *WithdrawPnl) GetSerumPcVaultAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetSerumVaultSignerAccount sets the "serumVaultSigner" account.
func (inst *WithdrawPnl) SetSerumVaultSignerAccount(serumVaultSigner ag_solanago.PublicKey) *WithdrawPnl {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(serumVaultSigner)
	return inst
}

// GetSerumVaultSignerAccount gets the "serumVaultSigner" account.
func (inst *WithdrawPnl) GetSerumVaultSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

func (inst WithdrawPnl) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_WithdrawPnl),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst WithdrawPnl) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *WithdrawPnl) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Amm is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.AmmConfig is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.AmmAuthority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.AmmOpenOrders is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.PoolCoinTokenAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.PoolPcTokenAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.CoinPnlTokenAccount is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.PcPnlTokenAccount is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.PnlOwnerAccount is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.AmmTargetOrders is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.SerumProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.SerumMarket is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.SerumEventQueue is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.SerumCoinVaultAccount is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.SerumPcVaultAccount is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.SerumVaultSigner is not set")
		}
	}
	return nil
}

func (inst *WithdrawPnl) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("WithdrawPnl")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=17]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("    tokenProgram", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("             amm", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       ammConfig", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("    ammAuthority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("   ammOpenOrders", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("   poolCoinToken", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("     poolPcToken", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("    coinPnlToken", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("      pcPnlToken", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("        pnlOwner", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta(" ammTargetOrders", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("    serumProgram", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("     serumMarket", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta(" serumEventQueue", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("  serumCoinVault", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("    serumPcVault", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("serumVaultSigner", inst.AccountMetaSlice.Get(16)))
					})
				})
		})
}

func (obj WithdrawPnl) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *WithdrawPnl) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewWithdrawPnlInstruction declares a new WithdrawPnl instruction with the provided parameters and accounts.
func NewWithdrawPnlInstruction(
	// Accounts:
	tokenProgram ag_solanago.PublicKey,
	amm ag_solanago.PublicKey,
	ammConfig ag_solanago.PublicKey,
	ammAuthority ag_solanago.PublicKey,
	ammOpenOrders ag_solanago.PublicKey,
	poolCoinTokenAccount ag_solanago.PublicKey,
	poolPcTokenAccount ag_solanago.PublicKey,
	coinPnlTokenAccount ag_solanago.PublicKey,
	pcPnlTokenAccount ag_solanago.PublicKey,
	pnlOwnerAccount ag_solanago.PublicKey,
	ammTargetOrders ag_solanago.PublicKey,
	serumProgram ag_solanago.PublicKey,
	serumMarket ag_solanago.PublicKey,
	serumEventQueue ag_solanago.PublicKey,
	serumCoinVaultAccount ag_solanago.PublicKey,
	serumPcVaultAccount ag_solanago.PublicKey,
	serumVaultSigner ag_solanago.PublicKey) *WithdrawPnl {
	return NewWithdrawPnlInstructionBuilder().
		SetTokenProgramAccount(tokenProgram).
		SetAmmAccount(amm).
		SetAmmConfigAccount(ammConfig).
		SetAmmAuthorityAccount(ammAuthority).
		SetAmmOpenOrdersAccount(ammOpenOrders).
		SetPoolCoinTokenAccountAccount(poolCoinTokenAccount).
		SetPoolPcTokenAccountAccount(poolPcTokenAccount).
		SetCoinPnlTokenAccountAccount(coinPnlTokenAccount).
		SetPcPnlTokenAccountAccount(pcPnlTokenAccount).
		SetPnlOwnerAccountAccount(pnlOwnerAccount).
		SetAmmTargetOrdersAccount(ammTargetOrders).
		SetSerumProgramAccount(serumProgram).
		SetSerumMarketAccount(serumMarket).
		SetSerumEventQueueAccount(serumEventQueue).
		SetSerumCoinVaultAccountAccount(serumCoinVaultAccount).
		SetSerumPcVaultAccountAccount(serumPcVaultAccount).
		SetSerumVaultSignerAccount(serumVaultSigner)
}
