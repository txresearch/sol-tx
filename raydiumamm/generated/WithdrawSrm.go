// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_amm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// WithdrawSrm is the `withdrawSrm` instruction.
type WithdrawSrm struct {
	Amount *uint64

	// [0] = [] tokenProgram
	//
	// [1] = [] amm
	//
	// [2] = [SIGNER] ammOwnerAccount
	//
	// [3] = [] ammAuthority
	//
	// [4] = [WRITE] srmToken
	//
	// [5] = [WRITE] destSrmToken
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewWithdrawSrmInstructionBuilder creates a new `WithdrawSrm` instruction builder.
func NewWithdrawSrmInstructionBuilder() *WithdrawSrm {
	nd := &WithdrawSrm{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetAmount sets the "amount" parameter.
func (inst *WithdrawSrm) SetAmount(amount uint64) *WithdrawSrm {
	inst.Amount = &amount
	return inst
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *WithdrawSrm) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *WithdrawSrm {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *WithdrawSrm) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAmmAccount sets the "amm" account.
func (inst *WithdrawSrm) SetAmmAccount(amm ag_solanago.PublicKey) *WithdrawSrm {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(amm)
	return inst
}

// GetAmmAccount gets the "amm" account.
func (inst *WithdrawSrm) GetAmmAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAmmOwnerAccountAccount sets the "ammOwnerAccount" account.
func (inst *WithdrawSrm) SetAmmOwnerAccountAccount(ammOwnerAccount ag_solanago.PublicKey) *WithdrawSrm {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(ammOwnerAccount).SIGNER()
	return inst
}

// GetAmmOwnerAccountAccount gets the "ammOwnerAccount" account.
func (inst *WithdrawSrm) GetAmmOwnerAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetAmmAuthorityAccount sets the "ammAuthority" account.
func (inst *WithdrawSrm) SetAmmAuthorityAccount(ammAuthority ag_solanago.PublicKey) *WithdrawSrm {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(ammAuthority)
	return inst
}

// GetAmmAuthorityAccount gets the "ammAuthority" account.
func (inst *WithdrawSrm) GetAmmAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSrmTokenAccount sets the "srmToken" account.
func (inst *WithdrawSrm) SetSrmTokenAccount(srmToken ag_solanago.PublicKey) *WithdrawSrm {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(srmToken).WRITE()
	return inst
}

// GetSrmTokenAccount gets the "srmToken" account.
func (inst *WithdrawSrm) GetSrmTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetDestSrmTokenAccount sets the "destSrmToken" account.
func (inst *WithdrawSrm) SetDestSrmTokenAccount(destSrmToken ag_solanago.PublicKey) *WithdrawSrm {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(destSrmToken).WRITE()
	return inst
}

// GetDestSrmTokenAccount gets the "destSrmToken" account.
func (inst *WithdrawSrm) GetDestSrmTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst WithdrawSrm) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_WithdrawSrm),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst WithdrawSrm) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *WithdrawSrm) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Amount == nil {
			return errors.New("Amount parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Amm is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.AmmOwnerAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.AmmAuthority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SrmToken is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.DestSrmToken is not set")
		}
	}
	return nil
}

func (inst *WithdrawSrm) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("WithdrawSrm")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Amount", *inst.Amount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("tokenProgram", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         amm", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("    ammOwner", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("ammAuthority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("    srmToken", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("destSrmToken", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj WithdrawSrm) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *WithdrawSrm) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

// NewWithdrawSrmInstruction declares a new WithdrawSrm instruction with the provided parameters and accounts.
func NewWithdrawSrmInstruction(
	// Parameters:
	amount uint64,
	// Accounts:
	tokenProgram ag_solanago.PublicKey,
	amm ag_solanago.PublicKey,
	ammOwnerAccount ag_solanago.PublicKey,
	ammAuthority ag_solanago.PublicKey,
	srmToken ag_solanago.PublicKey,
	destSrmToken ag_solanago.PublicKey) *WithdrawSrm {
	return NewWithdrawSrmInstructionBuilder().
		SetAmount(amount).
		SetTokenProgramAccount(tokenProgram).
		SetAmmAccount(amm).
		SetAmmOwnerAccountAccount(ammOwnerAccount).
		SetAmmAuthorityAccount(ammAuthority).
		SetSrmTokenAccount(srmToken).
		SetDestSrmTokenAccount(destSrmToken)
}
