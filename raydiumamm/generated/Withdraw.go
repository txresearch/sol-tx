// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_amm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Withdraw is the `withdraw` instruction.
type Withdraw struct {
	Amount *uint64

	// [0] = [] tokenProgram
	//
	// [1] = [WRITE] amm
	//
	// [2] = [] ammAuthority
	//
	// [3] = [WRITE] ammOpenOrders
	//
	// [4] = [WRITE] ammTargetOrders
	//
	// [5] = [WRITE] lpMintAddress
	//
	// [6] = [WRITE] poolCoinTokenAccount
	//
	// [7] = [WRITE] poolPcTokenAccount
	//
	// [8] = [WRITE] poolWithdrawQueue
	//
	// [9] = [WRITE] poolTempLpTokenAccount
	//
	// [10] = [] serumProgram
	//
	// [11] = [WRITE] serumMarket
	//
	// [12] = [WRITE] serumCoinVaultAccount
	//
	// [13] = [WRITE] serumPcVaultAccount
	//
	// [14] = [] serumVaultSigner
	//
	// [15] = [WRITE] userLpTokenAccount
	//
	// [16] = [WRITE] uerCoinTokenAccount
	//
	// [17] = [WRITE] uerPcTokenAccount
	//
	// [18] = [SIGNER] userOwner
	//
	// [19] = [WRITE] serumEventQ
	//
	// [20] = [WRITE] serumBids
	//
	// [21] = [WRITE] serumAsks
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewWithdrawInstructionBuilder creates a new `Withdraw` instruction builder.
func NewWithdrawInstructionBuilder() *Withdraw {
	nd := &Withdraw{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 22),
	}
	return nd
}

// SetAmount sets the "amount" parameter.
func (inst *Withdraw) SetAmount(amount uint64) *Withdraw {
	inst.Amount = &amount
	return inst
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *Withdraw) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *Withdraw) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAmmAccount sets the "amm" account.
func (inst *Withdraw) SetAmmAccount(amm ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(amm).WRITE()
	return inst
}

// GetAmmAccount gets the "amm" account.
func (inst *Withdraw) GetAmmAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAmmAuthorityAccount sets the "ammAuthority" account.
func (inst *Withdraw) SetAmmAuthorityAccount(ammAuthority ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(ammAuthority)
	return inst
}

// GetAmmAuthorityAccount gets the "ammAuthority" account.
func (inst *Withdraw) GetAmmAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetAmmOpenOrdersAccount sets the "ammOpenOrders" account.
func (inst *Withdraw) SetAmmOpenOrdersAccount(ammOpenOrders ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(ammOpenOrders).WRITE()
	return inst
}

// GetAmmOpenOrdersAccount gets the "ammOpenOrders" account.
func (inst *Withdraw) GetAmmOpenOrdersAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetAmmTargetOrdersAccount sets the "ammTargetOrders" account.
func (inst *Withdraw) SetAmmTargetOrdersAccount(ammTargetOrders ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(ammTargetOrders).WRITE()
	return inst
}

// GetAmmTargetOrdersAccount gets the "ammTargetOrders" account.
func (inst *Withdraw) GetAmmTargetOrdersAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetLpMintAddressAccount sets the "lpMintAddress" account.
func (inst *Withdraw) SetLpMintAddressAccount(lpMintAddress ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(lpMintAddress).WRITE()
	return inst
}

// GetLpMintAddressAccount gets the "lpMintAddress" account.
func (inst *Withdraw) GetLpMintAddressAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetPoolCoinTokenAccountAccount sets the "poolCoinTokenAccount" account.
func (inst *Withdraw) SetPoolCoinTokenAccountAccount(poolCoinTokenAccount ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(poolCoinTokenAccount).WRITE()
	return inst
}

// GetPoolCoinTokenAccountAccount gets the "poolCoinTokenAccount" account.
func (inst *Withdraw) GetPoolCoinTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetPoolPcTokenAccountAccount sets the "poolPcTokenAccount" account.
func (inst *Withdraw) SetPoolPcTokenAccountAccount(poolPcTokenAccount ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(poolPcTokenAccount).WRITE()
	return inst
}

// GetPoolPcTokenAccountAccount gets the "poolPcTokenAccount" account.
func (inst *Withdraw) GetPoolPcTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetPoolWithdrawQueueAccount sets the "poolWithdrawQueue" account.
func (inst *Withdraw) SetPoolWithdrawQueueAccount(poolWithdrawQueue ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(poolWithdrawQueue).WRITE()
	return inst
}

// GetPoolWithdrawQueueAccount gets the "poolWithdrawQueue" account.
func (inst *Withdraw) GetPoolWithdrawQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetPoolTempLpTokenAccountAccount sets the "poolTempLpTokenAccount" account.
func (inst *Withdraw) SetPoolTempLpTokenAccountAccount(poolTempLpTokenAccount ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(poolTempLpTokenAccount).WRITE()
	return inst
}

// GetPoolTempLpTokenAccountAccount gets the "poolTempLpTokenAccount" account.
func (inst *Withdraw) GetPoolTempLpTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetSerumProgramAccount sets the "serumProgram" account.
func (inst *Withdraw) SetSerumProgramAccount(serumProgram ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(serumProgram)
	return inst
}

// GetSerumProgramAccount gets the "serumProgram" account.
func (inst *Withdraw) GetSerumProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetSerumMarketAccount sets the "serumMarket" account.
func (inst *Withdraw) SetSerumMarketAccount(serumMarket ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(serumMarket).WRITE()
	return inst
}

// GetSerumMarketAccount gets the "serumMarket" account.
func (inst *Withdraw) GetSerumMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetSerumCoinVaultAccountAccount sets the "serumCoinVaultAccount" account.
func (inst *Withdraw) SetSerumCoinVaultAccountAccount(serumCoinVaultAccount ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(serumCoinVaultAccount).WRITE()
	return inst
}

// GetSerumCoinVaultAccountAccount gets the "serumCoinVaultAccount" account.
func (inst *Withdraw) GetSerumCoinVaultAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetSerumPcVaultAccountAccount sets the "serumPcVaultAccount" account.
func (inst *Withdraw) SetSerumPcVaultAccountAccount(serumPcVaultAccount ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(serumPcVaultAccount).WRITE()
	return inst
}

// GetSerumPcVaultAccountAccount gets the "serumPcVaultAccount" account.
func (inst *Withdraw) GetSerumPcVaultAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetSerumVaultSignerAccount sets the "serumVaultSigner" account.
func (inst *Withdraw) SetSerumVaultSignerAccount(serumVaultSigner ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(serumVaultSigner)
	return inst
}

// GetSerumVaultSignerAccount gets the "serumVaultSigner" account.
func (inst *Withdraw) GetSerumVaultSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetUserLpTokenAccountAccount sets the "userLpTokenAccount" account.
func (inst *Withdraw) SetUserLpTokenAccountAccount(userLpTokenAccount ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(userLpTokenAccount).WRITE()
	return inst
}

// GetUserLpTokenAccountAccount gets the "userLpTokenAccount" account.
func (inst *Withdraw) GetUserLpTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetUerCoinTokenAccountAccount sets the "uerCoinTokenAccount" account.
func (inst *Withdraw) SetUerCoinTokenAccountAccount(uerCoinTokenAccount ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(uerCoinTokenAccount).WRITE()
	return inst
}

// GetUerCoinTokenAccountAccount gets the "uerCoinTokenAccount" account.
func (inst *Withdraw) GetUerCoinTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

// SetUerPcTokenAccountAccount sets the "uerPcTokenAccount" account.
func (inst *Withdraw) SetUerPcTokenAccountAccount(uerPcTokenAccount ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(uerPcTokenAccount).WRITE()
	return inst
}

// GetUerPcTokenAccountAccount gets the "uerPcTokenAccount" account.
func (inst *Withdraw) GetUerPcTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(17)
}

// SetUserOwnerAccount sets the "userOwner" account.
func (inst *Withdraw) SetUserOwnerAccount(userOwner ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[18] = ag_solanago.Meta(userOwner).SIGNER()
	return inst
}

// GetUserOwnerAccount gets the "userOwner" account.
func (inst *Withdraw) GetUserOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(18)
}

// SetSerumEventQAccount sets the "serumEventQ" account.
func (inst *Withdraw) SetSerumEventQAccount(serumEventQ ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[19] = ag_solanago.Meta(serumEventQ).WRITE()
	return inst
}

// GetSerumEventQAccount gets the "serumEventQ" account.
func (inst *Withdraw) GetSerumEventQAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(19)
}

// SetSerumBidsAccount sets the "serumBids" account.
func (inst *Withdraw) SetSerumBidsAccount(serumBids ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[20] = ag_solanago.Meta(serumBids).WRITE()
	return inst
}

// GetSerumBidsAccount gets the "serumBids" account.
func (inst *Withdraw) GetSerumBidsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(20)
}

// SetSerumAsksAccount sets the "serumAsks" account.
func (inst *Withdraw) SetSerumAsksAccount(serumAsks ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[21] = ag_solanago.Meta(serumAsks).WRITE()
	return inst
}

// GetSerumAsksAccount gets the "serumAsks" account.
func (inst *Withdraw) GetSerumAsksAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(21)
}

func (inst Withdraw) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_Withdraw),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Withdraw) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Withdraw) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Amount == nil {
			return errors.New("Amount parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Amm is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.AmmAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.AmmOpenOrders is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.AmmTargetOrders is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.LpMintAddress is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.PoolCoinTokenAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.PoolPcTokenAccount is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.PoolWithdrawQueue is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.PoolTempLpTokenAccount is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.SerumProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.SerumMarket is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.SerumCoinVaultAccount is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.SerumPcVaultAccount is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.SerumVaultSigner is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.UserLpTokenAccount is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.UerCoinTokenAccount is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.UerPcTokenAccount is not set")
		}
		if inst.AccountMetaSlice[18] == nil {
			return errors.New("accounts.UserOwner is not set")
		}
		if inst.AccountMetaSlice[19] == nil {
			return errors.New("accounts.SerumEventQ is not set")
		}
		if inst.AccountMetaSlice[20] == nil {
			return errors.New("accounts.SerumBids is not set")
		}
		if inst.AccountMetaSlice[21] == nil {
			return errors.New("accounts.SerumAsks is not set")
		}
	}
	return nil
}

func (inst *Withdraw) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Withdraw")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Amount", *inst.Amount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=22]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     tokenProgram", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("              amm", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     ammAuthority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("    ammOpenOrders", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("  ammTargetOrders", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("    lpMintAddress", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("    poolCoinToken", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("      poolPcToken", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("poolWithdrawQueue", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("  poolTempLpToken", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("     serumProgram", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("      serumMarket", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("   serumCoinVault", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("     serumPcVault", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta(" serumVaultSigner", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("      userLpToken", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("     uerCoinToken", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("       uerPcToken", inst.AccountMetaSlice.Get(17)))
						accountsBranch.Child(ag_format.Meta("        userOwner", inst.AccountMetaSlice.Get(18)))
						accountsBranch.Child(ag_format.Meta("      serumEventQ", inst.AccountMetaSlice.Get(19)))
						accountsBranch.Child(ag_format.Meta("        serumBids", inst.AccountMetaSlice.Get(20)))
						accountsBranch.Child(ag_format.Meta("        serumAsks", inst.AccountMetaSlice.Get(21)))
					})
				})
		})
}

func (obj Withdraw) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Withdraw) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

// NewWithdrawInstruction declares a new Withdraw instruction with the provided parameters and accounts.
func NewWithdrawInstruction(
	// Parameters:
	amount uint64,
	// Accounts:
	tokenProgram ag_solanago.PublicKey,
	amm ag_solanago.PublicKey,
	ammAuthority ag_solanago.PublicKey,
	ammOpenOrders ag_solanago.PublicKey,
	ammTargetOrders ag_solanago.PublicKey,
	lpMintAddress ag_solanago.PublicKey,
	poolCoinTokenAccount ag_solanago.PublicKey,
	poolPcTokenAccount ag_solanago.PublicKey,
	poolWithdrawQueue ag_solanago.PublicKey,
	poolTempLpTokenAccount ag_solanago.PublicKey,
	serumProgram ag_solanago.PublicKey,
	serumMarket ag_solanago.PublicKey,
	serumCoinVaultAccount ag_solanago.PublicKey,
	serumPcVaultAccount ag_solanago.PublicKey,
	serumVaultSigner ag_solanago.PublicKey,
	userLpTokenAccount ag_solanago.PublicKey,
	uerCoinTokenAccount ag_solanago.PublicKey,
	uerPcTokenAccount ag_solanago.PublicKey,
	userOwner ag_solanago.PublicKey,
	serumEventQ ag_solanago.PublicKey,
	serumBids ag_solanago.PublicKey,
	serumAsks ag_solanago.PublicKey) *Withdraw {
	return NewWithdrawInstructionBuilder().
		SetAmount(amount).
		SetTokenProgramAccount(tokenProgram).
		SetAmmAccount(amm).
		SetAmmAuthorityAccount(ammAuthority).
		SetAmmOpenOrdersAccount(ammOpenOrders).
		SetAmmTargetOrdersAccount(ammTargetOrders).
		SetLpMintAddressAccount(lpMintAddress).
		SetPoolCoinTokenAccountAccount(poolCoinTokenAccount).
		SetPoolPcTokenAccountAccount(poolPcTokenAccount).
		SetPoolWithdrawQueueAccount(poolWithdrawQueue).
		SetPoolTempLpTokenAccountAccount(poolTempLpTokenAccount).
		SetSerumProgramAccount(serumProgram).
		SetSerumMarketAccount(serumMarket).
		SetSerumCoinVaultAccountAccount(serumCoinVaultAccount).
		SetSerumPcVaultAccountAccount(serumPcVaultAccount).
		SetSerumVaultSignerAccount(serumVaultSigner).
		SetUserLpTokenAccountAccount(userLpTokenAccount).
		SetUerCoinTokenAccountAccount(uerCoinTokenAccount).
		SetUerPcTokenAccountAccount(uerPcTokenAccount).
		SetUserOwnerAccount(userOwner).
		SetSerumEventQAccount(serumEventQ).
		SetSerumBidsAccount(serumBids).
		SetSerumAsksAccount(serumAsks)
}
