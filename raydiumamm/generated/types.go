// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_amm

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type WithdrawDestToken struct {
	WithdrawAmount uint64
	CoinAmount     uint64
	PcAmount       uint64
	DestTokenCoin  ag_solanago.PublicKey
	DestTokenPc    ag_solanago.PublicKey
}

func (obj WithdrawDestToken) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `WithdrawAmount` param:
	err = encoder.Encode(obj.WithdrawAmount)
	if err != nil {
		return err
	}
	// Serialize `CoinAmount` param:
	err = encoder.Encode(obj.CoinAmount)
	if err != nil {
		return err
	}
	// Serialize `PcAmount` param:
	err = encoder.Encode(obj.PcAmount)
	if err != nil {
		return err
	}
	// Serialize `DestTokenCoin` param:
	err = encoder.Encode(obj.DestTokenCoin)
	if err != nil {
		return err
	}
	// Serialize `DestTokenPc` param:
	err = encoder.Encode(obj.DestTokenPc)
	if err != nil {
		return err
	}
	return nil
}

func (obj *WithdrawDestToken) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `WithdrawAmount`:
	err = decoder.Decode(&obj.WithdrawAmount)
	if err != nil {
		return err
	}
	// Deserialize `CoinAmount`:
	err = decoder.Decode(&obj.CoinAmount)
	if err != nil {
		return err
	}
	// Deserialize `PcAmount`:
	err = decoder.Decode(&obj.PcAmount)
	if err != nil {
		return err
	}
	// Deserialize `DestTokenCoin`:
	err = decoder.Decode(&obj.DestTokenCoin)
	if err != nil {
		return err
	}
	// Deserialize `DestTokenPc`:
	err = decoder.Decode(&obj.DestTokenPc)
	if err != nil {
		return err
	}
	return nil
}

type WithdrawQueue struct {
	Owner [4]uint64
	Head  uint64
	Count uint64
	Buf   [64]WithdrawDestToken
}

func (obj WithdrawQueue) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `Head` param:
	err = encoder.Encode(obj.Head)
	if err != nil {
		return err
	}
	// Serialize `Count` param:
	err = encoder.Encode(obj.Count)
	if err != nil {
		return err
	}
	// Serialize `Buf` param:
	err = encoder.Encode(obj.Buf)
	if err != nil {
		return err
	}
	return nil
}

func (obj *WithdrawQueue) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `Head`:
	err = decoder.Decode(&obj.Head)
	if err != nil {
		return err
	}
	// Deserialize `Count`:
	err = decoder.Decode(&obj.Count)
	if err != nil {
		return err
	}
	// Deserialize `Buf`:
	err = decoder.Decode(&obj.Buf)
	if err != nil {
		return err
	}
	return nil
}

type TargetOrder struct {
	Price uint64
	Vol   uint64
}

func (obj TargetOrder) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Price` param:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return err
	}
	// Serialize `Vol` param:
	err = encoder.Encode(obj.Vol)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TargetOrder) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return err
	}
	// Deserialize `Vol`:
	err = decoder.Decode(&obj.Vol)
	if err != nil {
		return err
	}
	return nil
}

type OutPutData struct {
	NeedTakePnlCoin     uint64
	NeedTakePnlPc       uint64
	TotalPnlPc          uint64
	TotalPnlCoin        uint64
	PoolOpenTime        uint64
	PunishPcAmount      uint64
	PunishCoinAmount    uint64
	OrderbookToInitTime uint64
	SwapCoinInAmount    ag_binary.Uint128
	SwapPcOutAmount     ag_binary.Uint128
	SwapTakePcFee       uint64
	SwapPcInAmount      ag_binary.Uint128
	SwapCoinOutAmount   ag_binary.Uint128
	SwapTakeCoinFee     uint64
}

func (obj OutPutData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NeedTakePnlCoin` param:
	err = encoder.Encode(obj.NeedTakePnlCoin)
	if err != nil {
		return err
	}
	// Serialize `NeedTakePnlPc` param:
	err = encoder.Encode(obj.NeedTakePnlPc)
	if err != nil {
		return err
	}
	// Serialize `TotalPnlPc` param:
	err = encoder.Encode(obj.TotalPnlPc)
	if err != nil {
		return err
	}
	// Serialize `TotalPnlCoin` param:
	err = encoder.Encode(obj.TotalPnlCoin)
	if err != nil {
		return err
	}
	// Serialize `PoolOpenTime` param:
	err = encoder.Encode(obj.PoolOpenTime)
	if err != nil {
		return err
	}
	// Serialize `PunishPcAmount` param:
	err = encoder.Encode(obj.PunishPcAmount)
	if err != nil {
		return err
	}
	// Serialize `PunishCoinAmount` param:
	err = encoder.Encode(obj.PunishCoinAmount)
	if err != nil {
		return err
	}
	// Serialize `OrderbookToInitTime` param:
	err = encoder.Encode(obj.OrderbookToInitTime)
	if err != nil {
		return err
	}
	// Serialize `SwapCoinInAmount` param:
	err = encoder.Encode(obj.SwapCoinInAmount)
	if err != nil {
		return err
	}
	// Serialize `SwapPcOutAmount` param:
	err = encoder.Encode(obj.SwapPcOutAmount)
	if err != nil {
		return err
	}
	// Serialize `SwapTakePcFee` param:
	err = encoder.Encode(obj.SwapTakePcFee)
	if err != nil {
		return err
	}
	// Serialize `SwapPcInAmount` param:
	err = encoder.Encode(obj.SwapPcInAmount)
	if err != nil {
		return err
	}
	// Serialize `SwapCoinOutAmount` param:
	err = encoder.Encode(obj.SwapCoinOutAmount)
	if err != nil {
		return err
	}
	// Serialize `SwapTakeCoinFee` param:
	err = encoder.Encode(obj.SwapTakeCoinFee)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OutPutData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NeedTakePnlCoin`:
	err = decoder.Decode(&obj.NeedTakePnlCoin)
	if err != nil {
		return err
	}
	// Deserialize `NeedTakePnlPc`:
	err = decoder.Decode(&obj.NeedTakePnlPc)
	if err != nil {
		return err
	}
	// Deserialize `TotalPnlPc`:
	err = decoder.Decode(&obj.TotalPnlPc)
	if err != nil {
		return err
	}
	// Deserialize `TotalPnlCoin`:
	err = decoder.Decode(&obj.TotalPnlCoin)
	if err != nil {
		return err
	}
	// Deserialize `PoolOpenTime`:
	err = decoder.Decode(&obj.PoolOpenTime)
	if err != nil {
		return err
	}
	// Deserialize `PunishPcAmount`:
	err = decoder.Decode(&obj.PunishPcAmount)
	if err != nil {
		return err
	}
	// Deserialize `PunishCoinAmount`:
	err = decoder.Decode(&obj.PunishCoinAmount)
	if err != nil {
		return err
	}
	// Deserialize `OrderbookToInitTime`:
	err = decoder.Decode(&obj.OrderbookToInitTime)
	if err != nil {
		return err
	}
	// Deserialize `SwapCoinInAmount`:
	err = decoder.Decode(&obj.SwapCoinInAmount)
	if err != nil {
		return err
	}
	// Deserialize `SwapPcOutAmount`:
	err = decoder.Decode(&obj.SwapPcOutAmount)
	if err != nil {
		return err
	}
	// Deserialize `SwapTakePcFee`:
	err = decoder.Decode(&obj.SwapTakePcFee)
	if err != nil {
		return err
	}
	// Deserialize `SwapPcInAmount`:
	err = decoder.Decode(&obj.SwapPcInAmount)
	if err != nil {
		return err
	}
	// Deserialize `SwapCoinOutAmount`:
	err = decoder.Decode(&obj.SwapCoinOutAmount)
	if err != nil {
		return err
	}
	// Deserialize `SwapTakeCoinFee`:
	err = decoder.Decode(&obj.SwapTakeCoinFee)
	if err != nil {
		return err
	}
	return nil
}

type AmmConfig struct {
	PnlOwner    ag_solanago.PublicKey
	CancelOwner ag_solanago.PublicKey
	Pending1    [28]uint64
	Pending2    [32]uint64
}

func (obj AmmConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PnlOwner` param:
	err = encoder.Encode(obj.PnlOwner)
	if err != nil {
		return err
	}
	// Serialize `CancelOwner` param:
	err = encoder.Encode(obj.CancelOwner)
	if err != nil {
		return err
	}
	// Serialize `Pending1` param:
	err = encoder.Encode(obj.Pending1)
	if err != nil {
		return err
	}
	// Serialize `Pending2` param:
	err = encoder.Encode(obj.Pending2)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AmmConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PnlOwner`:
	err = decoder.Decode(&obj.PnlOwner)
	if err != nil {
		return err
	}
	// Deserialize `CancelOwner`:
	err = decoder.Decode(&obj.CancelOwner)
	if err != nil {
		return err
	}
	// Deserialize `Pending1`:
	err = decoder.Decode(&obj.Pending1)
	if err != nil {
		return err
	}
	// Deserialize `Pending2`:
	err = decoder.Decode(&obj.Pending2)
	if err != nil {
		return err
	}
	return nil
}

type LastOrderDistance struct {
	LastOrderNumerator   uint64
	LastOrderDenominator uint64
}

func (obj LastOrderDistance) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LastOrderNumerator` param:
	err = encoder.Encode(obj.LastOrderNumerator)
	if err != nil {
		return err
	}
	// Serialize `LastOrderDenominator` param:
	err = encoder.Encode(obj.LastOrderDenominator)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LastOrderDistance) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LastOrderNumerator`:
	err = decoder.Decode(&obj.LastOrderNumerator)
	if err != nil {
		return err
	}
	// Deserialize `LastOrderDenominator`:
	err = decoder.Decode(&obj.LastOrderDenominator)
	if err != nil {
		return err
	}
	return nil
}

type NeedTake struct {
	NeedTakePc   uint64
	NeedTakeCoin uint64
}

func (obj NeedTake) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NeedTakePc` param:
	err = encoder.Encode(obj.NeedTakePc)
	if err != nil {
		return err
	}
	// Serialize `NeedTakeCoin` param:
	err = encoder.Encode(obj.NeedTakeCoin)
	if err != nil {
		return err
	}
	return nil
}

func (obj *NeedTake) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NeedTakePc`:
	err = decoder.Decode(&obj.NeedTakePc)
	if err != nil {
		return err
	}
	// Deserialize `NeedTakeCoin`:
	err = decoder.Decode(&obj.NeedTakeCoin)
	if err != nil {
		return err
	}
	return nil
}

type SwapInstructionBaseIn struct {
	AmountIn         uint64
	MinimumAmountOut uint64
}

func (obj SwapInstructionBaseIn) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AmountIn` param:
	err = encoder.Encode(obj.AmountIn)
	if err != nil {
		return err
	}
	// Serialize `MinimumAmountOut` param:
	err = encoder.Encode(obj.MinimumAmountOut)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapInstructionBaseIn) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AmountIn`:
	err = decoder.Decode(&obj.AmountIn)
	if err != nil {
		return err
	}
	// Deserialize `MinimumAmountOut`:
	err = decoder.Decode(&obj.MinimumAmountOut)
	if err != nil {
		return err
	}
	return nil
}

type SwapInstructionBaseOut struct {
	MaxAmountIn uint64
	AmountOut   uint64
}

func (obj SwapInstructionBaseOut) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MaxAmountIn` param:
	err = encoder.Encode(obj.MaxAmountIn)
	if err != nil {
		return err
	}
	// Serialize `AmountOut` param:
	err = encoder.Encode(obj.AmountOut)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapInstructionBaseOut) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MaxAmountIn`:
	err = decoder.Decode(&obj.MaxAmountIn)
	if err != nil {
		return err
	}
	// Deserialize `AmountOut`:
	err = decoder.Decode(&obj.AmountOut)
	if err != nil {
		return err
	}
	return nil
}
