// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package generated

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// DeletePositionBundle is the `deletePositionBundle` instruction.
type DeletePositionBundle struct {

	// [0] = [WRITE] positionBundle
	//
	// [1] = [WRITE] positionBundleMint
	//
	// [2] = [WRITE] positionBundleTokenAccount
	//
	// [3] = [SIGNER] positionBundleOwner
	//
	// [4] = [WRITE] receiver
	//
	// [5] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewDeletePositionBundleInstructionBuilder creates a new `DeletePositionBundle` instruction builder.
func NewDeletePositionBundleInstructionBuilder() *DeletePositionBundle {
	nd := &DeletePositionBundle{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetPositionBundleAccount sets the "positionBundle" account.
func (inst *DeletePositionBundle) SetPositionBundleAccount(positionBundle ag_solanago.PublicKey) *DeletePositionBundle {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(positionBundle).WRITE()
	return inst
}

// GetPositionBundleAccount gets the "positionBundle" account.
func (inst *DeletePositionBundle) GetPositionBundleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPositionBundleMintAccount sets the "positionBundleMint" account.
func (inst *DeletePositionBundle) SetPositionBundleMintAccount(positionBundleMint ag_solanago.PublicKey) *DeletePositionBundle {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(positionBundleMint).WRITE()
	return inst
}

// GetPositionBundleMintAccount gets the "positionBundleMint" account.
func (inst *DeletePositionBundle) GetPositionBundleMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPositionBundleTokenAccountAccount sets the "positionBundleTokenAccount" account.
func (inst *DeletePositionBundle) SetPositionBundleTokenAccountAccount(positionBundleTokenAccount ag_solanago.PublicKey) *DeletePositionBundle {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(positionBundleTokenAccount).WRITE()
	return inst
}

// GetPositionBundleTokenAccountAccount gets the "positionBundleTokenAccount" account.
func (inst *DeletePositionBundle) GetPositionBundleTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPositionBundleOwnerAccount sets the "positionBundleOwner" account.
func (inst *DeletePositionBundle) SetPositionBundleOwnerAccount(positionBundleOwner ag_solanago.PublicKey) *DeletePositionBundle {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(positionBundleOwner).SIGNER()
	return inst
}

// GetPositionBundleOwnerAccount gets the "positionBundleOwner" account.
func (inst *DeletePositionBundle) GetPositionBundleOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetReceiverAccount sets the "receiver" account.
func (inst *DeletePositionBundle) SetReceiverAccount(receiver ag_solanago.PublicKey) *DeletePositionBundle {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(receiver).WRITE()
	return inst
}

// GetReceiverAccount gets the "receiver" account.
func (inst *DeletePositionBundle) GetReceiverAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *DeletePositionBundle) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *DeletePositionBundle {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *DeletePositionBundle) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst DeletePositionBundle) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_DeletePositionBundle,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst DeletePositionBundle) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *DeletePositionBundle) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.PositionBundle is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.PositionBundleMint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PositionBundleTokenAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PositionBundleOwner is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Receiver is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *DeletePositionBundle) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("DeletePositionBundle")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     positionBundle", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta(" positionBundleMint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("positionBundleToken", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("positionBundleOwner", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("           receiver", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("       tokenProgram", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj DeletePositionBundle) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *DeletePositionBundle) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewDeletePositionBundleInstruction declares a new DeletePositionBundle instruction with the provided parameters and accounts.
func NewDeletePositionBundleInstruction(
	// Accounts:
	positionBundle ag_solanago.PublicKey,
	positionBundleMint ag_solanago.PublicKey,
	positionBundleTokenAccount ag_solanago.PublicKey,
	positionBundleOwner ag_solanago.PublicKey,
	receiver ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *DeletePositionBundle {
	return NewDeletePositionBundleInstructionBuilder().
		SetPositionBundleAccount(positionBundle).
		SetPositionBundleMintAccount(positionBundleMint).
		SetPositionBundleTokenAccountAccount(positionBundleTokenAccount).
		SetPositionBundleOwnerAccount(positionBundleOwner).
		SetReceiverAccount(receiver).
		SetTokenProgramAccount(tokenProgram)
}
