// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package generated

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CloseBundledPosition is the `closeBundledPosition` instruction.
type CloseBundledPosition struct {
	BundleIndex *uint16

	// [0] = [WRITE] bundledPosition
	//
	// [1] = [WRITE] positionBundle
	//
	// [2] = [] positionBundleTokenAccount
	//
	// [3] = [SIGNER] positionBundleAuthority
	//
	// [4] = [WRITE] receiver
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCloseBundledPositionInstructionBuilder creates a new `CloseBundledPosition` instruction builder.
func NewCloseBundledPositionInstructionBuilder() *CloseBundledPosition {
	nd := &CloseBundledPosition{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetBundleIndex sets the "bundleIndex" parameter.
func (inst *CloseBundledPosition) SetBundleIndex(bundleIndex uint16) *CloseBundledPosition {
	inst.BundleIndex = &bundleIndex
	return inst
}

// SetBundledPositionAccount sets the "bundledPosition" account.
func (inst *CloseBundledPosition) SetBundledPositionAccount(bundledPosition ag_solanago.PublicKey) *CloseBundledPosition {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(bundledPosition).WRITE()
	return inst
}

// GetBundledPositionAccount gets the "bundledPosition" account.
func (inst *CloseBundledPosition) GetBundledPositionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPositionBundleAccount sets the "positionBundle" account.
func (inst *CloseBundledPosition) SetPositionBundleAccount(positionBundle ag_solanago.PublicKey) *CloseBundledPosition {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(positionBundle).WRITE()
	return inst
}

// GetPositionBundleAccount gets the "positionBundle" account.
func (inst *CloseBundledPosition) GetPositionBundleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPositionBundleTokenAccountAccount sets the "positionBundleTokenAccount" account.
func (inst *CloseBundledPosition) SetPositionBundleTokenAccountAccount(positionBundleTokenAccount ag_solanago.PublicKey) *CloseBundledPosition {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(positionBundleTokenAccount)
	return inst
}

// GetPositionBundleTokenAccountAccount gets the "positionBundleTokenAccount" account.
func (inst *CloseBundledPosition) GetPositionBundleTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPositionBundleAuthorityAccount sets the "positionBundleAuthority" account.
func (inst *CloseBundledPosition) SetPositionBundleAuthorityAccount(positionBundleAuthority ag_solanago.PublicKey) *CloseBundledPosition {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(positionBundleAuthority).SIGNER()
	return inst
}

// GetPositionBundleAuthorityAccount gets the "positionBundleAuthority" account.
func (inst *CloseBundledPosition) GetPositionBundleAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetReceiverAccount sets the "receiver" account.
func (inst *CloseBundledPosition) SetReceiverAccount(receiver ag_solanago.PublicKey) *CloseBundledPosition {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(receiver).WRITE()
	return inst
}

// GetReceiverAccount gets the "receiver" account.
func (inst *CloseBundledPosition) GetReceiverAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst CloseBundledPosition) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CloseBundledPosition,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CloseBundledPosition) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CloseBundledPosition) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.BundleIndex == nil {
			return errors.New("BundleIndex parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.BundledPosition is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.PositionBundle is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PositionBundleTokenAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PositionBundleAuthority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Receiver is not set")
		}
	}
	return nil
}

func (inst *CloseBundledPosition) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CloseBundledPosition")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("BundleIndex", *inst.BundleIndex))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        bundledPosition", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         positionBundle", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("    positionBundleToken", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("positionBundleAuthority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("               receiver", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj CloseBundledPosition) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BundleIndex` param:
	err = encoder.Encode(obj.BundleIndex)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CloseBundledPosition) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BundleIndex`:
	err = decoder.Decode(&obj.BundleIndex)
	if err != nil {
		return err
	}
	return nil
}

// NewCloseBundledPositionInstruction declares a new CloseBundledPosition instruction with the provided parameters and accounts.
func NewCloseBundledPositionInstruction(
	// Parameters:
	bundleIndex uint16,
	// Accounts:
	bundledPosition ag_solanago.PublicKey,
	positionBundle ag_solanago.PublicKey,
	positionBundleTokenAccount ag_solanago.PublicKey,
	positionBundleAuthority ag_solanago.PublicKey,
	receiver ag_solanago.PublicKey) *CloseBundledPosition {
	return NewCloseBundledPositionInstructionBuilder().
		SetBundleIndex(bundleIndex).
		SetBundledPositionAccount(bundledPosition).
		SetPositionBundleAccount(positionBundle).
		SetPositionBundleTokenAccountAccount(positionBundleTokenAccount).
		SetPositionBundleAuthorityAccount(positionBundleAuthority).
		SetReceiverAccount(receiver)
}
